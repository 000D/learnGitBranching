!function b(a,c,d){function e(g,h){if(!c[g]){if(!a[g]){var i="function"==typeof require&&require;if(!h&&i)return i(g,!0);if(f)return f(g,!0);throw new Error("Cannot find module '"+g+"'")}var j=c[g]={exports:{}};a[g][0].call(j.exports,function(b){var c=a[g][1][b];return e(c?c:b)},j,j.exports,b,a,c,d)}return c[g].exports}for(var f="function"==typeof require&&require,g=0;g<d.length;g++)e(d[g]);return e}({1:[function(a,b,c){(function(){var b,d=this,e=d.Backbone,f=[],g=f.push,h=f.slice,i=f.splice;b="undefined"!=typeof c?c:d.Backbone={},b.VERSION="0.9.10";var j=d._;j||"undefined"==typeof a||(j=a("underscore")),b.$=d.jQuery||d.Zepto||d.ender,b.noConflict=function(){return d.Backbone=e,this},b.emulateHTTP=!1,b.emulateJSON=!1;var k=/\s+/,l=function(a,b,c,d){if(!c)return!0;if("object"==typeof c)for(var e in c)a[b].apply(a,[e,c[e]].concat(d));else{if(!k.test(c))return!0;for(var f=c.split(k),g=0,h=f.length;h>g;g++)a[b].apply(a,[f[g]].concat(d))}},m=function(a,b){var c,d=-1,e=a.length;switch(b.length){case 0:for(;++d<e;)(c=a[d]).callback.call(c.ctx);return;case 1:for(;++d<e;)(c=a[d]).callback.call(c.ctx,b[0]);return;case 2:for(;++d<e;)(c=a[d]).callback.call(c.ctx,b[0],b[1]);return;case 3:for(;++d<e;)(c=a[d]).callback.call(c.ctx,b[0],b[1],b[2]);return;default:for(;++d<e;)(c=a[d]).callback.apply(c.ctx,b)}},n=b.Events={on:function(a,b,c){if(!l(this,"on",a,[b,c])||!b)return this;this._events||(this._events={});var d=this._events[a]||(this._events[a]=[]);return d.push({callback:b,context:c,ctx:c||this}),this},once:function(a,b,c){if(!l(this,"once",a,[b,c])||!b)return this;var d=this,e=j.once(function(){d.off(a,e),b.apply(this,arguments)});return e._callback=b,this.on(a,e,c),this},off:function(a,b,c){var d,e,f,g,h,i,k,m;if(!this._events||!l(this,"off",a,[b,c]))return this;if(!a&&!b&&!c)return this._events={},this;for(g=a?[a]:j.keys(this._events),h=0,i=g.length;i>h;h++)if(a=g[h],d=this._events[a]){if(f=[],b||c)for(k=0,m=d.length;m>k;k++)e=d[k],(b&&b!==e.callback&&b!==e.callback._callback||c&&c!==e.context)&&f.push(e);this._events[a]=f}return this},trigger:function(a){if(!this._events)return this;var b=h.call(arguments,1);if(!l(this,"trigger",a,b))return this;var c=this._events[a],d=this._events.all;return c&&m(c,b),d&&m(d,arguments),this},listenTo:function(a,b,c){var d=this._listeners||(this._listeners={}),e=a._listenerId||(a._listenerId=j.uniqueId("l"));return d[e]=a,a.on(b,"object"==typeof b?this:c,this),this},stopListening:function(a,b,c){var d=this._listeners;if(d){if(a)a.off(b,"object"==typeof b?this:c,this),b||c||delete d[a._listenerId];else{"object"==typeof b&&(c=this);for(var e in d)d[e].off(b,c,this);this._listeners={}}return this}}};n.bind=n.on,n.unbind=n.off,j.extend(b,n);var o=b.Model=function(a,b){var c,d=a||{};this.cid=j.uniqueId("c"),this.attributes={},b&&b.collection&&(this.collection=b.collection),b&&b.parse&&(d=this.parse(d,b)||{}),(c=j.result(this,"defaults"))&&(d=j.defaults({},d,c)),this.set(d,b),this.changed={},this.initialize.apply(this,arguments)};j.extend(o.prototype,n,{changed:null,idAttribute:"id",initialize:function(){},toJSON:function(){return j.clone(this.attributes)},sync:function(){return b.sync.apply(this,arguments)},get:function(a){return this.attributes[a]},escape:function(a){return j.escape(this.get(a))},has:function(a){return null!=this.get(a)},set:function(a,b,c){var d,e,f,g,h,i,k,l;if(null==a)return this;if("object"==typeof a?(e=a,c=b):(e={})[a]=b,c||(c={}),!this._validate(e,c))return!1;f=c.unset,h=c.silent,g=[],i=this._changing,this._changing=!0,i||(this._previousAttributes=j.clone(this.attributes),this.changed={}),l=this.attributes,k=this._previousAttributes,this.idAttribute in e&&(this.id=e[this.idAttribute]);for(d in e)b=e[d],j.isEqual(l[d],b)||g.push(d),j.isEqual(k[d],b)?delete this.changed[d]:this.changed[d]=b,f?delete l[d]:l[d]=b;if(!h){g.length&&(this._pending=!0);for(var m=0,n=g.length;n>m;m++)this.trigger("change:"+g[m],this,l[g[m]],c)}if(i)return this;if(!h)for(;this._pending;)this._pending=!1,this.trigger("change",this,c);return this._pending=!1,this._changing=!1,this},unset:function(a,b){return this.set(a,void 0,j.extend({},b,{unset:!0}))},clear:function(a){var b={};for(var c in this.attributes)b[c]=void 0;return this.set(b,j.extend({},a,{unset:!0}))},hasChanged:function(a){return null==a?!j.isEmpty(this.changed):j.has(this.changed,a)},changedAttributes:function(a){if(!a)return this.hasChanged()?j.clone(this.changed):!1;var b,c=!1,d=this._changing?this._previousAttributes:this.attributes;for(var e in a)j.isEqual(d[e],b=a[e])||((c||(c={}))[e]=b);return c},previous:function(a){return null!=a&&this._previousAttributes?this._previousAttributes[a]:null},previousAttributes:function(){return j.clone(this._previousAttributes)},fetch:function(a){a=a?j.clone(a):{},void 0===a.parse&&(a.parse=!0);var b=a.success;return a.success=function(a,c,d){return a.set(a.parse(c,d),d)?(b&&b(a,c,d),void 0):!1},this.sync("read",this,a)},save:function(a,b,c){var d,e,f,g,h=this.attributes;return null==a||"object"==typeof a?(d=a,c=b):(d={})[a]=b,!d||c&&c.wait||this.set(d,c)?(c=j.extend({validate:!0},c),this._validate(d,c)?(d&&c.wait&&(this.attributes=j.extend({},h,d)),void 0===c.parse&&(c.parse=!0),e=c.success,c.success=function(a,b,c){a.attributes=h;var f=a.parse(b,c);return c.wait&&(f=j.extend(d||{},f)),j.isObject(f)&&!a.set(f,c)?!1:(e&&e(a,b,c),void 0)},f=this.isNew()?"create":c.patch?"patch":"update","patch"===f&&(c.attrs=d),g=this.sync(f,this,c),d&&c.wait&&(this.attributes=h),g):!1):!1},destroy:function(a){a=a?j.clone(a):{};var b=this,c=a.success,d=function(){b.trigger("destroy",b,b.collection,a)};if(a.success=function(a,b,e){(e.wait||a.isNew())&&d(),c&&c(a,b,e)},this.isNew())return a.success(this,null,a),!1;var e=this.sync("delete",this,a);return a.wait||d(),e},url:function(){var a=j.result(this,"urlRoot")||j.result(this.collection,"url")||H();return this.isNew()?a:a+("/"===a.charAt(a.length-1)?"":"/")+encodeURIComponent(this.id)},parse:function(a){return a},clone:function(){return new this.constructor(this.attributes)},isNew:function(){return null==this.id},isValid:function(a){return!this.validate||!this.validate(this.attributes,a)},_validate:function(a,b){if(!b.validate||!this.validate)return!0;a=j.extend({},this.attributes,a);var c=this.validationError=this.validate(a,b)||null;return c?(this.trigger("invalid",this,c,b||{}),!1):!0}});var p=b.Collection=function(a,b){b||(b={}),b.model&&(this.model=b.model),void 0!==b.comparator&&(this.comparator=b.comparator),this.models=[],this._reset(),this.initialize.apply(this,arguments),a&&this.reset(a,j.extend({silent:!0},b))};j.extend(p.prototype,n,{model:o,initialize:function(){},toJSON:function(a){return this.map(function(b){return b.toJSON(a)})},sync:function(){return b.sync.apply(this,arguments)},add:function(a,b){a=j.isArray(a)?a.slice():[a],b||(b={});var c,d,e,f,h,k,l,m,n,o;for(l=[],m=b.at,n=this.comparator&&null==m&&0!=b.sort,o=j.isString(this.comparator)?this.comparator:null,c=0,d=a.length;d>c;c++)(e=this._prepareModel(f=a[c],b))?(h=this.get(e))?b.merge&&(h.set(f===e?e.attributes:f,b),n&&!k&&h.hasChanged(o)&&(k=!0)):(l.push(e),e.on("all",this._onModelEvent,this),this._byId[e.cid]=e,null!=e.id&&(this._byId[e.id]=e)):this.trigger("invalid",this,f,b);if(l.length&&(n&&(k=!0),this.length+=l.length,null!=m?i.apply(this.models,[m,0].concat(l)):g.apply(this.models,l)),k&&this.sort({silent:!0}),b.silent)return this;for(c=0,d=l.length;d>c;c++)(e=l[c]).trigger("add",e,this,b);return k&&this.trigger("sort",this,b),this},remove:function(a,b){a=j.isArray(a)?a.slice():[a],b||(b={});var c,d,e,f;for(c=0,d=a.length;d>c;c++)f=this.get(a[c]),f&&(delete this._byId[f.id],delete this._byId[f.cid],e=this.indexOf(f),this.models.splice(e,1),this.length--,b.silent||(b.index=e,f.trigger("remove",f,this,b)),this._removeReference(f));return this},push:function(a,b){return a=this._prepareModel(a,b),this.add(a,j.extend({at:this.length},b)),a},pop:function(a){var b=this.at(this.length-1);return this.remove(b,a),b},unshift:function(a,b){return a=this._prepareModel(a,b),this.add(a,j.extend({at:0},b)),a},shift:function(a){var b=this.at(0);return this.remove(b,a),b},slice:function(a,b){return this.models.slice(a,b)},get:function(a){return null==a?void 0:(this._idAttr||(this._idAttr=this.model.prototype.idAttribute),this._byId[a.id||a.cid||a[this._idAttr]||a])},at:function(a){return this.models[a]},where:function(a){return j.isEmpty(a)?[]:this.filter(function(b){for(var c in a)if(a[c]!==b.get(c))return!1;return!0})},sort:function(a){if(!this.comparator)throw new Error("Cannot sort a set without a comparator");return a||(a={}),j.isString(this.comparator)||1===this.comparator.length?this.models=this.sortBy(this.comparator,this):this.models.sort(j.bind(this.comparator,this)),a.silent||this.trigger("sort",this,a),this},pluck:function(a){return j.invoke(this.models,"get",a)},update:function(a,b){b=j.extend({add:!0,merge:!0,remove:!0},b),b.parse&&(a=this.parse(a,b));var c,d,e,f,g=[],h=[],i={};if(j.isArray(a)||(a=a?[a]:[]),b.add&&!b.remove)return this.add(a,b);for(d=0,e=a.length;e>d;d++)c=a[d],f=this.get(c),b.remove&&f&&(i[f.cid]=!0),(b.add&&!f||b.merge&&f)&&g.push(c);if(b.remove)for(d=0,e=this.models.length;e>d;d++)c=this.models[d],i[c.cid]||h.push(c);return h.length&&this.remove(h,b),g.length&&this.add(g,b),this},reset:function(a,b){b||(b={}),b.parse&&(a=this.parse(a,b));for(var c=0,d=this.models.length;d>c;c++)this._removeReference(this.models[c]);return b.previousModels=this.models.slice(),this._reset(),a&&this.add(a,j.extend({silent:!0},b)),b.silent||this.trigger("reset",this,b),this},fetch:function(a){a=a?j.clone(a):{},void 0===a.parse&&(a.parse=!0);var b=a.success;return a.success=function(a,c,d){var e=d.update?"update":"reset";a[e](c,d),b&&b(a,c,d)},this.sync("read",this,a)},create:function(a,b){if(b=b?j.clone(b):{},!(a=this._prepareModel(a,b)))return!1;b.wait||this.add(a,b);var c=this,d=b.success;return b.success=function(a,b,e){e.wait&&c.add(a,e),d&&d(a,b,e)},a.save(null,b),a},parse:function(a){return a},clone:function(){return new this.constructor(this.models)},_reset:function(){this.length=0,this.models.length=0,this._byId={}},_prepareModel:function(a,b){if(a instanceof o)return a.collection||(a.collection=this),a;b||(b={}),b.collection=this;var c=new this.model(a,b);return c._validate(a,b)?c:!1},_removeReference:function(a){this===a.collection&&delete a.collection,a.off("all",this._onModelEvent,this)},_onModelEvent:function(a,b,c,d){("add"!==a&&"remove"!==a||c===this)&&("destroy"===a&&this.remove(b,d),b&&a==="change:"+b.idAttribute&&(delete this._byId[b.previous(b.idAttribute)],null!=b.id&&(this._byId[b.id]=b)),this.trigger.apply(this,arguments))},sortedIndex:function(a,b,c){b||(b=this.comparator);var d=j.isFunction(b)?b:function(a){return a.get(b)};return j.sortedIndex(this.models,a,d,c)}});var q=["forEach","each","map","collect","reduce","foldl","inject","reduceRight","foldr","find","detect","filter","select","reject","every","all","some","any","include","contains","invoke","max","min","toArray","size","first","head","take","initial","rest","tail","drop","last","without","indexOf","shuffle","lastIndexOf","isEmpty","chain"];j.each(q,function(a){p.prototype[a]=function(){var b=h.call(arguments);return b.unshift(this.models),j[a].apply(j,b)}});var r=["groupBy","countBy","sortBy"];j.each(r,function(a){p.prototype[a]=function(b,c){var d=j.isFunction(b)?b:function(a){return a.get(b)};return j[a](this.models,d,c)}});var s=b.Router=function(a){a||(a={}),a.routes&&(this.routes=a.routes),this._bindRoutes(),this.initialize.apply(this,arguments)},t=/\((.*?)\)/g,u=/(\(\?)?:\w+/g,v=/\*\w+/g,w=/[\-{}\[\]+?.,\\\^$|#\s]/g;j.extend(s.prototype,n,{initialize:function(){},route:function(a,c,d){return j.isRegExp(a)||(a=this._routeToRegExp(a)),d||(d=this[c]),b.history.route(a,j.bind(function(e){var f=this._extractParameters(a,e);d&&d.apply(this,f),this.trigger.apply(this,["route:"+c].concat(f)),this.trigger("route",c,f),b.history.trigger("route",this,c,f)},this)),this},navigate:function(a,c){return b.history.navigate(a,c),this},_bindRoutes:function(){if(this.routes)for(var a,b=j.keys(this.routes);null!=(a=b.pop());)this.route(a,this.routes[a])},_routeToRegExp:function(a){return a=a.replace(w,"\\$&").replace(t,"(?:$1)?").replace(u,function(a,b){return b?a:"([^/]+)"}).replace(v,"(.*?)"),new RegExp("^"+a+"$")},_extractParameters:function(a,b){return a.exec(b).slice(1)}});var x=b.History=function(){this.handlers=[],j.bindAll(this,"checkUrl"),"undefined"!=typeof window&&(this.location=window.location,this.history=window.history)},y=/^[#\/]|\s+$/g,z=/^\/+|\/+$/g,A=/msie [\w.]+/,B=/\/$/;x.started=!1,j.extend(x.prototype,n,{interval:50,getHash:function(a){var b=(a||this).location.href.match(/#(.*)$/);return b?b[1]:""},getFragment:function(a,b){if(null==a)if(this._hasPushState||!this._wantsHashChange||b){a=this.location.pathname;var c=this.root.replace(B,"");a.indexOf(c)||(a=a.substr(c.length))}else a=this.getHash();return a.replace(y,"")},start:function(a){if(x.started)throw new Error("Backbone.history has already been started");x.started=!0,this.options=j.extend({},{root:"/"},this.options,a),this.root=this.options.root,this._wantsHashChange=this.options.hashChange!==!1,this._wantsPushState=!!this.options.pushState,this._hasPushState=!!(this.options.pushState&&this.history&&this.history.pushState);var c=this.getFragment(),d=document.documentMode,e=A.exec(navigator.userAgent.toLowerCase())&&(!d||7>=d);this.root=("/"+this.root+"/").replace(z,"/"),e&&this._wantsHashChange&&(this.iframe=b.$('<iframe src="javascript:0" tabindex="-1" />').hide().appendTo("body")[0].contentWindow,this.navigate(c)),this._hasPushState?b.$(window).on("popstate",this.checkUrl):this._wantsHashChange&&"onhashchange"in window&&!e?b.$(window).on("hashchange",this.checkUrl):this._wantsHashChange&&(this._checkUrlInterval=setInterval(this.checkUrl,this.interval)),this.fragment=c;var f=this.location,g=f.pathname.replace(/[^\/]$/,"$&/")===this.root;return this._wantsHashChange&&this._wantsPushState&&!this._hasPushState&&!g?(this.fragment=this.getFragment(null,!0),this.location.replace(this.root+this.location.search+"#"+this.fragment),!0):(this._wantsPushState&&this._hasPushState&&g&&f.hash&&(this.fragment=this.getHash().replace(y,""),this.history.replaceState({},document.title,this.root+this.fragment+f.search)),this.options.silent?void 0:this.loadUrl())},stop:function(){b.$(window).off("popstate",this.checkUrl).off("hashchange",this.checkUrl),clearInterval(this._checkUrlInterval),x.started=!1},route:function(a,b){this.handlers.unshift({route:a,callback:b})},checkUrl:function(){var a=this.getFragment();return a===this.fragment&&this.iframe&&(a=this.getFragment(this.getHash(this.iframe))),a===this.fragment?!1:(this.iframe&&this.navigate(a),this.loadUrl()||this.loadUrl(this.getHash()),void 0)},loadUrl:function(a){var b=this.fragment=this.getFragment(a),c=j.any(this.handlers,function(a){return a.route.test(b)?(a.callback(b),!0):void 0});return c},navigate:function(a,b){if(!x.started)return!1;if(b&&b!==!0||(b={trigger:b}),a=this.getFragment(a||""),this.fragment!==a){this.fragment=a;var c=this.root+a;if(this._hasPushState)this.history[b.replace?"replaceState":"pushState"]({},document.title,c);else{if(!this._wantsHashChange)return this.location.assign(c);this._updateHash(this.location,a,b.replace),this.iframe&&a!==this.getFragment(this.getHash(this.iframe))&&(b.replace||this.iframe.document.open().close(),this._updateHash(this.iframe.location,a,b.replace))}b.trigger&&this.loadUrl(a)}},_updateHash:function(a,b,c){if(c){var d=a.href.replace(/(javascript:|#).*$/,"");a.replace(d+"#"+b)}else a.hash="#"+b}}),b.history=new x;var C=b.View=function(a){this.cid=j.uniqueId("view"),this._configure(a||{}),this._ensureElement(),this.initialize.apply(this,arguments),this.delegateEvents()},D=/^(\S+)\s*(.*)$/,E=["model","collection","el","id","attributes","className","tagName","events"];j.extend(C.prototype,n,{tagName:"div",$:function(a){return this.$el.find(a)},initialize:function(){},render:function(){return this},remove:function(){return this.$el.remove(),this.stopListening(),this},setElement:function(a,c){return this.$el&&this.undelegateEvents(),this.$el=a instanceof b.$?a:b.$(a),this.el=this.$el[0],c!==!1&&this.delegateEvents(),this},delegateEvents:function(a){if(a||(a=j.result(this,"events"))){this.undelegateEvents();for(var b in a){var c=a[b];if(j.isFunction(c)||(c=this[a[b]]),!c)throw new Error('Method "'+a[b]+'" does not exist');var d=b.match(D),e=d[1],f=d[2];c=j.bind(c,this),e+=".delegateEvents"+this.cid,""===f?this.$el.on(e,c):this.$el.on(e,f,c)}}},undelegateEvents:function(){this.$el.off(".delegateEvents"+this.cid)},_configure:function(a){this.options&&(a=j.extend({},j.result(this,"options"),a)),j.extend(this,j.pick(a,E)),this.options=a},_ensureElement:function(){if(this.el)this.setElement(j.result(this,"el"),!1);else{var a=j.extend({},j.result(this,"attributes"));this.id&&(a.id=j.result(this,"id")),this.className&&(a["class"]=j.result(this,"className"));var c=b.$("<"+j.result(this,"tagName")+">").attr(a);this.setElement(c,!1)}}});var F={create:"POST",update:"PUT",patch:"PATCH","delete":"DELETE",read:"GET"};b.sync=function(a,c,d){var e=F[a];j.defaults(d||(d={}),{emulateHTTP:b.emulateHTTP,emulateJSON:b.emulateJSON});var f={type:e,dataType:"json"};if(d.url||(f.url=j.result(c,"url")||H()),null!=d.data||!c||"create"!==a&&"update"!==a&&"patch"!==a||(f.contentType="application/json",f.data=JSON.stringify(d.attrs||c.toJSON(d))),d.emulateJSON&&(f.contentType="application/x-www-form-urlencoded",f.data=f.data?{model:f.data}:{}),d.emulateHTTP&&("PUT"===e||"DELETE"===e||"PATCH"===e)){f.type="POST",d.emulateJSON&&(f.data._method=e);var g=d.beforeSend;d.beforeSend=function(a){return a.setRequestHeader("X-HTTP-Method-Override",e),g?g.apply(this,arguments):void 0}}"GET"===f.type||d.emulateJSON||(f.processData=!1);var h=d.success;d.success=function(a){h&&h(c,a,d),c.trigger("sync",c,a,d)};var i=d.error;d.error=function(a){i&&i(c,a,d),c.trigger("error",c,a,d)};var k=d.xhr=b.ajax(j.extend(f,d));return c.trigger("request",c,k,d),k},b.ajax=function(){return b.$.ajax.apply(b.$,arguments)};var G=function(a,b){var c,d=this;c=a&&j.has(a,"constructor")?a.constructor:function(){return d.apply(this,arguments)},j.extend(c,d,b);var e=function(){this.constructor=c};return e.prototype=d.prototype,c.prototype=new e,a&&j.extend(c.prototype,a),c.__super__=d.prototype,c};o.extend=p.extend=s.extend=C.extend=x.extend=G;var H=function(){throw new Error('A "url" property or function must be specified')}}).call(this)},{underscore:10}],2:[function(){},{}],3:[function(a,b){b.exports="function"==typeof Object.create?function(a,b){a.super_=b,a.prototype=Object.create(b.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}})}:function(a,b){a.super_=b;var c=function(){};c.prototype=b.prototype,a.prototype=new c,a.prototype.constructor=a}},{}],4:[function(a,b){var c=b.exports={};c.nextTick=function(){var a="undefined"!=typeof window&&window.setImmediate,b="undefined"!=typeof window&&window.postMessage&&window.addEventListener;if(a)return function(a){return window.setImmediate(a)};if(b){var c=[];return window.addEventListener("message",function(a){if(a.source===window&&"process-tick"===a.data&&(a.stopPropagation(),c.length>0)){var b=c.shift();b()}},!0),function(a){c.push(a),window.postMessage("process-tick","*")}}return function(a){setTimeout(a,0)}}(),c.title="browser",c.browser=!0,c.env={},c.argv=[],c.binding=function(){throw new Error("process.binding is not supported")},c.cwd=function(){return"/"},c.chdir=function(){throw new Error("process.chdir is not supported")}},{}],5:[function(a,b){b.exports=function(a){return a&&"object"==typeof a&&"function"==typeof a.copy&&"function"==typeof a.fill&&"function"==typeof a.readUInt8}},{}],6:[function(a,b,c){function d(a,b){var d={seen:[],stylize:f};return arguments.length>=3&&(d.depth=arguments[2]),arguments.length>=4&&(d.colors=arguments[3]),o(b)?d.showHidden=b:b&&c._extend(d,b),u(d.showHidden)&&(d.showHidden=!1),u(d.depth)&&(d.depth=2),u(d.colors)&&(d.colors=!1),u(d.customInspect)&&(d.customInspect=!0),d.colors&&(d.stylize=e),h(d,a,d.depth)}function e(a,b){var c=d.styles[b];return c?"["+d.colors[c][0]+"m"+a+"["+d.colors[c][1]+"m":a}function f(a){return a}function g(a){var b={};return a.forEach(function(a){b[a]=!0}),b}function h(a,b,d){if(a.customInspect&&b&&z(b.inspect)&&b.inspect!==c.inspect&&(!b.constructor||b.constructor.prototype!==b)){var e=b.inspect(d,a);return s(e)||(e=h(a,e,d)),e}var f=i(a,b);if(f)return f;var o=Object.keys(b),p=g(o);if(a.showHidden&&(o=Object.getOwnPropertyNames(b)),y(b)&&(o.indexOf("message")>=0||o.indexOf("description")>=0))return j(b);if(0===o.length){if(z(b)){var q=b.name?": "+b.name:"";return a.stylize("[Function"+q+"]","special")}if(v(b))return a.stylize(RegExp.prototype.toString.call(b),"regexp");if(x(b))return a.stylize(Date.prototype.toString.call(b),"date");if(y(b))return j(b)}var r="",t=!1,u=["{","}"];if(n(b)&&(t=!0,u=["[","]"]),z(b)){var w=b.name?": "+b.name:"";r=" [Function"+w+"]"}if(v(b)&&(r=" "+RegExp.prototype.toString.call(b)),x(b)&&(r=" "+Date.prototype.toUTCString.call(b)),y(b)&&(r=" "+j(b)),0===o.length&&(!t||0==b.length))return u[0]+r+u[1];if(0>d)return v(b)?a.stylize(RegExp.prototype.toString.call(b),"regexp"):a.stylize("[Object]","special");a.seen.push(b);var A;return A=t?k(a,b,d,p,o):o.map(function(c){return l(a,b,d,p,c,t)}),a.seen.pop(),m(A,r,u)}function i(a,b){if(u(b))return a.stylize("undefined","undefined");if(s(b)){var c="'"+JSON.stringify(b).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return a.stylize(c,"string")}return r(b)?a.stylize(""+b,"number"):o(b)?a.stylize(""+b,"boolean"):p(b)?a.stylize("null","null"):void 0}function j(a){return"["+Error.prototype.toString.call(a)+"]"}function k(a,b,c,d,e){for(var f=[],g=0,h=b.length;h>g;++g)E(b,String(g))?f.push(l(a,b,c,d,String(g),!0)):f.push("");return e.forEach(function(e){e.match(/^\d+$/)||f.push(l(a,b,c,d,e,!0))}),f}function l(a,b,c,d,e,f){var g,i,j;if(j=Object.getOwnPropertyDescriptor(b,e)||{value:b[e]},j.get?i=j.set?a.stylize("[Getter/Setter]","special"):a.stylize("[Getter]","special"):j.set&&(i=a.stylize("[Setter]","special")),E(d,e)||(g="["+e+"]"),i||(a.seen.indexOf(j.value)<0?(i=p(c)?h(a,j.value,null):h(a,j.value,c-1),i.indexOf("\n")>-1&&(i=f?i.split("\n").map(function(a){return"  "+a}).join("\n").substr(2):"\n"+i.split("\n").map(function(a){return"   "+a}).join("\n"))):i=a.stylize("[Circular]","special")),u(g)){if(f&&e.match(/^\d+$/))return i;g=JSON.stringify(""+e),g.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(g=g.substr(1,g.length-2),g=a.stylize(g,"name")):(g=g.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),g=a.stylize(g,"string"))}return g+": "+i}function m(a,b,c){var d=0,e=a.reduce(function(a,b){return d++,b.indexOf("\n")>=0&&d++,a+b.replace(/\u001b\[\d\d?m/g,"").length+1},0);return e>60?c[0]+(""===b?"":b+"\n ")+" "+a.join(",\n  ")+" "+c[1]:c[0]+b+" "+a.join(", ")+" "+c[1]}function n(a){return Array.isArray(a)}function o(a){return"boolean"==typeof a}function p(a){return null===a}function q(a){return null==a}function r(a){return"number"==typeof a}function s(a){return"string"==typeof a}function t(a){return"symbol"==typeof a}function u(a){return void 0===a}function v(a){return w(a)&&"[object RegExp]"===B(a)}function w(a){return"object"==typeof a&&null!==a}function x(a){return w(a)&&"[object Date]"===B(a)}function y(a){return w(a)&&("[object Error]"===B(a)||a instanceof Error)}function z(a){return"function"==typeof a}function A(a){return null===a||"boolean"==typeof a||"number"==typeof a||"string"==typeof a||"symbol"==typeof a||"undefined"==typeof a}function B(a){return Object.prototype.toString.call(a)}function C(a){return 10>a?"0"+a.toString(10):a.toString(10)}function D(){var a=new Date,b=[C(a.getHours()),C(a.getMinutes()),C(a.getSeconds())].join(":");return[a.getDate(),K[a.getMonth()],b].join(" ")}function E(a,b){return Object.prototype.hasOwnProperty.call(a,b)}var F=a("__browserify_process"),G="undefined"!=typeof self?self:"undefined"!=typeof window?window:{},H=/%[sdj%]/g;c.format=function(a){if(!s(a)){for(var b=[],c=0;c<arguments.length;c++)b.push(d(arguments[c]));return b.join(" ")}for(var c=1,e=arguments,f=e.length,g=String(a).replace(H,function(a){if("%%"===a)return"%";if(c>=f)return a;switch(a){case"%s":return String(e[c++]);case"%d":return Number(e[c++]);case"%j":try{return JSON.stringify(e[c++])}catch(b){return"[Circular]"}default:return a}}),h=e[c];f>c;h=e[++c])g+=p(h)||!w(h)?" "+h:" "+d(h);return g},c.deprecate=function(a,b){function d(){if(!e){if(F.throwDeprecation)throw new Error(b);F.traceDeprecation?console.trace(b):console.error(b),e=!0}return a.apply(this,arguments)}if(u(G.process))return function(){return c.deprecate(a,b).apply(this,arguments)};if(F.noDeprecation===!0)return a;var e=!1;return d};var I,J={};c.debuglog=function(a){if(u(I)&&(I=F.env.NODE_DEBUG||""),a=a.toUpperCase(),!J[a])if(new RegExp("\\b"+a+"\\b","i").test(I)){var b=F.pid;J[a]=function(){var d=c.format.apply(c,arguments);console.error("%s %d: %s",a,b,d)}}else J[a]=function(){};return J[a]},c.inspect=d,d.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},d.styles={special:"cyan",number:"yellow","boolean":"yellow",undefined:"grey","null":"bold",string:"green",date:"magenta",regexp:"red"},c.isArray=n,c.isBoolean=o,c.isNull=p,c.isNullOrUndefined=q,c.isNumber=r,c.isString=s,c.isSymbol=t,c.isUndefined=u,c.isRegExp=v,c.isObject=w,c.isDate=x,c.isError=y,c.isFunction=z,c.isPrimitive=A,c.isBuffer=a("./support/isBuffer");var K=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];c.log=function(){console.log("%s - %s",D(),c.format.apply(c,arguments))},c.inherits=a("inherits"),c._extend=function(a,b){if(!b||!w(b))return a;for(var c=Object.keys(b),d=c.length;d--;)a[c[d]]=b[c[d]];return a}},{"./support/isBuffer":5,__browserify_process:4,inherits:3}],7:[function(a,b,c){c.markdown=a("./markdown"),c.parse=c.markdown.toHTML},{"./markdown":8}],8:[function(b,c,d){!function(c){function d(){return"Markdown.mk_block( "+uneval(this.toString())+", "+uneval(this.trailing)+", "+uneval(this.lineNumber)+" )"}function e(){var a=b("util");return"Markdown.mk_block( "+a.inspect(this.toString())+", "+a.inspect(this.trailing)+", "+a.inspect(this.lineNumber)+" )"}function f(a){for(var b=0,c=-1;-1!==(c=a.indexOf("\n",c+1));)b++;return b}function g(a,b){function c(a){this.len_after=a,this.name="close_"+b}var d=a+"_state",e="strong"==a?"em_state":"strong_state";return function(f){if(this[d][0]==b)return this[d].shift(),[f.length,new c(f.length-b.length)];var g=this[e].slice(),h=this[d].slice();this[d].unshift(b);{var i=this.processInline(f.substr(b.length)),j=i[i.length-1];this[d].shift()}if(j instanceof c){i.pop();var k=f.length-j.len_after;return[k,[a].concat(i)]}return this[e]=g,this[d]=h,[b.length,b]}}function h(a){for(var b=a.split(""),c=[""],d=!1;b.length;){var e=b.shift();switch(e){case" ":d?c[c.length-1]+=e:c.push("");break;case"'":case'"':d=!d;break;case"\\":e=b.shift();default:c[c.length-1]+=e}}return c}function i(a){return r(a)&&a.length>1&&"object"==typeof a[1]&&!r(a[1])?a[1]:void 0}function j(a){return a.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;")}function k(a){if("string"==typeof a)return j(a);var b=a.shift(),c={},d=[];for(!a.length||"object"!=typeof a[0]||a[0]instanceof Array||(c=a.shift());a.length;)d.push(arguments.callee(a.shift()));var e="";for(var f in c)e+=" "+f+'="'+j(c[f])+'"';return"img"==b||"br"==b||"hr"==b?"<"+b+e+"/>":"<"+b+e+">"+d.join("")+"</"+b+">"}function l(a,b,c){var d;c=c||{};var e=a.slice(0);"function"==typeof c.preprocessTreeNode&&(e=c.preprocessTreeNode(e,b));var f=i(e);if(f){e[1]={};for(d in f)e[1][d]=f[d];f=e[1]}if("string"==typeof e)return e;switch(e[0]){case"header":e[0]="h"+e[1].level,delete e[1].level;break;case"bulletlist":e[0]="ul";break;case"numberlist":e[0]="ol";break;case"listitem":e[0]="li";break;case"para":e[0]="p";break;case"markdown":e[0]="html",f&&delete f.references;break;case"code_block":e[0]="pre",d=f?2:1;var g=["code"];g.push.apply(g,e.splice(d)),e[d]=g;break;case"inlinecode":e[0]="code";break;case"img":e[1].src=e[1].href,delete e[1].href;break;case"linebreak":e[0]="br";break;case"link":e[0]="a";break;case"link_ref":e[0]="a";var h=b[f.ref];if(!h)return f.original;delete f.ref,f.href=h.href,h.title&&(f.title=h.title),delete f.original;break;case"img_ref":e[0]="img";var h=b[f.ref];if(!h)return f.original;delete f.ref,f.src=h.href,h.title&&(f.title=h.title),delete f.original}if(d=1,f){for(var j in e[1])d=2;1===d&&e.splice(d,1)}for(;d<e.length;++d)e[d]=arguments.callee(e[d],b,c);return e}function m(a){for(var b=i(a)?2:1;b<a.length;)"string"==typeof a[b]?b+1<a.length&&"string"==typeof a[b+1]?a[b]+=a.splice(b+1,1)[0]:++b:(arguments.callee(a[b]),++b)}var n=c.Markdown=function s(a){switch(typeof a){case"undefined":this.dialect=s.dialects.Gruber;break;case"object":this.dialect=a;break;default:if(!(a in s.dialects))throw new Error("Unknown Markdown dialect '"+String(a)+"'");this.dialect=s.dialects[a]}this.em_state=[],this.strong_state=[],this.debug_indent=""};c.parse=function(a,b){var c=new n(b);return c.toTree(a)},c.toHTML=function(a,b,d){var e=c.toHTMLTree(a,b,d);return c.renderJsonML(e)},c.toHTMLTree=function(a,b,c){"string"==typeof a&&(a=this.parse(a,b));var d=i(a),e={};d&&d.references&&(e=d.references);var f=l(a,e,c);return m(f),f};var o=n.mk_block=function(a,b,c){1==arguments.length&&(b="\n\n");var f=new String(a);return f.trailing=b,f.inspect=e,f.toSource=d,void 0!=c&&(f.lineNumber=c),f};n.prototype.split_blocks=function(a){var b,c=/([\s\S]+?)($|\n(?:\s*\n|$)+)/g,d=[],e=1;for(null!=(b=/^(\s*\n)/.exec(a))&&(e+=f(b[0]),c.lastIndex=b[0].length);null!==(b=c.exec(a));)d.push(o(b[1],b[2],e)),e+=f(b[0]);return d},n.prototype.processBlock=function(a,b){var c=this.dialect.block,d=c.__order__;if("__call__"in c)return c.__call__.call(this,a,b);for(var e=0;e<d.length;e++){var f=c[d[e]].call(this,a,b);if(f)return(!r(f)||f.length>0&&!r(f[0]))&&this.debug(d[e],"didn't return a proper array"),f}return[]},n.prototype.processInline=function(a){return this.dialect.inline.__call__.call(this,String(a))},n.prototype.toTree=function(a,b){var c=a instanceof Array?a:this.split_blocks(a),d=this.tree;try{for(this.tree=b||this.tree||["markdown"];c.length;){var e=this.processBlock(c.shift(),c);e.length&&this.tree.push.apply(this.tree,e)}return this.tree}finally{b&&(this.tree=d)}},n.prototype.debug=function(){var a=Array.prototype.slice.call(arguments);a.unshift(this.debug_indent),"undefined"!=typeof print&&print.apply(print,a),"undefined"!=typeof console&&"undefined"!=typeof console.log&&console.log.apply(null,a)},n.prototype.loop_re_over_block=function(a,b,c){for(var d,e=b.valueOf();e.length&&null!=(d=a.exec(e));)e=e.substr(d[0].length),c.call(this,d);return e},n.dialects={},n.dialects.Gruber={block:{atxHeader:function(a,b){var c=a.match(/^(#{1,6})\s*(.*?)\s*#*\s*(?:\n|$)/);if(!c)return void 0;var d=["header",{level:c[1].length}];return Array.prototype.push.apply(d,this.processInline(c[2])),c[0].length<a.length&&b.unshift(o(a.substr(c[0].length),a.trailing,a.lineNumber+2)),[d]},setextHeader:function(a,b){var c=a.match(/^(.*)\n([-=])\2\2+(?:\n|$)/);if(!c)return void 0;var d="="===c[2]?1:2,e=["header",{level:d},c[1]];return c[0].length<a.length&&b.unshift(o(a.substr(c[0].length),a.trailing,a.lineNumber+2)),[e]},code:function(a,b){var c=[],d=/^(?: {0,3}\t| {4})(.*)\n?/;if(!a.match(d))return void 0;a:for(;;){var e=this.loop_re_over_block(d,a.valueOf(),function(a){c.push(a[1])});if(e.length){b.unshift(o(e,a.trailing));break a}if(!b.length)break a;if(!b[0].match(d))break a;c.push(a.trailing.replace(/[^\n]/g,"").substring(2)),a=b.shift()}return[["code_block",c.join("\n")]]},horizRule:function(a,b){var c=a.match(/^(?:([\s\S]*?)\n)?[ \t]*([-_*])(?:[ \t]*\2){2,}[ \t]*(?:\n([\s\S]*))?$/);
if(!c)return void 0;var d=[["hr"]];return c[1]&&d.unshift.apply(d,this.processBlock(c[1],[])),c[3]&&b.unshift(o(c[3])),d},lists:function(){function a(a){return new RegExp("(?:^("+i+"{0,"+a+"} {0,3})("+f+")\\s+)|(^"+i+"{0,"+(a-1)+"}[ ]{0,4})")}function b(a){return a.replace(/ {0,3}\t/g,"    ")}function c(a,b,c,d){if(b)return a.push(["para"].concat(c)),void 0;var e=a[a.length-1]instanceof Array&&"para"==a[a.length-1][0]?a[a.length-1]:a;d&&a.length>1&&c.unshift(d);for(var f=0;f<c.length;f++){var g=c[f],h="string"==typeof g;h&&e.length>1&&"string"==typeof e[e.length-1]?e[e.length-1]+=g:e.push(g)}}function d(a,b){for(var c=new RegExp("^("+i+"{"+a+"}.*?\\n?)*$"),d=new RegExp("^"+i+"{"+a+"}","gm"),e=[];b.length>0;){if(c.exec(b[0])){var f=b.shift(),g=f.replace(d,"");e.push(o(g,f.trailing,f.lineNumber))}break}return e}function e(a,b,c){var d=a.list,e=d[d.length-1];if(!(e[1]instanceof Array&&"para"==e[1][0]))if(b+1==c.length)e.push(["para"].concat(e.splice(1)));else{var f=e.pop();e.push(["para"].concat(e.splice(1)),f)}}var f="[*+-]|\\d+\\.",g=/[*+-]/,h=new RegExp("^( {0,3})("+f+")[ 	]+"),i="(?: {0,3}\\t| {4})";return function(f,i){function j(a){var b=g.exec(a[2])?["bulletlist"]:["numberlist"];return n.push({list:b,indent:a[1]}),b}var k=f.match(h);if(!k)return void 0;for(var l,m,n=[],o=j(k),p=!1,r=[n[0].list];;){for(var s=f.split(/(?=\n)/),t="",u=0;u<s.length;u++){var v="",w=s[u].replace(/^\n/,function(a){return v=a,""}),x=a(n.length);if(k=w.match(x),void 0!==k[1]){t.length&&(c(l,p,this.processInline(t),v),p=!1,t=""),k[1]=b(k[1]);var y=Math.floor(k[1].length/4)+1;if(y>n.length)o=j(k),l.push(o),l=o[1]=["listitem"];else{var z=!1;for(m=0;m<n.length;m++)if(n[m].indent==k[1]){o=n[m].list,n.splice(m+1),z=!0;break}z||(y++,y<=n.length?(n.splice(y),o=n[y-1].list):(o=j(k),l.push(o))),l=["listitem"],o.push(l)}v=""}w.length>k[0].length&&(t+=v+w.substr(k[0].length))}t.length&&(c(l,p,this.processInline(t),v),p=!1,t="");var A=d(n.length,i);A.length>0&&(q(n,e,this),l.push.apply(l,this.toTree(A,[])));var B=i[0]&&i[0].valueOf()||"";if(!B.match(h)&&!B.match(/^ /))break;f=i.shift();var C=this.dialect.block.horizRule(f,i);if(C){r.push.apply(r,C);break}q(n,e,this),p=!0}return r}}(),blockquote:function(a,b){if(!a.match(/^>/m))return void 0;var c=[];if(">"!=a[0]){for(var d=a.split(/\n/),e=[];d.length&&">"!=d[0][0];)e.push(d.shift());a=d.join("\n"),c.push.apply(c,this.processBlock(e.join("\n"),[]))}for(;b.length&&">"==b[0][0];){var f=b.shift();a=new String(a+a.trailing+f),a.trailing=f.trailing}{var g=a.replace(/^> ?/gm,"");this.tree}return c.push(this.toTree(g,["blockquote"])),c},referenceDefn:function(a,b){var c=/^\s*\[(.*?)\]:\s*(\S+)(?:\s+(?:(['"])(.*?)\3|\((.*?)\)))?\n?/;if(!a.match(c))return void 0;i(this.tree)||this.tree.splice(1,0,{});var d=i(this.tree);void 0===d.references&&(d.references={});var e=this.loop_re_over_block(c,a,function(a){a[2]&&"<"==a[2][0]&&">"==a[2][a[2].length-1]&&(a[2]=a[2].substring(1,a[2].length-1));var b=d.references[a[1].toLowerCase()]={href:a[2]};void 0!==a[4]?b.title=a[4]:void 0!==a[5]&&(b.title=a[5])});return e.length&&b.unshift(o(e,a.trailing)),[]},para:function(a){return[["para"].concat(this.processInline(a))]}}},n.dialects.Gruber.inline={__oneElement__:function(a,b,c){var d,e;b=b||this.dialect.inline.__patterns__;var f=new RegExp("([\\s\\S]*?)("+(b.source||b)+")");if(d=f.exec(a),!d)return[a.length,a];if(d[1])return[d[1].length,d[1]];var e;return d[2]in this.dialect.inline&&(e=this.dialect.inline[d[2]].call(this,a.substr(d.index),d,c||[])),e=e||[d[2].length,d[2]]},__call__:function(a,b){function c(a){"string"==typeof a&&"string"==typeof e[e.length-1]?e[e.length-1]+=a:e.push(a)}for(var d,e=[];a.length>0;)d=this.dialect.inline.__oneElement__.call(this,a,b,e),a=a.substr(d.shift()),q(d,c);return e},"]":function(){},"}":function(){},"\\":function(a){return a.match(/^\\[\\`\*_{}\[\]()#\+.!\-]/)?[2,a[1]]:[1,"\\"]},"![":function(a){var b=a.match(/^!\[(.*?)\][ \t]*\([ \t]*(\S*)(?:[ \t]+(["'])(.*?)\3)?[ \t]*\)/);if(b){b[2]&&"<"==b[2][0]&&">"==b[2][b[2].length-1]&&(b[2]=b[2].substring(1,b[2].length-1)),b[2]=this.dialect.inline.__call__.call(this,b[2],/\\/)[0];var c={alt:b[1],href:b[2]||""};return void 0!==b[4]&&(c.title=b[4]),[b[0].length,["img",c]]}return b=a.match(/^!\[(.*?)\][ \t]*\[(.*?)\]/),b?[b[0].length,["img_ref",{alt:b[1],ref:b[2].toLowerCase(),original:b[0]}]]:[2,"!["]},"[":function t(a){var b=String(a),c=n.DialectHelpers.inline_until_char.call(this,a.substr(1),"]");if(!c)return[1,"["];var t,d,e=1+c[0],f=c[1];a=a.substr(e);var g=a.match(/^\s*\([ \t]*(\S+)(?:[ \t]+(["'])(.*?)\2)?[ \t]*\)/);if(g){var h=g[1];if(e+=g[0].length,h&&"<"==h[0]&&">"==h[h.length-1]&&(h=h.substring(1,h.length-1)),!g[3])for(var i=1,j=0;j<h.length;j++)switch(h[j]){case"(":i++;break;case")":0==--i&&(e-=h.length-j,h=h.substring(0,j))}return h=this.dialect.inline.__call__.call(this,h,/\\/)[0],d={href:h||""},void 0!==g[3]&&(d.title=g[3]),t=["link",d].concat(f),[e,t]}return g=a.match(/^\s*\[(.*?)\]/),g?(e+=g[0].length,d={ref:(g[1]||String(f)).toLowerCase(),original:b.substr(0,e)},t=["link_ref",d].concat(f),[e,t]):1==f.length&&"string"==typeof f[0]?(d={ref:f[0].toLowerCase(),original:b.substr(0,e)},t=["link_ref",d,f[0]],[e,t]):[1,"["]},"<":function(a){var b;return null!=(b=a.match(/^<(?:((https?|ftp|mailto):[^>]+)|(.*?@.*?\.[a-zA-Z]+))>/))?b[3]?[b[0].length,["link",{href:"mailto:"+b[3]},b[3]]]:"mailto"==b[2]?[b[0].length,["link",{href:b[1]},b[1].substr("mailto:".length)]]:[b[0].length,["link",{href:b[1]},b[1]]]:[1,"<"]},"`":function(a){var b=a.match(/(`+)(([\s\S]*?)\1)/);return b&&b[2]?[b[1].length+b[2].length,["inlinecode",b[3]]]:[1,"`"]},"  \n":function(){return[3,["linebreak"]]}},n.dialects.Gruber.inline["**"]=g("strong","**"),n.dialects.Gruber.inline.__=g("strong","__"),n.dialects.Gruber.inline["*"]=g("em","*"),n.dialects.Gruber.inline._=g("em","_"),n.buildBlockOrder=function(a){var b=[];for(var c in a)"__order__"!=c&&"__call__"!=c&&b.push(c);a.__order__=b},n.buildInlinePatterns=function(a){var b=[];for(var c in a)if(!c.match(/^__.*__$/)){var d=c.replace(/([\\.*+?|()\[\]{}])/g,"\\$1").replace(/\n/,"\\n");b.push(1==c.length?d:"(?:"+d+")")}b=b.join("|"),a.__patterns__=b;var e=a.__call__;a.__call__=function(a,c){return void 0!=c?e.call(this,a,c):e.call(this,a,b)}},n.DialectHelpers={},n.DialectHelpers.inline_until_char=function(a,b){for(var c=0,d=[];;){if(a[c]==b)return c++,[c,d];if(c>=a.length)return null;res=this.dialect.inline.__oneElement__.call(this,a.substr(c)),c+=res[0],d.push.apply(d,res.slice(1))}},n.subclassDialect=function(a){function b(){}function c(){}return b.prototype=a.block,c.prototype=a.inline,{block:new b,inline:new c}},n.buildBlockOrder(n.dialects.Gruber.block),n.buildInlinePatterns(n.dialects.Gruber.inline),n.dialects.Maruku=n.subclassDialect(n.dialects.Gruber),n.dialects.Maruku.processMetaHash=function(a){for(var b=h(a),c={},d=0;d<b.length;++d)if(/^#/.test(b[d]))c.id=b[d].substring(1);else if(/^\./.test(b[d]))c["class"]=c["class"]?c["class"]+b[d].replace(/./," "):b[d].substring(1);else if(/\=/.test(b[d])){var e=b[d].split(/\=/);c[e[0]]=e[1]}return c},n.dialects.Maruku.block.document_meta=function(a){if(a.lineNumber>1)return void 0;if(!a.match(/^(?:\w+:.*\n)*\w+:.*$/))return void 0;i(this.tree)||this.tree.splice(1,0,{});var b=a.split(/\n/);for(p in b){var c=b[p].match(/(\w+):\s*(.*)$/),d=c[1].toLowerCase(),e=c[2];this.tree[1][d]=e}return[]},n.dialects.Maruku.block.block_meta=function(b){var c=b.match(/(^|\n) {0,3}\{:\s*((?:\\\}|[^\}])*)\s*\}$/);if(!c)return void 0;var d,e=this.dialect.processMetaHash(c[2]);if(""===c[1]){var f=this.tree[this.tree.length-1];if(d=i(f),"string"==typeof f)return void 0;d||(d={},f.splice(1,0,d));for(a in e)d[a]=e[a];return[]}var g=b.replace(/\n.*$/,""),h=this.processBlock(g,[]);d=i(h[0]),d||(d={},h[0].splice(1,0,d));for(a in e)d[a]=e[a];return h},n.dialects.Maruku.block.definition_list=function(a,b){var c,d=/^((?:[^\s:].*\n)+):\s+([\s\S]+)$/,e=["dl"];if(!(h=a.match(d)))return void 0;for(var f=[a];b.length&&d.exec(b[0]);)f.push(b.shift());for(var g=0;g<f.length;++g){var h=f[g].match(d),i=h[1].replace(/\n$/,"").split(/\n/),j=h[2].split(/\n:\s+/);for(c=0;c<i.length;++c)e.push(["dt",i[c]]);for(c=0;c<j.length;++c)e.push(["dd"].concat(this.processInline(j[c].replace(/(\n)\s+/,"$1"))))}return[e]},n.dialects.Maruku.inline["{:"]=function(a,b,c){if(!c.length)return[2,"{:"];var d=c[c.length-1];if("string"==typeof d)return[2,"{:"];var e=a.match(/^\{:\s*((?:\\\}|[^\}])*)\s*\}/);if(!e)return[2,"{:"];var f=this.dialect.processMetaHash(e[1]),g=i(d);g||(g={},d.splice(1,0,g));for(var h in f)g[h]=f[h];return[e[0].length,""]},n.buildBlockOrder(n.dialects.Maruku.block),n.buildInlinePatterns(n.dialects.Maruku.inline);var q,r=Array.isArray||function(a){return"[object Array]"==Object.prototype.toString.call(a)};q=Array.prototype.forEach?function(a,b,c){return a.forEach(b,c)}:function(a,b,c){for(var d=0;d<a.length;d++)b.call(c||a,a[d],d,a)},c.renderJsonML=function(a,b){b=b||{},b.root=b.root||!1;var c=[];if(b.root)c.push(k(a));else for(a.shift(),!a.length||"object"!=typeof a[0]||a[0]instanceof Array||a.shift();a.length;)c.push(k(a.shift()));return c.join("\n\n")}}(function(){return"undefined"==typeof d?(window.markdown={},window.markdown):d}())},{util:6}],9:[function(a,b,c){var d=a("__browserify_process");!function(a){if("function"==typeof bootstrap)bootstrap("promise",a);else if("object"==typeof c)a(void 0,c);else if("function"==typeof define)define(a);else if("undefined"!=typeof ses){if(!ses.ok())return;ses.makeQ=function(){var b={};return a(void 0,b)}}else a(void 0,Q={})}(function(a,b){"use strict";function c(a){return"[object StopIteration]"===sb(a)||a instanceof lb}function e(a,b){b.stack&&"object"==typeof a&&null!==a&&a.stack&&-1===a.stack.indexOf(tb)&&(a.stack=f(a.stack)+"\n"+tb+"\n"+f(b.stack))}function f(a){for(var b=a.split("\n"),c=[],d=0;d<b.length;++d){var e=b[d];h(e)||g(e)||c.push(e)}return c.join("\n")}function g(a){return-1!==a.indexOf("(module.js:")||-1!==a.indexOf("(node.js:")}function h(a){var b=/at .+ \((.*):(\d+):\d+\)/.exec(a);if(!b)return!1;var c=b[1],d=b[2];return c===bb&&d>=cb&&Ab>=d}function i(){if(Error.captureStackTrace){var a,b,c=Error.prepareStackTrace;return Error.prepareStackTrace=function(c,d){a=d[1].getFileName(),b=d[1].getLineNumber()},(new Error).stack,Error.prepareStackTrace=c,bb=a,b}}function j(a,b,c){return function(){return"undefined"!=typeof console&&"function"==typeof console.warn&&console.warn(b+" is deprecated, use "+c+" instead.",new Error("").stack),a.apply(a,arguments)}}function k(){function a(a){c&&(b=v(a),nb(c,function(a,c){fb(function(){b.promiseSend.apply(b,c)})},void 0),c=void 0,d=void 0)}var b,c=[],d=[],e=qb(k.prototype),f=qb(m.prototype);return f.promiseSend=function(a,e,f,g){var h=mb(arguments);c?(c.push(h),"when"===a&&g&&d.push(g)):fb(function(){b.promiseSend.apply(b,h)})},f.valueOf=function(){return c?f:b.valueOf()},Error.captureStackTrace&&(Error.captureStackTrace(f,k),f.stack=f.stack.substring(f.stack.indexOf("\n")+1)),eb(f),e.promise=f,e.resolve=a,e.reject=function(b){a(u(b))},e.notify=function(a){c&&nb(d,function(b,c){fb(function(){c(a)})},void 0)},e}function l(a){var b=k();return J(a,b.resolve,b.reject,b.notify).fail(b.reject),b.promise}function m(a,b,c,d){void 0===b&&(b=function(a){return u(new Error("Promise does not support operation: "+a))});var e=qb(m.prototype);return e.promiseSend=function(c,d){var f,g=mb(arguments,2);try{f=a[c]?a[c].apply(e,g):b.apply(e,[c].concat(g))}catch(h){f=u(h)}d&&d(f)},c&&(e.valueOf=c),d&&(e.exception=d),eb(e),e}function n(a){return o(a)?a.valueOf():a}function o(a){return a&&"function"==typeof a.promiseSend}function p(a){return a&&"function"==typeof a.then}function q(a){return r(a)||s(a)}function r(a){return!p(n(a))}function s(a){return a=n(a),o(a)&&"exception"in a}function t(){ub||"undefined"==typeof window||window.Touch||!window.console||console.log("Should be empty:",wb),ub=!0}function u(a){var b=m({when:function(b){if(b){var c=ob(vb,this);-1!==c&&(wb.splice(c,1),vb.splice(c,1))}return b?b(a):u(a)}},function(){return u(a)},function(){return this},a);return t(),vb.push(b),wb.push(a),b}function v(a){if(o(a))return a;if(a=n(a),p(a)){var b=k();return a.then(b.resolve,b.reject,b.notify),b.promise}return m({when:function(){return a},get:function(b){return a[b]},put:function(b,c){return a[b]=c,a},del:function(b){return delete a[b],a},post:function(b,c){return a[b].apply(a,c)},apply:function(b,c){return a.apply(b,c)},fapply:function(b){return a.apply(void 0,b)},viewInfo:function(){function b(a){d[a]||(d[a]=typeof c[a])}for(var c=a,d={};c;)Object.getOwnPropertyNames(c).forEach(b),c=Object.getPrototypeOf(c);return{type:typeof a,properties:d}},keys:function(){return rb(a)}},void 0,function(){return a})}function w(a){return m({isDef:function(){}},function(){var b=mb(arguments);return F.apply(void 0,[a].concat(b))},function(){return n(a)})}function x(a,b){return a=v(a),b?m({viewInfo:function(){return b}},function(){var b=mb(arguments);return F.apply(void 0,[a].concat(b))},function(){return n(a)}):F(a,"viewInfo")}function y(a){return x(a).when(function(b){var c;c="function"===b.type?function(){return yb(a,void 0,arguments)}:{};var d=b.properties||{};return rb(d).forEach(function(b){"function"===d[b]&&(c[b]=function(){return xb(a,b,arguments)})}),v(c)})}function z(a,b,c,d){function f(a){try{return"function"==typeof b?b(a):a}catch(c){return u(c)}}function g(a){if("function"==typeof c){e(a,l);try{return c(a)}catch(b){return u(b)}}return u(a)}function h(a){return"function"==typeof d?d(a):a}var i=k(),j=!1,l=v(a);return fb(function(){l.promiseSend("when",function(a){j||(j=!0,i.resolve(f(a)))},function(a){j||(j=!0,i.resolve(g(a)))})}),l.promiseSend("when",void 0,void 0,function(a){i.notify(h(a))}),i.promise}function A(a,b,c){return z(a,function(a){return M(a).then(function(a){return b.apply(void 0,a)},c)},c)}function B(a){return function(){function b(a,b){var g;try{g=d[a](b)}catch(h){return c(h)?h.value:u(h)}return z(g,e,f)}var d=a.apply(this,arguments),e=b.bind(b,"send"),f=b.bind(b,"throw");return e()}}function C(a){throw new lb(a)}function D(a){return function(){return M([this,M(arguments)]).spread(function(b,c){return a.apply(b,c)})}}function E(a){return function(b){var c=mb(arguments,1);return F.apply(void 0,[b,a].concat(c))}}function F(a,b){var c=k(),d=mb(arguments,2);return a=v(a),fb(function(){a.promiseSend.apply(a,[b,c.resolve].concat(d))}),c.promise}function G(a,b,c){var d=k();return a=v(a),fb(function(){a.promiseSend.apply(a,[b,d.resolve].concat(c))}),d.promise}function H(a){return function(b){var c=mb(arguments,1);return G(b,a,c)}}function I(a,b){var c=mb(arguments,2);return yb(a,b,c)}function J(a){var b=mb(arguments,1);return zb(a,b)}function K(a,b){var c=mb(arguments,2);return function(){var d=c.concat(mb(arguments));return yb(a,b,d)}}function L(a){var b=mb(arguments,1);return function(){var c=b.concat(mb(arguments));return zb(a,c)}}function M(a){return z(a,function(a){var b=a.length;if(0===b)return v(a);var c=k();return nb(a,function(d,e,f){r(e)?(a[f]=n(e),0===--b&&c.resolve(a)):z(e,function(d){a[f]=d,0===--b&&c.resolve(a)}).fail(c.reject)},void 0),c.promise})}function N(a){return z(a,function(a){return z(M(pb(a,function(a){return z(a,db,db)})),function(){return pb(a,v)})})}function O(a,b){return z(a,void 0,b)}function P(a,b){return z(a,void 0,void 0,b)}function Q(a,b){return z(a,function(a){return z(b(),function(){return a})},function(a){return z(b(),function(){return u(a)})})}function R(a,c,d,f){function g(c){fb(function(){if(e(c,a),!b.onerror)throw c;b.onerror(c)})}var h=c||d||f?z(a,c,d,f):a;O(h,g)}function S(a,b){var c=k(),d=setTimeout(function(){c.reject(new Error("Timed out after "+b+" ms"))},b);return z(a,function(a){clearTimeout(d),c.resolve(a)},function(a){clearTimeout(d),c.reject(a)}),c.promise}function T(a,b){void 0===b&&(b=a,a=void 0);var c=k();return setTimeout(function(){c.resolve(a)},b),c.promise}function U(a,b){var c=mb(b),d=k();return c.push(d.makeNodeResolver()),zb(a,c).fail(d.reject),d.promise}function V(a){var b=mb(arguments,1),c=k();return b.push(c.makeNodeResolver()),zb(a,b).fail(c.reject),c.promise}function W(a){var b=mb(arguments,1);return function(){var c=b.concat(mb(arguments)),d=k();return c.push(d.makeNodeResolver()),zb(a,c).fail(d.reject),d.promise}}function X(a,b,c){return Z(a,b).apply(void 0,c)}function Y(a,b){var c=mb(arguments,2);return X(a,b,c)}function Z(a){if(arguments.length>1){var b=arguments[1],c=mb(arguments,2),d=a;a=function(){var a=c.concat(mb(arguments));return d.apply(b,a)}}return function(){var b=k(),c=mb(arguments);return c.push(b.makeNodeResolver()),zb(a,c).fail(b.reject),b.promise}}function $(a,b,c){var d=mb(c),e=k();return d.push(e.makeNodeResolver()),xb(a,b,d).fail(e.reject),e.promise}function _(a,b){var c=mb(arguments,2),d=k();return c.push(d.makeNodeResolver()),xb(a,b,c).fail(d.reject),d.promise}function ab(a,b){return b?(a.then(function(a){fb(function(){b(null,a)})},function(a){fb(function(){b(a)})}),void 0):a}var bb,cb=i(),db=function(){},eb=Object.freeze||db;"undefined"!=typeof cajaVM&&(eb=cajaVM.def);var fb;if("undefined"!=typeof d)fb=d.nextTick;else if("function"==typeof setImmediate)fb=setImmediate;else if("undefined"!=typeof MessageChannel){var gb=new MessageChannel,hb={},ib=hb;gb.port1.onmessage=function(){hb=hb.next;var a=hb.task;delete hb.task,a()},fb=function(a){ib=ib.next={task:a},gb.port2.postMessage(0)}}else fb=function(a){setTimeout(a,0)};var jb;if(Function.prototype.bind){var kb=Function.prototype.bind;jb=kb.bind(kb.call)}else jb=function(a){return function(){return a.call.apply(a,arguments)}};var lb,mb=jb(Array.prototype.slice),nb=jb(Array.prototype.reduce||function(a,b){var c=0,d=this.length;if(1===arguments.length)for(;;){if(c in this){b=this[c++];break}if(++c>=d)throw new TypeError}for(;d>c;c++)c in this&&(b=a(b,this[c],c));return b}),ob=jb(Array.prototype.indexOf||function(a){for(var b=0;b<this.length;b++)if(this[b]===a)return b;return-1}),pb=jb(Array.prototype.map||function(a,b){var c=this,d=[];return nb(c,function(e,f,g){d.push(a.call(b,f,g,c))},void 0),d}),qb=Object.create||function(a){function b(){}return b.prototype=a,new b},rb=Object.keys||function(a){var b=[];for(var c in a)b.push(c);return b},sb=Object.prototype.toString;lb="undefined"!=typeof ReturnValue?ReturnValue:function(a){this.value=a};var tb="From previous event:";b.nextTick=fb,b.defer=k,k.prototype.makeNodeResolver=function(){var a=this;return function(b,c){b?a.reject(b):arguments.length>2?a.resolve(mb(arguments,1)):a.resolve(c)}},k.prototype.node=j(k.prototype.makeNodeResolver,"node","makeNodeResolver"),b.promise=l,b.makePromise=m,m.prototype.then=function(a,b,c){return z(this,a,b,c)},m.prototype.thenResolve=function(a){return z(this,function(){return a})},nb(["isResolved","isFulfilled","isRejected","when","spread","send","get","put","del","post","invoke","keys","apply","call","bind","fapply","fcall","fbind","all","allResolved","view","viewInfo","timeout","delay","catch","finally","fail","fin","progress","end","done","nfcall","nfapply","nfbind","ncall","napply","nbind","npost","ninvoke","nend","nodeify"],function(a,c){m.prototype[c]=function(){return b[c].apply(b,[this].concat(mb(arguments)))}},void 0),m.prototype.toSource=function(){return this.toString()},m.prototype.toString=function(){return"[object Promise]"},eb(m.prototype),b.nearer=n,b.isPromise=o,b.isPromiseAlike=p,b.isResolved=q,b.isFulfilled=r,b.isRejected=s;var ub,vb=[],wb=[];b.reject=u,b.begin=v,b.resolve=v,b.ref=j(v,"ref","resolve"),b.master=w,b.viewInfo=x,b.view=y,b.when=z,b.spread=A,b.async=B,b["return"]=C,b.promised=D,b.sender=j(E,"sender","dispatcher"),b.Method=j(E,"Method","dispatcher"),b.send=j(F,"send","dispatch"),b.dispatch=G,b.dispatcher=H,b.get=H("get"),b.put=H("put"),b["delete"]=b.del=H("del");var xb=b.post=H("post");b.invoke=function(a,b){var c=mb(arguments,2);return xb(a,b,c)};var yb=b.apply=j(H("apply"),"apply","fapply"),zb=b.fapply=H("fapply");b.call=j(I,"call","fcall"),b["try"]=J,b.fcall=J,b.bind=j(K,"bind","fbind"),b.fbind=L,b.keys=H("keys"),b.all=M,b.allResolved=N,b["catch"]=b.fail=O,b.progress=P,b["finally"]=b.fin=Q,b.end=j(R,"end","done"),b.done=R,b.timeout=S,b.delay=T,b.nfapply=U,b.nfcall=V,b.nfbind=W,b.napply=j(X,"napply","npost"),b.ncall=j(Y,"ncall","ninvoke"),b.nbind=j(Z,"nbind","nfbind"),b.npost=$,b.ninvoke=_,b.nend=j(ab,"nend","nodeify"),b.nodeify=ab;var Ab=i()})},{__browserify_process:4}],10:[function(a,b,c){(function(){var a=this,d=a._,e={},f=Array.prototype,g=Object.prototype,h=Function.prototype,i=f.push,j=f.slice,k=f.concat,l=g.toString,m=g.hasOwnProperty,n=f.forEach,o=f.map,p=f.reduce,q=f.reduceRight,r=f.filter,s=f.every,t=f.some,u=f.indexOf,v=f.lastIndexOf,w=Array.isArray,x=Object.keys,y=h.bind,z=function(a){return a instanceof z?a:this instanceof z?(this._wrapped=a,void 0):new z(a)};"undefined"!=typeof c?("undefined"!=typeof b&&b.exports&&(c=b.exports=z),c._=z):a._=z,z.VERSION="1.4.4";var A=z.each=z.forEach=function(a,b,c){if(null!=a)if(n&&a.forEach===n)a.forEach(b,c);else if(a.length===+a.length){for(var d=0,f=a.length;f>d;d++)if(b.call(c,a[d],d,a)===e)return}else for(var g in a)if(z.has(a,g)&&b.call(c,a[g],g,a)===e)return};z.map=z.collect=function(a,b,c){var d=[];return null==a?d:o&&a.map===o?a.map(b,c):(A(a,function(a,e,f){d[d.length]=b.call(c,a,e,f)}),d)};var B="Reduce of empty array with no initial value";z.reduce=z.foldl=z.inject=function(a,b,c,d){var e=arguments.length>2;if(null==a&&(a=[]),p&&a.reduce===p)return d&&(b=z.bind(b,d)),e?a.reduce(b,c):a.reduce(b);if(A(a,function(a,f,g){e?c=b.call(d,c,a,f,g):(c=a,e=!0)}),!e)throw new TypeError(B);return c},z.reduceRight=z.foldr=function(a,b,c,d){var e=arguments.length>2;if(null==a&&(a=[]),q&&a.reduceRight===q)return d&&(b=z.bind(b,d)),e?a.reduceRight(b,c):a.reduceRight(b);var f=a.length;if(f!==+f){var g=z.keys(a);f=g.length}if(A(a,function(h,i,j){i=g?g[--f]:--f,e?c=b.call(d,c,a[i],i,j):(c=a[i],e=!0)}),!e)throw new TypeError(B);return c},z.find=z.detect=function(a,b,c){var d;return C(a,function(a,e,f){return b.call(c,a,e,f)?(d=a,!0):void 0}),d},z.filter=z.select=function(a,b,c){var d=[];return null==a?d:r&&a.filter===r?a.filter(b,c):(A(a,function(a,e,f){b.call(c,a,e,f)&&(d[d.length]=a)}),d)},z.reject=function(a,b,c){return z.filter(a,function(a,d,e){return!b.call(c,a,d,e)},c)},z.every=z.all=function(a,b,c){b||(b=z.identity);var d=!0;return null==a?d:s&&a.every===s?a.every(b,c):(A(a,function(a,f,g){return(d=d&&b.call(c,a,f,g))?void 0:e}),!!d)};var C=z.some=z.any=function(a,b,c){b||(b=z.identity);var d=!1;return null==a?d:t&&a.some===t?a.some(b,c):(A(a,function(a,f,g){return d||(d=b.call(c,a,f,g))?e:void 0}),!!d)};z.contains=z.include=function(a,b){return null==a?!1:u&&a.indexOf===u?-1!=a.indexOf(b):C(a,function(a){return a===b})},z.invoke=function(a,b){var c=j.call(arguments,2),d=z.isFunction(b);return z.map(a,function(a){return(d?b:a[b]).apply(a,c)})},z.pluck=function(a,b){return z.map(a,function(a){return a[b]})},z.where=function(a,b,c){return z.isEmpty(b)?c?null:[]:z[c?"find":"filter"](a,function(a){for(var c in b)if(b[c]!==a[c])return!1;return!0})},z.findWhere=function(a,b){return z.where(a,b,!0)},z.max=function(a,b,c){if(!b&&z.isArray(a)&&a[0]===+a[0]&&a.length<65535)return Math.max.apply(Math,a);if(!b&&z.isEmpty(a))return-1/0;var d={computed:-1/0,value:-1/0};return A(a,function(a,e,f){var g=b?b.call(c,a,e,f):a;g>=d.computed&&(d={value:a,computed:g})}),d.value},z.min=function(a,b,c){if(!b&&z.isArray(a)&&a[0]===+a[0]&&a.length<65535)return Math.min.apply(Math,a);if(!b&&z.isEmpty(a))return 1/0;var d={computed:1/0,value:1/0};return A(a,function(a,e,f){var g=b?b.call(c,a,e,f):a;g<d.computed&&(d={value:a,computed:g})}),d.value},z.shuffle=function(a){var b,c=0,d=[];return A(a,function(a){b=z.random(c++),d[c-1]=d[b],d[b]=a}),d};var D=function(a){return z.isFunction(a)?a:function(b){return b[a]}};z.sortBy=function(a,b,c){var d=D(b);return z.pluck(z.map(a,function(a,b,e){return{value:a,index:b,criteria:d.call(c,a,b,e)}}).sort(function(a,b){var c=a.criteria,d=b.criteria;if(c!==d){if(c>d||void 0===c)return 1;if(d>c||void 0===d)return-1}return a.index<b.index?-1:1}),"value")};var E=function(a,b,c,d){var e={},f=D(b||z.identity);return A(a,function(b,g){var h=f.call(c,b,g,a);d(e,h,b)}),e};z.groupBy=function(a,b,c){return E(a,b,c,function(a,b,c){(z.has(a,b)?a[b]:a[b]=[]).push(c)})},z.countBy=function(a,b,c){return E(a,b,c,function(a,b){z.has(a,b)||(a[b]=0),a[b]++})},z.sortedIndex=function(a,b,c,d){c=null==c?z.identity:D(c);for(var e=c.call(d,b),f=0,g=a.length;g>f;){var h=f+g>>>1;c.call(d,a[h])<e?f=h+1:g=h}return f},z.toArray=function(a){return a?z.isArray(a)?j.call(a):a.length===+a.length?z.map(a,z.identity):z.values(a):[]},z.size=function(a){return null==a?0:a.length===+a.length?a.length:z.keys(a).length},z.first=z.head=z.take=function(a,b,c){return null==a?void 0:null==b||c?a[0]:j.call(a,0,b)},z.initial=function(a,b,c){return j.call(a,0,a.length-(null==b||c?1:b))},z.last=function(a,b,c){return null==a?void 0:null==b||c?a[a.length-1]:j.call(a,Math.max(a.length-b,0))},z.rest=z.tail=z.drop=function(a,b,c){return j.call(a,null==b||c?1:b)},z.compact=function(a){return z.filter(a,z.identity)};var F=function(a,b,c){return A(a,function(a){z.isArray(a)?b?i.apply(c,a):F(a,b,c):c.push(a)}),c};z.flatten=function(a,b){return F(a,b,[])},z.without=function(a){return z.difference(a,j.call(arguments,1))},z.uniq=z.unique=function(a,b,c,d){z.isFunction(b)&&(d=c,c=b,b=!1);var e=c?z.map(a,c,d):a,f=[],g=[];return A(e,function(c,d){(b?d&&g[g.length-1]===c:z.contains(g,c))||(g.push(c),f.push(a[d]))}),f},z.union=function(){return z.uniq(k.apply(f,arguments))},z.intersection=function(a){var b=j.call(arguments,1);return z.filter(z.uniq(a),function(a){return z.every(b,function(b){return z.indexOf(b,a)>=0})})},z.difference=function(a){var b=k.apply(f,j.call(arguments,1));return z.filter(a,function(a){return!z.contains(b,a)})},z.zip=function(){for(var a=j.call(arguments),b=z.max(z.pluck(a,"length")),c=new Array(b),d=0;b>d;d++)c[d]=z.pluck(a,""+d);return c},z.object=function(a,b){if(null==a)return{};for(var c={},d=0,e=a.length;e>d;d++)b?c[a[d]]=b[d]:c[a[d][0]]=a[d][1];return c},z.indexOf=function(a,b,c){if(null==a)return-1;var d=0,e=a.length;if(c){if("number"!=typeof c)return d=z.sortedIndex(a,b),a[d]===b?d:-1;d=0>c?Math.max(0,e+c):c}if(u&&a.indexOf===u)return a.indexOf(b,c);for(;e>d;d++)if(a[d]===b)return d;return-1},z.lastIndexOf=function(a,b,c){if(null==a)return-1;var d=null!=c;if(v&&a.lastIndexOf===v)return d?a.lastIndexOf(b,c):a.lastIndexOf(b);for(var e=d?c:a.length;e--;)if(a[e]===b)return e;return-1},z.range=function(a,b,c){arguments.length<=1&&(b=a||0,a=0),c=arguments[2]||1;for(var d=Math.max(Math.ceil((b-a)/c),0),e=0,f=new Array(d);d>e;)f[e++]=a,a+=c;return f},z.bind=function(a,b){if(a.bind===y&&y)return y.apply(a,j.call(arguments,1));var c=j.call(arguments,2);return function(){return a.apply(b,c.concat(j.call(arguments)))}},z.partial=function(a){var b=j.call(arguments,1);return function(){return a.apply(this,b.concat(j.call(arguments)))}},z.bindAll=function(a){var b=j.call(arguments,1);return 0===b.length&&(b=z.functions(a)),A(b,function(b){a[b]=z.bind(a[b],a)}),a},z.memoize=function(a,b){var c={};return b||(b=z.identity),function(){var d=b.apply(this,arguments);return z.has(c,d)?c[d]:c[d]=a.apply(this,arguments)}},z.delay=function(a,b){var c=j.call(arguments,2);return setTimeout(function(){return a.apply(null,c)},b)},z.defer=function(a){return z.delay.apply(z,[a,1].concat(j.call(arguments,1)))},z.throttle=function(a,b){var c,d,e,f,g=0,h=function(){g=new Date,e=null,f=a.apply(c,d)};return function(){var i=new Date,j=b-(i-g);return c=this,d=arguments,0>=j?(clearTimeout(e),e=null,g=i,f=a.apply(c,d)):e||(e=setTimeout(h,j)),f}},z.debounce=function(a,b,c){var d,e;return function(){var f=this,g=arguments,h=function(){d=null,c||(e=a.apply(f,g))},i=c&&!d;return clearTimeout(d),d=setTimeout(h,b),i&&(e=a.apply(f,g)),e}},z.once=function(a){var b,c=!1;return function(){return c?b:(c=!0,b=a.apply(this,arguments),a=null,b)}},z.wrap=function(a,b){return function(){var c=[a];return i.apply(c,arguments),b.apply(this,c)}},z.compose=function(){var a=arguments;return function(){for(var b=arguments,c=a.length-1;c>=0;c--)b=[a[c].apply(this,b)];return b[0]}},z.after=function(a,b){return 0>=a?b():function(){return--a<1?b.apply(this,arguments):void 0}},z.keys=x||function(a){if(a!==Object(a))throw new TypeError("Invalid object");var b=[];for(var c in a)z.has(a,c)&&(b[b.length]=c);return b},z.values=function(a){var b=[];for(var c in a)z.has(a,c)&&b.push(a[c]);return b},z.pairs=function(a){var b=[];for(var c in a)z.has(a,c)&&b.push([c,a[c]]);return b},z.invert=function(a){var b={};for(var c in a)z.has(a,c)&&(b[a[c]]=c);return b},z.functions=z.methods=function(a){var b=[];for(var c in a)z.isFunction(a[c])&&b.push(c);return b.sort()},z.extend=function(a){return A(j.call(arguments,1),function(b){if(b)for(var c in b)a[c]=b[c]}),a},z.pick=function(a){var b={},c=k.apply(f,j.call(arguments,1));return A(c,function(c){c in a&&(b[c]=a[c])}),b},z.omit=function(a){var b={},c=k.apply(f,j.call(arguments,1));for(var d in a)z.contains(c,d)||(b[d]=a[d]);return b},z.defaults=function(a){return A(j.call(arguments,1),function(b){if(b)for(var c in b)null==a[c]&&(a[c]=b[c])}),a},z.clone=function(a){return z.isObject(a)?z.isArray(a)?a.slice():z.extend({},a):a},z.tap=function(a,b){return b(a),a};var G=function(a,b,c,d){if(a===b)return 0!==a||1/a==1/b;if(null==a||null==b)return a===b;a instanceof z&&(a=a._wrapped),b instanceof z&&(b=b._wrapped);var e=l.call(a);if(e!=l.call(b))return!1;switch(e){case"[object String]":return a==String(b);case"[object Number]":return a!=+a?b!=+b:0==a?1/a==1/b:a==+b;case"[object Date]":case"[object Boolean]":return+a==+b;case"[object RegExp]":return a.source==b.source&&a.global==b.global&&a.multiline==b.multiline&&a.ignoreCase==b.ignoreCase}if("object"!=typeof a||"object"!=typeof b)return!1;for(var f=c.length;f--;)if(c[f]==a)return d[f]==b;c.push(a),d.push(b);var g=0,h=!0;if("[object Array]"==e){if(g=a.length,h=g==b.length)for(;g--&&(h=G(a[g],b[g],c,d)););}else{var i=a.constructor,j=b.constructor;if(i!==j&&!(z.isFunction(i)&&i instanceof i&&z.isFunction(j)&&j instanceof j))return!1;for(var k in a)if(z.has(a,k)&&(g++,!(h=z.has(b,k)&&G(a[k],b[k],c,d))))break;if(h){for(k in b)if(z.has(b,k)&&!g--)break;h=!g}}return c.pop(),d.pop(),h};z.isEqual=function(a,b){return G(a,b,[],[])},z.isEmpty=function(a){if(null==a)return!0;if(z.isArray(a)||z.isString(a))return 0===a.length;for(var b in a)if(z.has(a,b))return!1;return!0},z.isElement=function(a){return!(!a||1!==a.nodeType)},z.isArray=w||function(a){return"[object Array]"==l.call(a)},z.isObject=function(a){return a===Object(a)},A(["Arguments","Function","String","Number","Date","RegExp"],function(a){z["is"+a]=function(b){return l.call(b)=="[object "+a+"]"}}),z.isArguments(arguments)||(z.isArguments=function(a){return!(!a||!z.has(a,"callee"))}),"function"!=typeof/./&&(z.isFunction=function(a){return"function"==typeof a}),z.isFinite=function(a){return isFinite(a)&&!isNaN(parseFloat(a))},z.isNaN=function(a){return z.isNumber(a)&&a!=+a},z.isBoolean=function(a){return a===!0||a===!1||"[object Boolean]"==l.call(a)},z.isNull=function(a){return null===a},z.isUndefined=function(a){return void 0===a},z.has=function(a,b){return m.call(a,b)},z.noConflict=function(){return a._=d,this},z.identity=function(a){return a},z.times=function(a,b,c){for(var d=Array(a),e=0;a>e;e++)d[e]=b.call(c,e);return d},z.random=function(a,b){return null==b&&(b=a,a=0),a+Math.floor(Math.random()*(b-a+1))};var H={escape:{"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","/":"&#x2F;"}};H.unescape=z.invert(H.escape);var I={escape:new RegExp("["+z.keys(H.escape).join("")+"]","g"),unescape:new RegExp("("+z.keys(H.unescape).join("|")+")","g")};z.each(["escape","unescape"],function(a){z[a]=function(b){return null==b?"":(""+b).replace(I[a],function(b){return H[a][b]})}}),z.result=function(a,b){if(null==a)return null;var c=a[b];return z.isFunction(c)?c.call(a):c},z.mixin=function(a){A(z.functions(a),function(b){var c=z[b]=a[b];
z.prototype[b]=function(){var a=[this._wrapped];return i.apply(a,arguments),N.call(this,c.apply(z,a))}})};var J=0;z.uniqueId=function(a){var b=++J+"";return a?a+b:b},z.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var K=/(.)^/,L={"'":"'","\\":"\\","\r":"r","\n":"n","	":"t","\u2028":"u2028","\u2029":"u2029"},M=/\\|'|\r|\n|\t|\u2028|\u2029/g;z.template=function(a,b,c){var d;c=z.defaults({},c,z.templateSettings);var e=new RegExp([(c.escape||K).source,(c.interpolate||K).source,(c.evaluate||K).source].join("|")+"|$","g"),f=0,g="__p+='";a.replace(e,function(b,c,d,e,h){return g+=a.slice(f,h).replace(M,function(a){return"\\"+L[a]}),c&&(g+="'+\n((__t=("+c+"))==null?'':_.escape(__t))+\n'"),d&&(g+="'+\n((__t=("+d+"))==null?'':__t)+\n'"),e&&(g+="';\n"+e+"\n__p+='"),f=h+b.length,b}),g+="';\n",c.variable||(g="with(obj||{}){\n"+g+"}\n"),g="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+g+"return __p;\n";try{d=new Function(c.variable||"obj","_",g)}catch(h){throw h.source=g,h}if(b)return d(b,z);var i=function(a){return d.call(this,a,z)};return i.source="function("+(c.variable||"obj")+"){\n"+g+"}",i},z.chain=function(a){return z(a).chain()};var N=function(a){return this._chain?z(a).chain():a};z.mixin(z),A(["pop","push","reverse","shift","sort","splice","unshift"],function(a){var b=f[a];z.prototype[a]=function(){var c=this._wrapped;return b.apply(c,arguments),"shift"!=a&&"splice"!=a||0!==c.length||delete c[0],N.call(this,c)}}),A(["concat","join","slice"],function(a){var b=f[a];z.prototype[a]=function(){return N.call(this,b.apply(this._wrapped,arguments))}}),z.extend(z.prototype,{chain:function(){return this._chain=!0,this},value:function(){return this._wrapped}})}).call(this)},{}],11:[function(a,b,c){function d(){{var b=a("../views"),c=a("../models/collections"),d=a("../views/commandViews");new b.MainHelperBar,new b.BackgroundView}this.commandCollection=new c.CommandCollection,this.commandBuffer=new c.CommandBuffer({collection:this.commandCollection}),this.commandPromptView=new d.CommandPromptView({el:$("#commandLineBar")}),this.commandLineHistoryView=new d.CommandLineHistoryView({el:$("#commandLineHistory"),collection:this.commandCollection})}var e,f,g,h,i,j=a("underscore"),k=a("backbone"),l=a("../util/constants"),m=a("../util"),n=a("../intl"),o=j.clone(k.Events),p=function(){var b=a("../sandbox/").Sandbox,c=(a("../level").Level,a("../util/eventBaton").EventBaton),j=a("../level/arbiter").LevelArbiter,k=a("../views/levelDropdownView").LevelDropdownView;g=new c,e=new d,f=new b,h=new j,i=new k({wait:!0}),o.on("localeChanged",r),o.on("vcsModeChange",q),s(g),t(f)},q=function(a){if(window.$){var b=a.mode,c=b.slice(0,1).toUpperCase()+b.slice(1),d="Git"===c?"Hg":"Git",e=new RegExp(d,"g");document.title=n.str("learn-git-branching").replace(e,c),$("span.vcs-mode-aware").each(function(a,b){var d=$(b).text().replace(e,c);$(b).text(d)})}},r=function(){window.$&&$("span.intl-aware").each(function(b,c){var d=a("../intl"),e=$(c).attr("data-intl");$(c).text(d.str(e).toUpperCase())})},s=function(a){var b=function(){$("#commandTextField").focus()};b(),$(window).focus(function(b){a.trigger("windowFocus",b)}),$(document).click(function(b){a.trigger("documentClick",b)}),$(document).bind("keydown",function(b){a.trigger("docKeydown",b)}),$(document).bind("keyup",function(b){a.trigger("docKeyup",b)}),$(window).on("resize",function(a){o.trigger("resize",a)}),a.stealBaton("docKeydown",function(){}),a.stealBaton("docKeyup",function(){}),a.stealBaton("windowFocus",b),a.stealBaton("documentClick",b);var c=function(b){return function(){var c=[b];j.each(arguments,function(a){c.push(a)}),a.trigger.apply(a,c)}};$("#commandTextField").on("keydown",c("keydown")),$("#commandTextField").on("keyup",c("keyup")),$(window).trigger("resize")},t=function(a){var b,c=m.parseQueryString(window.location.href);if((/(iPhone|iPod|iPad).*AppleWebKit/i.test(navigator.userAgent)||/android/i.test(navigator.userAgent))&&a.mainVis.customEvents.on("gitEngineReady",function(){g.trigger("commandSubmitted","mobile alert")}),c.hasOwnProperty("demo")?b=["git commit; git checkout -b bugFix C1; git commit; git merge master; git checkout master; git commit; git rebase bugFix;","delay 1000; reset;","level advanced1 --noFinishDialog --noStartCommand --noIntroDialog;","delay 2000; show goal; delay 1000; hide goal;","git checkout bugFix; git rebase master; git checkout side; git rebase bugFix;","git checkout another; git rebase side; git rebase another master;","help; levels"]:c.hasOwnProperty("hgdemo")?(b=['importTreeNow {"branches":{"master":{"target":"C3","id":"master"},"feature":{"target":"C2","id":"feature"},"debug":{"target":"C4","id":"debug"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2"],"id":"C4"}},"HEAD":{"target":"feature","id":"HEAD"}}',"delay 1000","git rebase master","delay 1000","undo","hg book","delay 1000","hg rebase -d master"],b=b.join(";#").split("#")):c.hasOwnProperty("hgdemo2")?(b=['importTreeNow {"branches":{"master":{"target":"C3","id":"master"},"feature":{"target":"C2","id":"feature"},"debug":{"target":"C4","id":"debug"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2"],"id":"C4"}},"HEAD":{"target":"debug","id":"HEAD"}}',"delay 1000","git rebase master","delay 1000","undo","hg sum","delay 1000","hg rebase -d master"],b=b.join(";#").split("#")):c.hasOwnProperty("remoteDemo")?(b=["git clone","git commit","git fakeTeamwork","git pull","git push","git commit","git fakeTeamwork","git pull --rebase","git push","levels"],b=b.join(";#").split("#")):c.hasOwnProperty("NODEMO")||(b=["git help;","delay 1000;","help;","levels"]),b&&a.mainVis.customEvents.on("gitEngineReady",function(){g.trigger("commandSubmitted",b.join(""))}),void 0!==c.locale&&c.locale.length&&(l.GLOBAL.locale=c.locale,o.trigger("localeChanged")),c.command){var d=unescape(c.command);a.mainVis.customEvents.on("gitEngineReady",function(){g.trigger("commandSubmitted",d)})}};a("../util").isBrowser()&&$(document).ready(p),c.getEvents=function(){return o},c.getSandbox=function(){return f},c.getEventBaton=function(){return g},c.getCommandUI=function(){return e},c.getLevelArbiter=function(){return h},c.getLevelDropdown=function(){return i},c.init=p},{"../intl":24,"../level":29,"../level/arbiter":26,"../models/collections":33,"../sandbox/":36,"../util":41,"../util/constants":37,"../util/eventBaton":40,"../views":48,"../views/commandViews":46,"../views/levelDropdownView":49,backbone:1,underscore:10}],12:[function(a,b,c){function d(a,b,c){if(this.vcs=a,this.method=b,this.rawOptions=c,this.supportedMap=l.getOptionMap()[a][b],void 0===this.supportedMap)throw new Error("No option map for "+b);this.generalArgs=[]}var e=a("underscore"),f=a("../intl"),g=a("../util/errors"),h=a("../git/commands"),i=a("../mercurial/commands"),j=g.CommandProcessError,k=(g.CommandResult,{git:h.commandConfig,hg:i.commandConfig}),l={execute:function(a,b,c,d){if(!k[a][b])throw new Error("i dont have a command for "+b);var e=k[a][b];return e.delegate?this.delegateExecute(e,c,d):(e.execute.call(this,c,d),void 0)},delegateExecute:function(a,b,c){var d=a.delegate.call(this,b,c);d.multiDelegate?e.each(d.multiDelegate,function(a){c.setOptionsMap(a.options||{}),c.setGeneralArgs(a.args||[]),k[a.vcs][a.name].execute.call(this,b,c)},this):(a=k[d.vcs][d.name],k[d.vcs][d.name].execute.call(this,b,c))},blankMap:function(){return{git:{},hg:{}}},getShortcutMap:function(){var a=this.blankMap();return this.loop(function(b,c,d){b.sc&&(a[d][c]=b.sc)},this),a},getOptionMap:function(){var a=this.blankMap();return this.loop(function(b,c,d){var f=b.displayName||c,g={};e.each(b.options,function(a){g[a]=!1}),a[d][f]=g}),a},getRegexMap:function(){var a=this.blankMap();return this.loop(function(b,c,d){var e=b.displayName||c;a[d][e]=b.regex}),a},getCommandsThatCount:function(){var a=this.blankMap();return this.loop(function(b,c,d){b.dontCountForGolf||(a[d][c]=b.regex)}),a},loop:function(a){e.each(k,function(b,c){e.each(b,function(b,d){a(b,d,c)})})}},m=function(a){var b,c,f;if(e.each(l.getRegexMap(),function(d,g){e.each(d,function(d,e){d.exec(a)&&(b=g,c=e,f=a.split(" ").slice(2).join(" "))})}),!c)return!1;var g=new d(b,c,f),h=g.explodeAndSet();return{toSet:{generalArgs:g.generalArgs,supportedMap:g.supportedMap,error:h,vcs:b,method:c,options:f,eventName:"processGitCommand"}}};d.prototype.explodeAndSet=function(){for(var a=this.rawOptions.match(/('.*?'|".*?"|\S+)/g)||[],b=0;b<a.length;b++){var c=a[b];if("-"==c.slice(0,1)){if(void 0===this.supportedMap[c])return new j({msg:f.str("option-not-supported",{option:c})});var d=a[b+1],e=[];d&&"-"!==d.slice(0,1)&&(b++,e=[d]),this.supportedMap[c]=e}else this.generalArgs.push(c)}},c.commands=l,c.parse=m},{"../git/commands":17,"../intl":24,"../mercurial/commands":32,"../util/errors":39,underscore:10}],13:[function(a,b,c){c.dialog={en_US:[{type:"ModalAlert",options:{markdowns:["## Are you sure you want to see the solution?","","I believe in you! You can do it"]}}],de_DE:[{type:"ModalAlert",options:{markdowns:["## Bist du sicher, dass du die Auflösung sehen willst?","","Ich glaube an dich! Du schaffst das!"]}}],zh_CN:[{type:"ModalAlert",options:{markdowns:["## 确定要看答案吗？","","哥相信你！你可以的"]}}],fr_FR:[{type:"ModalAlert",options:{markdowns:["## Êtes-vous sûr de vouloir voir la solution ?","","Je crois en vous ! Vous pouvez le faire"]}}]}},{}],14:[function(a,b,c){c.dialog={en_US:[{type:"ModalAlert",options:{markdowns:["## Welcome to the level builder!","","Here are the main steps:","","  * Set up the initial environment with git commands","  * Define the starting tree with ```define start```","  * Enter the series of git commands that compose the (optimal) solution","  * Define the goal tree with ```define goal```. Defining the goal also defines the solution","  * Optionally define a hint with ```define hint```","  * Edit the name with ```define name```","  * Optionally define a nice start dialog with ```edit dialog```","  * Enter the command ```finish``` to output your level JSON!"]}}],de_DE:[{type:"ModalAlert",options:{markdowns:["## Willkommen zum Level-Editor!","","So funktioniert's:","","  * Stelle mit Git-Befehlen die Ausganssituation her","  * Leg den Startpunkt mit ```define start``` fest","  * Gib eine Abfolge von Git-Befehlen ein, welche die (optimale) Lösung darstellen","  * Leg den Ziel-Baum mit ```define goal``` fest. Damit markierst du den Endpunkt der Lösung","  * Gib einen Hinweis mittels ```define hint``` an, wenn du willst","  * Änder den Namen mittels ```define name```","  * Wenn du magst, erstelle einen schönene Einführungsdialog mit ```edit dialog```","  * Gib das Kommando ```finish``` ein um deinen Level als JSON auszugeben"]}}],zh_CN:[{type:"ModalAlert",options:{markdowns:["## 欢迎使用关卡生成器！","","主要步骤如下：","","  * 使用 git 命令布置好初始环境","  * 使用 ```define start``` 命令定义起始树","  * 输入一系列 git 命令，编好答案","  * 使用 ```define goal``` 命令定义目标树。定义目标的同时定义答案","  * 还可以用 ```define hint``` 命令定义一个提示","  * 用 ```define name``` 修改名称","  * 还可以用 ```edit dialog``` 定义一个漂亮的开始对话框","  * 输入 ```finish``` 就可以输出你的关卡数据（JSON）了！"]}}],fr_FR:[{type:"ModalAlert",options:{markdowns:["## Bienvenue dans l'éditeur niveaux !","","Voici les étapes principales :","","  * Mettez en place l'environnement initial avec des commandes git","  * Définissez l'arbre de départ avec ```define start```","  * Saisissez la série de commandes git qui composent la solution (optimale)","  * Définissez l'arbre cible avec ```define goal```. Cela définit aussi la solution","  * Optionnellement, définissez un indice avec ```define hint```","  * Changez le nom avec ```define name```","  * Optionellement, definissez un joli dialogue de départ avec ```edit dialog```","  * Entrez la commande ```finish``` pour délivrer votre niveau JSON!"]}}]}},{}],15:[function(a,b,c){c.dialog={en_US:[{type:"ModalAlert",options:{markdowns:["## Great Job!!","","You solved the level in *{numCommands}* command(s); ","our solution uses {best}."]}}],de_DE:[{type:"ModalAlert",options:{markdowns:["## Super gemacht","","Du hast den Level in *{numCommands}* Befehl(en) gelöst;","meine Lösung besteht aus {best}."]}}],ja:[{type:"ModalAlert",options:{markdowns:["## 完成!","","あなたは*{numCommands}*回のコマンドでこの課題をクリアしました; ","模範解答では{best}回です。"]}}],zh_CN:[{type:"ModalAlert",options:{markdowns:["## 碉堡了！","","你用 *{numCommands}* 条命令搞定了这一关；我们的答案要用 {best}。"]}}],fr_FR:[{type:"ModalAlert",options:{markdowns:["## Beau Travail!!","","Vous avez résolu le niveau en *{numCommands}* commande(s); ","notre solution le fait en {best}."]}}]}},{}],16:[function(a,b,c){c.dialog={en_US:[{type:"ModalAlert",options:{markdowns:["## Welcome to LearnGitBranching!","","This application is designed to help beginners grasp ","the powerful concepts behind branching when working ","with git. We hope you enjoy this application and maybe ","even learn something!","","# Demo!","","If you have not seen the demo, please check it out here:","","[http://pcottle.github.io/learnGitBranching/?demo](http://pcottle.github.io/learnGitBranching/?demo)","","Annoyed at this dialog? Append `?NODEMO` to the url to get rid of it, linked below for convenience:","","[http://pcottle.github.io/learnGitBranching/?NODEMO](?NODEMO)"]}},{type:"ModalAlert",options:{markdowns:["## Git commands","","You have a large variety of git commands available in sandbox mode. These include",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## Sharing is caring!","","Share trees with your friends via `export tree` and `import tree`","","Have a great lesson to share? Try building a level with `build level` or try out a friend's level with `import level`","","To see the full range of commands, try `show commands`. There are some gems like `undo` and `reset`","","For now let's get you started on the `levels`..."]}}],de_DE:[{type:"ModalAlert",options:{markdowns:["## Willkommen bei LearnGitBranching!","","Der Sinn dieser Anwendung ist, die umfangreichen und komplexen Zusammenhänge der Prozesse, die bei der Arbeit mit Git ablaufen, zu verdeutlichen. Ich hoffe du hast Spaß dabei und lernst vielleicht sogar etwas!","","# Demo!","","Falls du die Demonstration noch nicht gesehen hast, schau sie dir hier an:","","[http://pcottle.github.io/learnGitBranching/?demo](http://pcottle.github.io/learnGitBranching/?demo)","","Genervt von diesem Fenster? Häng `?NODEMO` an die URL um es los zu werden, so wie hier:","","[http://pcottle.github.io/learnGitBranching/?NODEMO](?NODEMO)"]}},{type:"ModalAlert",options:{markdowns:["## Git-Kommandos","","Dir steht eine große Zahl von Git-Befehlen im Sandkasten-Modus zur Verfügung. Unter anderem",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## Teilen macht Spaß!","","Teile diese Git-Bäume mit deinen Freunden mittels `export tree` und `import tree`.","","Hast du Wissenswertes zu Git zu vermitteln? Versuch einen Level mit `build level` zu bauen oder probier den Level eines Freundes mit `import level` aus.","","Um alle Kommandos zu sehen, gib `show commands` ein. Darunter gibt's kleine Schätze wie `undo` und `reset`.","","Für's Erste lass uns mit `levels` anfangen ..."]}}],ja:[{type:"ModalAlert",options:{markdowns:["## LearnGitBranchingへようこそ","","gitのパワフルなブランチ機能のコンセプトが ","学びやすくなるようにこのアプリケーションを作りました。 ","このアプリケーションを楽しんで使って頂いて、 ","何かを学習して頂けたなら嬉しいです。","","# とりあえず触ってみたい方へ：","","簡単なデモを用意してあるので、もしよければこちらもご覧ください：","","[http://remore.github.io/learnGitBranching-ja/?demo](http://remore.github.io/learnGitBranching-ja/?demo)","","このダイアログ自体を省略するには、以下のようにURLの末尾にクエリストリング`?NODEMO`を付加してアクセスしてください。","","[http://remore.github.io/learnGitBranching-ja/?NODEMO](http://remore.github.io/learnGitBranching-ja/?NODEMO)"]}},{type:"ModalAlert",options:{markdowns:["## ここで学べるGitのオペレーション","","ここでは、下記の種類のgitコマンドを学ぶことができます。",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## 学習した内容を共有できます","","画面左のコマンドプロンプトから`export tree`や`import tree`とタイプすることで、gitのツリー構造を友達に送ることができます","","何か教材になるようなケースはご存知ないでしょうか。`build level`で課題を作成したり、`import level`で他の人の課題に挑戦してみてください。","","それでは教材の選択画面に進んでみることにします。"]}}],zh_CN:[{type:"ModalAlert",options:{markdowns:["## 欢迎光临 LearnGitBranching!","","本应用旨在帮助初学者领会 git 分支背后的强大概念。","希望你能喜欢这个应用，并学到知识！","","# 演示!","","如果你还没看过演示，请到此查看：","","[http://pcottle.github.io/learnGitBranching/?demo](http://pcottle.github.io/learnGitBranching/?demo)","","厌烦这个对话框？ 在 URL 后头加上 `?NODEMO` 就看不到它了，也可以直接点下边这个链接：","","[http://pcottle.github.io/learnGitBranching/?NODEMO](http://pcottle.github.io/learnGitBranching/?NODEMO)"]}},{type:"ModalAlert",options:{markdowns:["## Git 命令","","在沙盒模式里，你有好多命令可用。 包括：",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## 分享即关怀","","使用 `export tree` 和 `import tree` 与朋友分享 Git 树","","有个好课程可以分享？试试用 `build level` 创建一个关卡，或者 `import level` 试试朋友的。","","言归正传，让我们先从 `levels` 开始……"]}}],ko:[{type:"ModalAlert",options:{markdowns:["## Git 브랜치 배우기를 시작합니다!","","이 애플리케이션은 git을 쓸 때 필요한 브랜치에 대한 개념을","탄탄히 잡게끔 도와드리기 위해 만들었습니다. 재밌게 사용해주시기를","바라며, 무언가를 배워가신다면 더 기쁘겠습니다!","","이 애플리케이션은 [Peter Cottle](https://github.io/pcottle)님의 [LearnGitBranching](http://pcottle.github.io/learnGitBranching/)를 번역한 것입니다.","아래 데모를 먼저 보셔도 좋습니다.","","<http://pcottle.github.io/learnGitBranching/?demo&locale=ko>"]}},{type:"ModalAlert",options:{markdowns:["## Git 명령어","","연습 모드에서 쓸 수 있는 다양한 git명령어는 다음과 같습니다",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## 공유해주세요!","","`export tree` 와 `import tree`로 여러분의 친구들에게 트리를 공유해주세요","","훌륭한 학습 자료가 있으신가요? `build level`로 레벨을 만들어 보시거나, 친구의 레벨을 `import level`로 가져와서 실험해보세요","","이제 레슨을 시작해봅시다..."]}}],fr_FR:[{type:"ModalAlert",options:{markdowns:["## Bienvenue sur LearnGitBranching!","","Cette application a été conçue pour aider les débutants à saisir ","les puissants concepts derrière les branches en travaillant ","avec git. Nous espérons que vous apprécierez cette application et ","que vous apprendrez peut-être quelque chose d'intéressant !","","# Démo !","","Si vous n'avez pas vu la démo, vous pouvez le faire là :","","[http://pcottle.github.io/learnGitBranching/?demo](http://pcottle.github.io/learnGitBranching/?demo)","","Agacé par ce dialogue ? Ajoutez `?NODEMO` à l'URL pour le supprimer, en lien ci-dessous pour votre commodité :","","[http://pcottle.github.io/learnGitBranching/?NODEMO](?NODEMO)"]}},{type:"ModalAlert",options:{markdowns:["## Commandes Git","","Il existe une large variété de commandes git disponibles dans le mode bac à sable. Sont inclues",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## Partager, c'est se soucier!","","Partagez des arbres avec vous amis via `export tree` et `import tree`","","Vous avez une grande leçon à partager ? Essayez de construire un niveau avec `build level` ou essayez le niveau d'un ami avec `import level`","","Pour voir la gamme complète des commandes, tapez `show commands`. Il y a quelques perles telles que `undo` et `reset`","","Mais tout de suite commencez sur les `levels`…"]}}]}},{}],17:[function(a,b,c){function d(a){return-1!==a.indexOf(":")&&2===a.split(":").length}var e=a("underscore"),f=a("../intl"),g=a("../util/errors"),h=(g.CommandProcessError,g.GitError),i=(g.Warning,g.CommandResult),j="o/",k=function(a){return a.replace(/&#x27;/g,"'").replace(/&#x2F;/g,"/")},l=function(a,b){a.resolveID(b)},m=function(a,b){return a.validateBranchName(b)},n=function(a,b){return a.refs[b]?b:m(a,b)},o=function(a,b){if(a.refs[b]&&a.HEAD.get("target")===a.refs[b])throw new h({msg:f.todo("cannot fetch to "+b+" when checked out on "+b)})},p=function(a,b){l(a,b);var c=a.refs[b];if(!c||"branch"!==c.get("type"))throw new h({msg:f.todo(b+" is not a branch")})},q=function(a,b){l(a,b);var c=a.refs[b];if("branch"!==c.get("type")||!c.getIsRemote())throw new h({msg:f.todo(b+" is not a remote branch")})},r=function(a){if(a.length&&"origin"!==a[0])throw new h({msg:f.todo(a[0]+" is not a remote in your repository! try adding origin that argument")})},s=function(a,b){if(b=k(b),!a.refs[b])throw new h({msg:f.todo(b+" is not a branch!")});var c=a.resolveID(b);if("branch"!==c.get("type"))throw new h({msg:f.todo(b+" is not a branch!")});var d=c.getRemoteTrackingBranchID();if(!d)throw new h({msg:f.todo(b+" is not a remote tracking branch! I dont know where to push")});return d},t={commit:{sc:/^(gc|git ci)($|\s)/,regex:/^git +commit($|\s)/,options:["--amend","-a","-am","-m"],execute:function(a,b){var c=b.getOptionsMap();if(b.acceptNoGeneralArgs(),c["-am"]&&(c["-a"]||c["-m"]))throw new h({msg:f.str("git-error-options")});var d=null,e=null;c["-a"]&&b.addWarning(f.str("git-warning-add")),c["-am"]&&(e=c["-am"],b.validateArgBounds(e,1,1,"-am"),d=e[0]),c["-m"]&&(e=c["-m"],b.validateArgBounds(e,1,1,"-m"),d=e[0]);var g=a.commit({isAmend:c["--amend"]});d&&(d=d.replace(/&quot;/g,'"').replace(/^"/g,"").replace(/"$/g,""),g.set("commitMessage",d));var i=a.animationFactory.playCommitBirthPromiseAnimation(g,a.gitVisuals);a.animationQueue.thenFinish(i)}},cherrypick:{displayName:"cherry-pick",regex:/^git +cherry-pick($|\s)/,execute:function(a,b){var c=(b.getOptionsMap(),b.getGeneralArgs());b.validateArgBounds(c,1,Number.MAX_VALUE);var d=a.getUpstreamSet("HEAD"),g=e.map(c,function(b){var c=a.getCommitFromRef(b);if(d[c.get("id")])throw new h({msg:f.str("git-error-already-exists",{commit:c.get("id")})});return c},this);a.setupCherrypickChain(g)}},pull:{regex:/^git +pull($|\s)/,options:["--rebase"],execute:function(a,b){if(!a.hasOrigin())throw new h({msg:f.str("git-error-origin-required")});var c=b.getOptionsMap(),e=b.getGeneralArgs();b.twoArgsForOrigin(e),r(e);var g,i,l=e[1];if(l&&d(l)){var m=l.split(":");g=m[0],i=n(a,k(m[1])),o(a,i)}else if(l)g=l,p(a.origin,g),i=a.origin.refs[g].getPrefixedID();else{if(a.getDetachedHead())throw new h({msg:f.todo("Git pull can not be executed in detached HEAD mode if no remote branch specified!")});var q=a.getOneBeforeCommit("HEAD"),t=q.get("id");s(a,t),i=q.getRemoteTrackingBranchID(),g=i.replace(j,"")}a.pull({source:g,destination:i,isRebase:c["--rebase"]})}},fakeTeamwork:{regex:/^git +fakeTeamwork($|\s)/,execute:function(a,b){var c=b.getGeneralArgs();if(!a.hasOrigin())throw new h({msg:f.str("git-error-origin-required")});b.validateArgBounds(c,0,2);var d=a.origin.refs[c[0]]?c[0]:"master",e=parseInt(c[0],10)||c[1]||1,g=a.origin.resolveID(d);if("branch"!==g.get("type"))throw new h({msg:f.str("git-error-options")});a.fakeTeamwork(e,d)}},clone:{regex:/^git +clone *?$/,execute:function(a,b){b.acceptNoGeneralArgs(),a.makeOrigin(a.printTree())}},remote:{regex:/^git +remote($|\s)/,options:["-v"],execute:function(a,b){if(b.acceptNoGeneralArgs(),!a.hasOrigin())throw new i({msg:""});a.printRemotes({verbose:!!b.getOptionsMap()["-v"]})}},fetch:{regex:/^git +fetch($|\s)/,execute:function(a,b){if(!a.hasOrigin())throw new h({msg:f.str("git-error-origin-required")});var c,e,g=b.getGeneralArgs();b.twoArgsForOrigin(g),r(g);var i=g[1];if(i&&d(i)){var j=i.split(":");c=j[0],e=n(a,k(j[1])),o(a,e)}else i&&(c=i,p(a.origin,c),e=a.origin.refs[c].getPrefixedID());c&&l(a.origin,c),a.fetch({source:c,destination:e})}},branch:{sc:/^(gb|git br)($|\s)/,regex:/^git +branch($|\s)/,options:["-d","-D","-f","-a","-r","-u","--contains"],execute:function(a,b){var c=b.getOptionsMap(),d=b.getGeneralArgs(),f=null;if(c["-d"]||c["-D"]){var g=c["-d"]||c["-D"];return g=g.concat(d),b.validateArgBounds(g,1,Number.MAX_VALUE,"-d"),e.each(g,function(b){a.validateAndDeleteBranch(b)}),void 0}if(c["-u"]){f=c["-u"].concat(d),b.validateArgBounds(f,1,2,"-u");var h=k(f[0]),i=f[1]||a.getOneBeforeCommit("HEAD").get("id");return q(a,h),p(a,i),a.setLocalToTrackRemote(a.refs[i],a.refs[h]),void 0}if(c["--contains"])return f=c["--contains"],b.validateArgBounds(f,1,1,"--contains"),a.printBranchesWithout(f[0]),void 0;if(c["-f"])return f=c["-f"].concat(d),b.twoArgsImpliedHead(f,"-f"),a.forceBranch(f[0],f[1]),void 0;if(0===d.length){var j;return j=c["-a"]?a.getBranches():c["-r"]?a.getRemoteBranches():a.getLocalBranches(),a.printBranches(j),void 0}b.twoArgsImpliedHead(d),a.branch(d[0],d[1])}},add:{dontCountForGolf:!0,sc:/^ga($|\s)/,regex:/^git +add($|\s)/,execute:function(){throw new i({msg:f.str("git-error-staging")})}},reset:{regex:/^git +reset($|\s)/,options:["--hard","--soft"],execute:function(a,b){var c=b.getOptionsMap(),d=b.getGeneralArgs();if(c["--soft"])throw new h({msg:f.str("git-error-staging")});if(c["--hard"]&&(b.addWarning(f.str("git-warning-hard")),d=d.concat(c["--hard"])),b.validateArgBounds(d,1,1),a.getDetachedHead())throw new h({msg:f.str("git-error-reset-detached")});a.reset(d[0])}},revert:{regex:/^git +revert($|\s)/,execute:function(a,b){var c=b.getGeneralArgs();b.validateArgBounds(c,1,Number.MAX_VALUE),a.revert(c)}},merge:{regex:/^git +merge($|\s)/,options:["--no-ff"],execute:function(a,b){var c=b.getOptionsMap(),d=b.getGeneralArgs();b.validateArgBounds(d,1,1);var e=a.merge(d[0],{noFF:!!c["--no-ff"]});return void 0===e?(a.animationFactory.refreshTree(a.animationQueue,a.gitVisuals),void 0):(a.animationFactory.genCommitBirthAnimation(a.animationQueue,e,a.gitVisuals),void 0)}},log:{dontCountForGolf:!0,regex:/^git +log($|\s)/,execute:function(a,b){var c=b.getGeneralArgs();if(2==c.length){if("^"!=c[1][0])throw new h({msg:f.str("git-error-options")});a.logWithout(c[0],c[1])}b.oneArgImpliedHead(c),a.log(c[0])}},show:{dontCountForGolf:!0,regex:/^git +show($|\s)/,execute:function(a,b){var c=b.getGeneralArgs();b.oneArgImpliedHead(c),a.show(c[0])}},rebase:{sc:/^gr($|\s)/,options:["-i","--aboveAll","-p","--preserve-merges"],regex:/^git +rebase($|\s)/,execute:function(a,b){var c=b.getOptionsMap(),d=b.getGeneralArgs();if(c["-i"]){var e=c["-i"];return b.twoArgsImpliedHead(e," -i"),a.rebaseInteractive(e[0],e[1],{aboveAll:!!c["--aboveAll"]}),void 0}b.twoArgsImpliedHead(d),a.rebase(d[0],d[1],{preserveMerges:c["-p"]||c["--preserve-merges"]})}},status:{dontCountForGolf:!0,sc:/^(gst|gs|git st)($|\s)/,regex:/^git +status($|\s)/,execute:function(a){a.status()}},checkout:{sc:/^(go|git co)($|\s)/,regex:/^git +checkout($|\s)/,options:["-b","-B","-"],execute:function(a,b){var c=b.getOptionsMap(),d=b.getGeneralArgs(),e=null;if(c["-b"]){e=c["-b"].concat(d),b.twoArgsImpliedHead(e,"-b");var g=a.validateBranchName(e[0]);return a.branch(g,e[1]),a.checkout(g),void 0}if(c["-"]){var i=a.HEAD.get("lastLastTarget");if(!i)throw new h({msg:f.str("git-result-nothing")});return a.HEAD.set("target",i),void 0}return c["-B"]?(e=c["-B"],b.twoArgsImpliedHead(e,"-B"),a.forceBranch(e[0],e[1]),a.checkout(e[0]),void 0):(b.validateArgBounds(d,1,1),a.checkout(a.crappyUnescape(d[0])),void 0)}},push:{regex:/^git +push($|\s)/,execute:function(a,b){if(!a.hasOrigin())throw new h({msg:f.str("git-error-origin-required")});var c,e,g,i={},j=b.getGeneralArgs();b.twoArgsForOrigin(j),r(j);var k=j[1];if(k&&d(k)){var n=k.split(":");if(e=n[0],c=m(a,n[1]),""===e&&!a.origin.refs[c])throw new h({msg:f.todo("cannot delete branch "+i.destination+" which doesnt exist")})}else if(k?(l(a,k),g=a.refs[k]):g=a.getOneBeforeCommit("HEAD"),e=g.get("id"),g.getRemoteTrackingBranchID&&g.getRemoteTrackingBranchID()){s(a,e);var o=g.getRemoteTrackingBranchID();c=a.refs[o].getBaseID()}else c=m(a,e);e&&l(a,e),a.push({destination:c,source:e})}},describe:{regex:/^git +describe($|\s)/,execute:function(a,b){if(0===a.tagCollection.toArray().length)throw new h({msg:f.todo("fatal: No tags found, cannot describe anything.")});var c=b.getGeneralArgs();b.oneArgImpliedHead(c),l(a,c[0]),a.describe(c[0])}},tag:{regex:/^git +tag($|\s)/,execute:function(a,b){var c=b.getGeneralArgs();if(0===c.length){var d=a.getTags();return a.printTags(d),void 0}b.twoArgsImpliedHead(c),a.tag(c[0],c[1])}}},u=[[/^(git help($|\s)|git$)/,function(){var b=[f.str("git-version"),"<br/>",f.str("git-usage"),e.escape(f.str("git-usage-command")),"<br/>",f.str("git-supported-commands"),"<br/>"],c=a("../commands").commands.getOptionMap().git;e.each(c,function(a,c){b.push("git "+c),e.each(a,function(a,c){b.push("	 "+c)},this)},this);var d=b.join("\n");throw d=d.replace(/\t/g,"&nbsp;&nbsp;&nbsp;"),new i({msg:d})}]];c.commandConfig=t,c.instantCommands=u},{"../commands":12,"../intl":24,"../util/errors":39,underscore:10}],18:[function(a,b,c){function d(a){a=a||{},this.beforeCB=a.beforeCB||function(){},this.afterCB=a.afterCB||function(){};var b=function(a){a.resolve()};this.beforeDeferHandler=a.beforeDeferHandler||b,this.afterDeferHandler=a.afterDeferHandler||b,this.eventBaton=a.eventBaton||g.getEventBaton()}{var e=a("underscore"),f=a("q"),g=a("../app");a("../views/multiView").MultiView}d.prototype.insertShim=function(){this.eventBaton.stealBaton("processGitCommand",this.processGitCommand,this)},d.prototype.removeShim=function(){this.eventBaton.releaseBaton("processGitCommand",this.processGitCommand,this)},d.prototype.processGitCommand=function(a,b){this.beforeCB(a);var c=f.defer();c.promise.then(e.bind(function(){this.afterGitCommandProcessed(a,b)},this)).done();var d=e.bind(function(){this.eventBaton.passBatonBack("processGitCommand",this.processGitCommand,this,[a,c])},this),g=f.defer();g.promise.then(d).done(),this.beforeDeferHandler(g,a)},d.prototype.afterGitCommandProcessed=function(a,b){this.afterCB(a);var c=f.defer();c.promise.then(function(){b.resolve()}).done(),this.afterDeferHandler(c,a)},c.GitShim=d},{"../app":11,"../views/multiView":50,q:9,underscore:10}],19:[function(a,b,c){function d(){var a={},b=function(){var a=g.defer();return a.resolve(),a.promise};for(var c in i)a[c]=b;return a.playRefreshAnimationAndFinish=function(a,b){b.finish()},a.refreshTree=function(a){a.finish()},a.highlightEachWithPromise=function(a){return a},a}function e(){return{makeOrigin:function(a){var b=(a.localRepo,a.treeString),c=new s;return c.gitEngine.loadTreeFromString(b),{customEvents:{on:function(a,b,c){b.apply(c,[])}},gitEngine:c.gitEngine}}}}var f=a("underscore"),g=(a("backbone"),a("q")),h=a("../git").GitEngine,i=a("../visuals/animation/animationFactory").AnimationFactory,j=a("../visuals").GitVisuals,k=(a("../graph/treeCompare"),a("../util/eventBaton").EventBaton),l=a("../models/collections"),m=l.CommitCollection,n=l.BranchCollection,o=l.TagCollection,p=a("../models/commandModel").Command,q=a("../util/mock").mock,r=a("../util"),s=function(){this.init()};s.prototype.init=function(){this.commitCollection=new m,this.branchCollection=new n,this.tagCollection=new o;var a=d(),b=q(j),c=e();b.getVisualization=function(){return c},this.gitEngine=new h({collection:this.commitCollection,branches:this.branchCollection,tags:this.tagCollection,gitVisuals:b,animationFactory:a,eventBaton:new k}),this.gitEngine.init()};var t=function(a,b){var c=g.defer(),d=new s;d.sendCommand(a,c),c.promise.then(function(){b.resolve(d.gitEngine.exportTree())})};s.prototype.sendCommand=function(a,b){{var c=g.defer(),d=c.promise;(new Date).getTime()}r.splitTextCommand(a,function(a){d=d.then(f.bind(function(){var b=new p({rawStr:a}),c=g.defer();return this.gitEngine.dispatch(b,c),c.promise},this))},this),d.then(function(){(new Date).getTime();b&&b.resolve()}),d.fail(function(a){console.log("!!!!!!!! error !!!!!!!"),console.log(a),console.log(a.stack),console.log("!!!!!!!!!!!!!!!!!!!!!!")}),c.resolve()},c.HeadlessGit=s,c.getTreeQuick=t},{"../git":20,"../graph/treeCompare":22,"../models/collections":33,"../models/commandModel":34,"../util":41,"../util/eventBaton":40,"../util/mock":43,"../visuals":54,"../visuals/animation/animationFactory":52,backbone:1,q:9,underscore:10}],20:[function(a,b,c){function d(a){if(a!==u)throw a
}function e(a){this.rootCommit=null,this.refs={},this.HEAD=null,this.origin=null,this.mode="git",this.localRepo=null,this.branchCollection=a.branches,this.tagCollection=a.tags,this.commitCollection=a.collection,this.gitVisuals=a.gitVisuals,this.eventBaton=a.eventBaton,this.eventBaton.stealBaton("processGitCommand",this.dispatch,this),this.animationFactory=a.animationFactory?a.animationFactory:j,this.initUniqueID()}var f=a("underscore"),g=g=a("../util").isBrowser()?window.Backbone:a("backbone"),h=a("q"),i=a("../intl"),j=a("../visuals/animation/animationFactory").AnimationFactory,k=a("../visuals/animation").AnimationQueue,l=a("../graph/treeCompare"),m=a("../graph"),n=a("../util/errors"),o=a("../app"),p=a("../commands"),q=n.GitError,r=n.CommandResult,s=(a("../util/eventBaton").EventBaton,"o/"),t="&nbsp;&nbsp;&nbsp;",u="STAPH";e.prototype.initUniqueID=function(){this.uniqueId=function(){var a=0;return function(b){return b?b+a++:a++}}()},e.prototype.handleModeChange=function(a,b){if(this.mode===a)return b(),void 0;o.getEvents().trigger("vcsModeChange",{mode:a});var c=this.setMode(a);return this.origin&&this.origin.setMode(a,function(){}),c?(c.then(b),void 0):(b(),void 0)},e.prototype.getIsHg=function(){return"hg"===this.mode},e.prototype.setMode=function(a){var b="git"===this.mode&&"hg"===a;if(this.mode=a,b){var c=h.defer();c.resolve();var d=c.promise,e=this.updateAllBranchesForHg();if(e)return d=d.then(f.bind(function(){return this.animationFactory.playRefreshAnimationSlow(this.gitVisuals)},this)),d=d.then(f.bind(function(){var a=this.pruneTree();if(a)return this.animationFactory.playRefreshAnimation(this.gitVisuals)},this));var g=this.pruneTree();if(g)return this.animationFactory.playRefreshAnimation(this.gitVisuals)}},e.prototype.assignLocalRepo=function(a){this.localRepo=a},e.prototype.defaultInit=function(){var a=m.getDefaultTree();this.loadTree(a)},e.prototype.init=function(){this.rootCommit=this.makeCommit(null,null,{rootCommit:!0}),this.commitCollection.add(this.rootCommit);var a=this.makeBranch("master",this.rootCommit);this.HEAD=new v({id:"HEAD",target:a}),this.refs[this.HEAD.get("id")]=this.HEAD,this.commit()},e.prototype.hasOrigin=function(){return!!this.origin},e.prototype.isOrigin=function(){return!!this.localRepo},e.prototype.exportTreeForBranch=function(a){var b=this.exportTree(),c=this.getUpstreamSet(a),d=b.commits;b.commits={},f.each(d,function(a,d){c[d]&&(b.commits[d]=a)});var e=b.branches;return b.branches={},f.each(e,function(c,d){d===a&&(b.branches[d]=c)}),b.HEAD.target=a,b},e.prototype.exportTree=function(){var a={branches:{},commits:{},tags:{},HEAD:null};f.each(this.branchCollection.toJSON(),function(b){b.target=b.target.get("id"),delete b.visBranch,a.branches[b.id]=b}),f.each(this.commitCollection.toJSON(),function(b){f.each(x.prototype.constants.circularFields,function(a){delete b[a]},this);var c=[];f.each(b.parents,function(a){c.push(a.get("id"))}),b.parents=c,a.commits[b.id]=b},this),f.each(this.tagCollection.toJSON(),function(b){delete b.visTag,b.target=b.target.get("id"),a.tags[b.id]=b},this);var b=this.HEAD.toJSON();return b.lastTarget=b.lastLastTarget=b.visBranch=b.visTag=void 0,b.target=b.target.get("id"),a.HEAD=b,this.hasOrigin()&&(a.originTree=this.origin.exportTree()),a},e.prototype.printTree=function(a){a=a||this.exportTree(),l.reduceTreeFields([a]);var b=JSON.stringify(a);return/'/.test(b)&&(b=escape(b)),b},e.prototype.printAndCopyTree=function(){window.prompt(i.str("Copy the tree string below"),this.printTree())},e.prototype.loadTree=function(a){a=JSON.parse(JSON.stringify(a)),this.removeAll(),this.instantiateFromTree(a),this.reloadGraphics(),this.initUniqueID()},e.prototype.loadTreeFromString=function(a){this.loadTree(JSON.parse(unescape(this.crappyUnescape(a))))},e.prototype.instantiateFromTree=function(a){var b={};f.each(a.commits,function(c){var d=this.getOrMakeRecursive(a,b,c.id,this.gitVisuals);this.commitCollection.add(d)},this),f.each(a.branches,function(c){var d=this.getOrMakeRecursive(a,b,c.id,this.gitVisuals);this.branchCollection.add(d,{silent:!0})},this),f.each(a.tags,function(c){var d=this.getOrMakeRecursive(a,b,c.id,this.gitVisuals);this.tagCollection.add(d,{silent:!0})},this);var c=this.getOrMakeRecursive(a,b,a.HEAD.id,this.gitVisuals);if(this.HEAD=c,this.rootCommit=b.C0,!this.rootCommit)throw new Error("Need root commit of C0 for calculations");if(this.refs=b,this.gitVisuals.gitReady=!1,this.branchCollection.each(function(a){this.gitVisuals.addBranch(a)},this),this.tagCollection.each(function(a){this.gitVisuals.addTag(a)},this),a.originTree){var d=JSON.stringify(a.originTree);this.animationQueue=this.animationQueue||new k({callback:function(){}}),this.makeOrigin(d)}},e.prototype.makeOrigin=function(a){if(this.hasOrigin())throw new q({msg:i.str("git-error-origin-exists")});a=a||this.printTree(this.exportTreeForBranch("master"));var b=this.gitVisuals.getVisualization(),c=b.makeOrigin({localRepo:this,treeString:a});this.animationQueue.set("promiseBased",!0),c.customEvents.on("gitEngineReady",function(){this.origin=c.gitEngine,c.gitEngine.assignLocalRepo(this),this.syncRemoteBranchFills(),this.origin.externalRefresh(),this.animationFactory.playRefreshAnimationAndFinish(this.gitVisuals,this.animationQueue)},this);var d=JSON.parse(unescape(a));f.each(d.branches,function(a,b){if(!this.refs[s+b]){var c=this.findCommonAncestorWithRemote(a.target),d=this.makeBranch(s+b,this.getCommitFromRef(c));this.setLocalToTrackRemote(this.refs[a.id],d)}},this)},e.prototype.makeRemoteBranchIfNeeded=function(a){if(!this.refs[s+a]){var b=this.origin.resolveID(a);if("branch"===b.get("type"))return this.makeRemoteBranchForRemote(a)}},e.prototype.makeBranchIfNeeded=function(a){if(!this.refs[a]){var b=this.findCommonAncestorForRemote(this.getCommitFromRef("HEAD").get("id"));return this.validateAndMakeBranch(a,this.getCommitFromRef(b))}},e.prototype.makeRemoteBranchForRemote=function(a){var b=this.origin.refs[a].get("target"),c=this.findCommonAncestorWithRemote(b.get("id"));return this.makeBranch(s+a,this.getCommitFromRef(c))},e.prototype.findCommonAncestorForRemote=function(a){for(;!this.origin.refs[a];){var b=this.refs[a].get("parents");a=b[0].get("id")}return a},e.prototype.findCommonAncestorWithRemote=function(a){for(;!this.refs[a];){var b=this.origin.refs[a].get("parents");a=b[0].get("id")}return a},e.prototype.makeBranchOnOriginAndTrack=function(a,b){var c=this.makeBranch(s+a,this.getCommitFromRef(b));this.refs[a]&&this.setLocalToTrackRemote(this.refs[a],c);var d=this.findCommonAncestorForRemote(this.getCommitFromRef(b).get("id"));this.origin.makeBranch(a,this.origin.getCommitFromRef(d))},e.prototype.setLocalToTrackRemote=function(a,b){if(a.setRemoteTrackingBranchID(b.get("id")),this.command){var c='local branch "'+a.get("id")+'" set to track remote branch "'+b.get("id")+'"';this.command.addWarning(i.todo(c))}},e.prototype.getOrMakeRecursive=function(a,b,c){if(b[c])return b[c];var d=function(a,b){if(a.commits[b])return"commit";if(a.branches[b])return"branch";if("HEAD"==b)return"HEAD";if(a.tags[b])return"tag";throw new Error("bad type for "+b)},e=d(a,c);if("HEAD"==e){var g=a.HEAD,h=new v(f.extend(a.HEAD,{target:this.getOrMakeRecursive(a,b,g.target)}));return b[c]=h,h}if("branch"==e){var i=a.branches[c],j=new w(f.extend(a.branches[c],{target:this.getOrMakeRecursive(a,b,i.target)}));return b[c]=j,j}if("tag"==e){var k=a.tags[c],l=new y(f.extend(a.tags[c],{target:this.getOrMakeRecursive(a,b,k.target)}));return b[c]=l,l}if("commit"==e){var m=a.commits[c],n=[];f.each(m.parents,function(c){n.push(this.getOrMakeRecursive(a,b,c))},this);var o=new x(f.extend(m,{parents:n,gitVisuals:this.gitVisuals}));return b[c]=o,o}throw new Error("ruh rho!! unsupported type for "+c)},e.prototype.tearDown=function(){this.tornDown||(this.eventBaton.releaseBaton("processGitCommand",this.dispatch,this),this.removeAll(),this.tornDown=!0)},e.prototype.reloadGraphics=function(){this.gitVisuals.rootCommit=this.refs.C0,this.gitVisuals.initHeadBranch(),this.gitVisuals.drawTreeFromReload(),this.gitVisuals.refreshTreeHarsh()},e.prototype.removeAll=function(){this.branchCollection.reset(),this.tagCollection.reset(),this.commitCollection.reset(),this.refs={},this.HEAD=null,this.rootCommit=null,this.origin&&(this.origin.gitVisuals.getVisualization().tearDown(),delete this.origin,this.gitVisuals.getVisualization().clearOrigin()),this.gitVisuals.resetAll()},e.prototype.getDetachedHead=function(){var a=this.HEAD.get("target"),b=a.get("type");return"branch"!==b},e.prototype.validateBranchName=function(a){if(a=a.replace(/\s/g,""),!/^[a-zA-Z0-9]+$/.test(a))throw new q({msg:i.str("bad-branch-name",{branch:a})});if(/[hH][eE][aA][dD]/.test(a))throw new q({msg:i.str("bad-branch-name",{branch:a})});return a.length>9&&(a=a.slice(0,9),this.command.addWarning(i.str("branch-name-short",{branch:a}))),a},e.prototype.validateAndMakeBranch=function(a,b){if(a=this.validateBranchName(a),this.refs[a])throw new q({msg:i.str("bad-branch-name",{branch:name})});return this.makeBranch(a,b)},e.prototype.validateAndMakeTag=function(a,b){if(a=this.validateBranchName(a),this.refs[a])throw new q({msg:i.str("bad-tag-name",{tag:name})});this.makeTag(a,b)},e.prototype.makeBranch=function(a,b){if(this.refs[a])throw new Error("woah already have that");var c=new w({target:b,id:a});return this.branchCollection.add(c),this.refs[c.get("id")]=c,c},e.prototype.makeTag=function(a,b){if(this.refs[a])throw new Error("woah already have that");var c=new y({target:b,id:a});return this.tagCollection.add(c),this.refs[c.get("id")]=c,c},e.prototype.getHead=function(){return f.clone(this.HEAD)},e.prototype.getTags=function(){var a=[];return this.tagCollection.each(function(b){a.push({id:b.get("id"),target:b.get("target"),remote:b.getIsRemote(),obj:b})},this),a},e.prototype.getBranches=function(){var a=[];return this.branchCollection.each(function(b){a.push({id:b.get("id"),selected:this.HEAD.get("target")===b,target:b.get("target"),remote:b.getIsRemote(),obj:b})},this),a},e.prototype.getRemoteBranches=function(){var a=this.getBranches();return f.filter(a,function(a){return a.remote===!0})},e.prototype.getLocalBranches=function(){var a=this.getBranches();return f.filter(a,function(a){return a.remote===!1})},e.prototype.printBranchesWithout=function(a){var b=this.getUpstreamBranchSet(),c=this.getCommitFromRef(a).get("id"),d=[];f.each(b[c],function(a){a.selected=this.HEAD.get("target").get("id")==a.id,d.push(a)},this),this.printBranches(d)},e.prototype.printBranches=function(a){var b="";throw f.each(a,function(a){b+=(a.selected?"* ":"")+a.id+"\n"}),new r({msg:b})},e.prototype.printTags=function(a){var b="";throw f.each(a,function(a){console.log(a),b+=a.id+"\n"}),new r({msg:b})},e.prototype.printRemotes=function(a){var b="";throw a.verbose?(b+="origin (fetch)\n",b+=t+"git@github.com:pcottle/foo.git\n\n",b+="origin (push)\n",b+=t+"git@github.com:pcottle/foo.git"):b+="origin",new r({msg:b})},e.prototype.getUniqueID=function(){for(var a=this.uniqueId("C"),b=f.bind(function(a){return this.refs[a]?!0:this.origin&&this.origin.refs[a]?!0:!1},this);b(a);)a=this.uniqueId("C");return a},e.prototype.makeCommit=function(a,b,c){b||(b=this.getUniqueID());var d=new x(f.extend({parents:a,id:b,gitVisuals:this.gitVisuals},c||{}));return this.refs[d.get("id")]=d,this.commitCollection.add(d),d},e.prototype.revert=function(a){var b=f.map(a,function(a){return this.getCommitFromRef(a)},this),c=h.defer(),d=c.promise,e=this.resolveID("HEAD");d=this.animationFactory.highlightEachWithPromise(d,b,e);var g=this.getCommitFromRef("HEAD"),j=f.bind(function(a){var b=this.rebaseAltID(a.get("id")),c=i.str("git-revert-msg",{oldCommit:this.resolveName(a),oldMsg:a.get("commitMessage")}),d=this.makeCommit([g],b,{commitMessage:c});return g=d,this.animationFactory.playCommitBirthPromiseAnimation(d,this.gitVisuals)},this);f.each(b,function(a){d=d.then(function(){return j(a)})},this),d=d.then(f.bind(function(){return this.setTargetLocation("HEAD",g),this.animationFactory.playRefreshAnimation(this.gitVisuals)},this)),this.animationQueue.thenFinish(d,c)},e.prototype.reset=function(a){this.setTargetLocation("HEAD",this.getCommitFromRef(a))},e.prototype.setupCherrypickChain=function(a){var b=h.defer(),c=b.promise,d=this.resolveID("HEAD");c=this.animationFactory.highlightEachWithPromise(c,a,d);var e=f.bind(function(a){var b=this.cherrypick(a);return this.animationFactory.playCommitBirthPromiseAnimation(b,this.gitVisuals)},this);f.each(a,function(a){c=c.then(function(){return e(a)})},this),this.animationQueue.thenFinish(c,b)},e.prototype.checkUpstreamOfSource=function(a,b,c,d,e){var f=b.getUpstreamSet(d),g=a.getCommitFromRef(c).get("id");if(!f[g])throw new q({msg:e||i.str("git-error-origin-fetch-no-ff")})},e.prototype.getTargetGraphDifference=function(a,b,c,d,e){e=e||{},d=b.resolveID(d);var g=a.getUpstreamSet(c),h=b.getCommitFromRef(d),j=b.exportTree(),k=j.commits[h.get("id")];if(g[k.id]){if(e.dontThrowOnNoFetch)return[];throw new q({msg:i.str("git-error-origin-fetch-uptodate")})}k.depth=0;for(var l=[],n=[k],o=function(a){if(!g[a]){var b=j.commits[a];b.depth=p.depth+1,n.push(b)}};n.length;){var p=n.pop();l.push(p),f.each(p.parents,o)}var r=m.getUniqueObjects(l);return m.descendSortDepth(r)},e.prototype.push=function(a){if(a=a||{},""===a.source)return this.pushDeleteRemoteBranch(this.refs[s+a.destination],this.origin.refs[a.destination]),void 0;var b=this.refs[a.source];this.origin.refs[a.destination]||(this.makeBranchOnOriginAndTrack(a.destination,this.getCommitFromRef(b)),this.animationFactory.playRefreshAnimation(this.origin.gitVisuals),this.animationFactory.playRefreshAnimation(this.gitVisuals));var c=this.origin.refs[a.destination],d=this.resolveID(a.source||"HEAD");this.checkUpstreamOfSource(this,this.origin,c,d,i.str("git-error-origin-push-no-ff"));var e=this.getTargetGraphDifference(this.origin,this,c,d);e=f.filter(e,function(a){return!this.origin.refs[a.id]},this);var g=f.bind(function(a,b){var c=f.map(b,function(a){return this.origin.refs[a]},this);return this.origin.makeCommit(c,a)},this),j=f.bind(function(a,b){var c=g(a,b);return this.animationFactory.playCommitBirthPromiseAnimation(c,this.origin.gitVisuals)},this),k=h.defer(),l=k.promise;f.each(e,function(a){l=l.then(f.bind(function(){return this.animationFactory.playHighlightPromiseAnimation(this.refs[a.id],c)},this)),l=l.then(function(){return j(a.id,a.parents)})},this),l=l.then(f.bind(function(){var a=this.getCommitFromRef(d).get("id"),b=this.origin.refs[a];return this.origin.setTargetLocation(c,b),this.animationFactory.playRefreshAnimation(this.gitVisuals),this.animationFactory.playRefreshAnimation(this.origin.gitVisuals)},this)),l=l.then(f.bind(function(){var b=this.getCommitFromRef(d);return this.setTargetLocation(this.refs[s+a.destination],b),this.animationFactory.playRefreshAnimation(this.gitVisuals)},this)),a.dontResolvePromise||this.animationQueue.thenFinish(l,k)},e.prototype.pushDeleteRemoteBranch=function(a,b){if("master"===b.get("id"))throw new q({msg:i.todo("You cannot delete master branch on remote!")});var c=a.get("id");this.origin.deleteBranch(b),this.deleteBranch(a),this.branchCollection.each(function(a){a.getRemoteTrackingBranchID()===c&&a.setRemoteTrackingBranchID(null)},this),this.origin.pruneTree(),this.origin.externalRefresh()},e.prototype.fetch=function(a){a=a||{};var b;if(a.destination&&""===a.source)return this.validateAndMakeBranch(a.destination,this.getCommitFromRef("HEAD")),void 0;if(a.destination&&a.source)return b=b||this.makeRemoteBranchIfNeeded(a.source),b=b||this.makeBranchIfNeeded(a.destination),a.didMakeBranch=b,this.fetchCore([{destination:a.destination,source:a.source}],a);var c=this.origin.branchCollection.toArray(),d=f.map(c,function(a){var c=a.get("id");return b=b||this.makeRemoteBranchIfNeeded(c),{destination:a.getPrefixedID(),source:c}},this);return a.didMakeBranch=b,this.fetchCore(d,a)},e.prototype.fetchCore=function(a,b){f.each(a,function(a){this.checkUpstreamOfSource(this,this.origin,a.destination,a.source)},this);var c=[];if(f.each(a,function(a){c=c.concat(this.getTargetGraphDifference(this,this.origin,a.destination,a.source,f.extend({},b,{dontThrowOnNoFetch:!0})))},this),!c.length&&!b.dontThrowOnNoFetch)throw new q({msg:i.str("git-error-origin-fetch-uptodate")});c=m.getUniqueObjects(c),c=m.descendSortDepth(c),c=f.filter(c,function(a){return!this.refs[a.id]},this);var d=f.bind(function(a,b){var c=f.map(b,function(a){return this.refs[a]},this);return this.makeCommit(c,a)},this),e=f.bind(function(a,b){var c=d(a,b);return this.animationFactory.playCommitBirthPromiseAnimation(c,this.gitVisuals)},this),g=h.defer(),j=g.promise;b.didMakeBranch&&(j=j.then(f.bind(function(){return this.animationFactory.playRefreshAnimation(this.origin.gitVisuals),this.animationFactory.playRefreshAnimation(this.gitVisuals)},this)));var k=this.origin.getUpstreamBranchSet();return f.each(c,function(a){var b=k[a.id][0].obj,c=this.refs[b.getPrefixedID()];j=j.then(f.bind(function(){return this.animationFactory.playHighlightPromiseAnimation(this.origin.refs[a.id],c)},this)),j=j.then(function(){return e(a.id,a.parents)})},this),j=j.then(f.bind(function(){return f.each(a,function(a){var b=this.refs[a.destination],c=this.origin.getCommitFromRef(a.source).get("id"),d=this.refs[c];this.setTargetLocation(b,d)},this),this.animationFactory.playRefreshAnimation(this.origin.gitVisuals),this.animationFactory.playRefreshAnimation(this.gitVisuals)},this)),b.dontResolvePromise||this.animationQueue.thenFinish(j,g),{chain:j,deferred:g}},e.prototype.pull=function(a){a=a||{};var b=this.getOneBeforeCommit("HEAD"),c=this.fetch({dontResolvePromise:!0,dontThrowOnNoFetch:!0,source:a.source,destination:a.destination});if(c){var d=this.refs[a.destination];a.isRebase?this.pullFinishWithRebase(c,b,d):this.pullFinishWithMerge(c,b,d)}},e.prototype.pullFinishWithRebase=function(a,b,c){var e=a.chain,g=a.deferred;e=e.then(f.bind(function(){if(this.isUpstreamOf(c,b))throw this.command.set("error",new r({msg:i.str("git-result-uptodate")})),u},this)),e=e.then(f.bind(function(){return this.animationFactory.getDelayedPromise(300)},this)),e=e.then(f.bind(function(){return this.animationFactory.playHighlightPromiseAnimation(this.getCommitFromRef(c),b)},this)),e=e.then(f.bind(function(){return a.dontResolvePromise=!0,this.rebase(c,b,a)},this)),e=e.fail(d),this.animationQueue.thenFinish(e,g)},e.prototype.pullFinishWithMerge=function(a,b,c){var e=a.chain,g=a.deferred;e=e.then(f.bind(function(){if(this.mergeCheck(c,b))throw this.command.set("error",new r({msg:i.str("git-result-uptodate")})),u},this)),e=e.then(f.bind(function(){return this.animationFactory.getDelayedPromise(300)},this)),e=e.then(f.bind(function(){return this.animationFactory.playHighlightPromiseAnimation(this.getCommitFromRef(c),b)},this)),e=e.then(f.bind(function(){return this.animationFactory.playHighlightPromiseAnimation(this.getCommitFromRef(b),c)},this)),e=e.then(f.bind(function(){return this.animationFactory.getDelayedPromise(700)},this)),e=e.then(f.bind(function(){var a=this.merge(c);return a?this.animationFactory.playCommitBirthPromiseAnimation(a,this.gitVisuals):this.animationFactory.playRefreshAnimation(this.gitVisuals)},this)),e=e.fail(d),this.animationQueue.thenFinish(e,g)},e.prototype.fakeTeamwork=function(a,b){var c=f.bind(function(){var a=this.getUniqueID();return this.origin.receiveTeamwork(a,b,this.animationQueue)},this),d=f.bind(function(){var a=c();return this.animationFactory.playCommitBirthPromiseAnimation(a,this.origin.gitVisuals)},this),e=h.defer(),g=e.promise;f.each(f.range(a),function(){g=g.then(function(){return d()})}),this.animationQueue.thenFinish(g,e)},e.prototype.receiveTeamwork=function(a,b){this.checkout(this.resolveID(b));var c=this.makeCommit([this.getCommitFromRef("HEAD")],a);return this.setTargetLocation(this.HEAD,c),c},e.prototype.cherrypick=function(a){var b=this.rebaseAltID(a.get("id")),c=this.makeCommit([this.getCommitFromRef("HEAD")],b);return this.setTargetLocation(this.HEAD,c),c},e.prototype.commit=function(a){a=a||{};var b=this.getCommitFromRef(this.HEAD),c=null;a.isAmend&&(b=this.resolveID("HEAD~1"),c=this.rebaseAltID(this.getCommitFromRef("HEAD").get("id")));var d=this.makeCommit([b],c);return this.getDetachedHead()&&"git"===this.mode&&this.command.addWarning(i.str("git-warning-detached")),this.setTargetLocation(this.HEAD,d),d},e.prototype.resolveName=function(a){var b=this.resolveID(a);return"commit"==b.get("type")?"commit "+b.get("id"):"branch"==b.get("type")?'branch "'+b.get("id")+'"':this.resolveName(b.get("target"))},e.prototype.resolveID=function(a){if(null===a||void 0===a)throw new Error("Dont call this with null / undefined");return"string"!=typeof a?a:this.resolveStringRef(a)},e.prototype.resolveRelativeRef=function(a,b){for(var c,d=/([~\^])(\d*)/g;c=d.exec(b);){var e=a,f=c[2]?parseInt(c[2],10):1;if("^"==c[1])e=a.getParent(f-1);else for(;e&&f--;)e=e.getParent(0);if(!e){var g=i.str("git-error-relative-ref",{commit:a.id,match:c[0]});throw new q({msg:g})}a=e}return a},e.prototype.resolveStringRef=function(a){if(a=this.crappyUnescape(a),this.refs[a])return this.refs[a];var b=null,c=null,d=/^([a-zA-Z0-9]+)(([~\^]\d*)*)/,e=d.exec(a);if(!e)throw new q({msg:i.str("git-error-exist",{ref:a})});if(b=e[1],c=e[2],!this.refs[b])throw new q({msg:i.str("git-error-exist",{ref:a})});var f=this.getCommitFromRef(b);return c&&(f=this.resolveRelativeRef(f,c)),f},e.prototype.getCommitFromRef=function(a){for(var b=this.resolveID(a);"commit"!==b.get("type");)b=b.get("target");return b},e.prototype.getType=function(a){return this.resolveID(a).get("type")},e.prototype.setTargetLocation=function(a,b){"commit"!=this.getType(a)&&(a=this.getOneBeforeCommit(a),a.set("target",b))},e.prototype.updateBranchesFromSet=function(a){if(!a)throw new Error("need commit set here");var b=this.getUpstreamBranchSet(),c={};f.each(a,function(a,d){f.each(b[d],function(a){c[a.id]=!0})},this);var d=f.map(c,function(a,b){return b});return this.updateBranchesForHg(d)},e.prototype.updateAllBranchesForHgAndPlay=function(a){return this.updateBranchesForHg(a)&&this.animationFactory.playRefreshAnimationSlow(this.gitVisuals)},e.prototype.updateAllBranchesForHg=function(){var a=this.branchCollection.map(function(a){return a.get("id")});return this.updateBranchesForHg(a)},e.prototype.syncRemoteBranchFills=function(){this.branchCollection.each(function(a){if(a.getIsRemote()){var b=this.origin.refs[a.getBaseID()];if(b.get("visBranch")){var c=b.get("visBranch").get("fill");a.get("visBranch").set("fill",c)}}},this)},e.prototype.updateBranchesForHg=function(a){var b=!1;return f.each(a,function(a){var c=this.getCommitFromRef(a).get("id"),d=this.getBumpedID(c);if(this.refs[d]){b=!0;for(var e;this.refs[d];)e=d,d=this.rebaseAltID(d);this.setTargetLocation(this.refs[a],this.refs[e])}},this),b?!0:!1},e.prototype.updateCommitParentsForHgRebase=function(a){var b=!1;return f.each(a,function(a,c){var d=this.refs[c],e=d.checkForUpdatedParent(this);b=b||e},this),b},e.prototype.pruneTreeAndPlay=function(){return this.pruneTree()&&this.animationFactory.playRefreshAnimationSlow(this.gitVisuals)},e.prototype.pruneTree=function(){var a=this.getUpstreamBranchSet(),b=this.getUpstreamSet("HEAD");f.each(b,function(b,c){a[c]=!0});var c=[];return this.commitCollection.each(function(b){a[b.get("id")]||c.push(b)},this),c.length?(this.command&&this.command.addWarning(i.str("hg-prune-tree")),f.each(c,function(a){a.removeFromParents(),this.commitCollection.remove(a);var b=a.get("id");this.refs[b]=void 0,delete this.refs[b];var c=a.get("visNode");c&&c.removeAll()},this),!0):void 0},e.prototype.getUpstreamBranchSet=function(){return this.getUpstreamCollectionSet(this.branchCollection)},e.prototype.getUpstreamTagSet=function(){return this.getUpstreamCollectionSet(this.tagCollection)},e.prototype.getUpstreamCollectionSet=function(a){var b={},c=function(a,b){var c=!1;return f.each(a,function(a){a.id==b&&(c=!0)}),c},d=function(a){for(var b=[],c=[a];c.length;){var d=c.pop();b.push(d.get("id")),d.get("parents")&&d.get("parents").length&&(c=c.concat(d.get("parents")))}return b};return a.each(function(a){var e=d(a.get("target"));f.each(e,function(d){b[d]=b[d]||[],c(b[d],a.get("id"))||b[d].push({obj:a,id:a.get("id")})})}),b},e.prototype.getUpstreamHeadSet=function(){var a=this.getUpstreamSet("HEAD"),b=this.getCommitFromRef("HEAD").get("id");return a[b]=!0,a},e.prototype.getOneBeforeCommit=function(a){var b=this.resolveID(a);return b!==this.HEAD||this.getDetachedHead()||(b=b.get("target")),b},e.prototype.scrapeBaseID=function(a){var b=/^C(\d+)/.exec(a);if(!b)throw new Error("regex failed on "+a);return"C"+b[1]},e.prototype.rebaseAltID=function(a){for(var b=this.getBumpedID(a);this.refs[b];)b=this.getBumpedID(b);return b},e.prototype.getMostRecentBumpedID=function(a){for(var b,c=a;this.refs[c];)b=c,c=this.getBumpedID(c);return b},e.prototype.getBumpedID=function(a){for(var b=[[/^C(\d+)[']{0,2}$/,function(a){return a[0]+"'"}],[/^C(\d+)[']{3}$/,function(a){return a[0].slice(0,-3)+"'^4"}],[/^C(\d+)['][\^](\d+)$/,function(a){return"C"+String(a[1])+"'^"+String(Number(a[2])+1)}]],c=0;c<b.length;c++){var d=b[c][0],e=b[c][1],f=d.exec(a);if(f)return e(f)}throw new Error("could not modify the id "+a)},e.prototype.idSortFunc=function(a,b){var c=1e3,d=[[/^C(\d+)$/,function(a){return c*a[1]}],[/^C(\d+)([']+)$/,function(a){return c*a[1]+a[2].length}],[/^C(\d+)['][\^](\d+)$/,function(a){return c*a[1]+Number(a[2])}]],e=function(a){for(var b=0;b<d.length;b++){var c=d[b][0],e=d[b][1],f=c.exec(a);if(f)return e(f)}throw new Error("Could not parse commit ID "+a)};return e(a.get("id"))-e(b.get("id"))},e.prototype.dateSortFunc=function(a,b){var c=new Date(a.get("createTime")),d=new Date(b.get("createTime"));return c-d===0?e.prototype.idSortFunc(a,b):c-d},e.prototype.hgRebase=function(a,b){var c=h.defer(),d=this.rebase(a,b,{dontResolvePromise:!0,deferred:c});if(d){var e=(this.getCommonAncestor(a,b),this.getCommitFromRef(b)),g=this.getDownstreamSet(b),i=this.getUpstreamSet(a),j=this.getUpstreamDiffSetFromSet(i,b),k=[];f.each(j,function(a,b){k.push(this.getDownstreamSet(b))},this);var l={};l[e.get("id")]=!0,f.each([j,g].concat(k),function(a){f.each(a,function(a,b){l[b]=!0})});var m={},n=this.getUpstreamBranchSet();f.each(l,function(a,b){f.each(n[b],function(a){m[a.id]=!0})});var o=f.map(m,function(a,b){return b});d=d.then(f.bind(function(){var a=this.updateCommitParentsForHgRebase(l);if(a)return this.animationFactory.playRefreshAnimationSlow(this.gitVisuals)},this)),d=d.then(f.bind(function(){return this.updateAllBranchesForHgAndPlay(o)},this)),d=d.then(f.bind(function(){return this.pruneTreeAndPlay()},this)),this.animationQueue.thenFinish(d,c)}},e.prototype.rebase=function(a,b,c){if(this.isUpstreamOf(a,b))return this.command.setResult(i.str("git-result-uptodate")),this.checkout(b),void 0;if(this.isUpstreamOf(b,a))return this.setTargetLocation(b,this.getCommitFromRef(a)),this.command.setResult(i.str("git-result-fastforward")),this.checkout(b),void 0;var d=this.getUpstreamSet(a),e=this.getUpstreamDiffFromSet(d,b);return this.rebaseFinish(e,d,a,b,c)},e.prototype.getUpstreamDiffSetFromSet=function(a,b){var c={};return f.each(this.getUpstreamDiffFromSet(a,b),function(a){c[a.get("id")]=!0}),c},e.prototype.getUpstreamDiffFromSet=function(a,b){var c=m.bfsFromLocationWithSet(this,b,a);return c.sort(this.dateSortFunc),c},e.prototype.rebaseInteractive=function(b,c,d){if(d=d||{},this.isUpstreamOf(c,b))throw new q({msg:i.str("git-result-nothing")});for(var e=this.getUpstreamSet(b),g=[],j=[this.getCommitFromRef(c)];j.length;){var k=j.pop();e[k.get("id")]||(g.push(k),j=j.concat(k.get("parents")),j.sort(this.dateSortFunc))}var l=[];if(f.each(g,function(a){1==a.get("parents").length&&l.push(a)}),!l.length)throw new q({msg:i.str("git-error-rebase-none")});this.animationQueue.set("defer",!0);var m=h.defer();m.promise.then(f.bind(function(a){if(!a.length)throw new r({msg:i.str("git-result-nothing")});this.rebaseFinish(a,{},b,c)},this)).fail(f.bind(function(a){this.filterError(a),this.command.set("error",a),this.animationQueue.start()},this)).done();var n=a("../views/rebaseView").InteractiveRebaseView;new n({deferred:m,toRebase:l,aboveAll:d.aboveAll})},e.prototype.filterRebaseCommits=function(a,b,c){var d={};f.each(b,function(a,b){d[this.scrapeBaseID(b)]=!0},this);var e={};return f.filter(a,function(a){if(1!==a.get("parents").length&&!c.preserveMerges)return!1;var b=this.scrapeBaseID(a.get("id"));return d[b]?!1:e[a.get("id")]?!1:(e[a.get("id")]=!0,!0)},this)},e.prototype.getRebasePreserveMergesParents=function(a){var b=a.get("parents");return f.map(b,function(a){var b=a.get("id"),c=this.getMostRecentBumpedID(b);return this.refs[c]},this)},e.prototype.rebaseFinish=function(a,b,c,d,e){e=e||{};var g=this.resolveID(c),j=e.deferred||h.defer(),k=e.chain||j.promise,l=this.filterRebaseCommits(a,b,e);if(!l.length)throw new q({msg:i.str("git-error-rebase-none")});k=this.animationFactory.highlightEachWithPromise(k,l,g);var m=this.getCommitFromRef(c),n=!1,o=f.bind(function(a){var b,c=this.rebaseAltID(a.get("id"));b=e.preserveMerges&&n?n?this.getRebasePreserveMergesParents(a):[m]:[m];var d=this.makeCommit(b,c);return m=d,n=!0,this.animationFactory.playCommitBirthPromiseAnimation(d,this.gitVisuals)},this);return f.each(l,function(a){k=k.then(function(){return o(a)})},this),k=k.then(f.bind(function(){return"commit"==this.resolveID(d).get("type")?this.checkout(m):(this.setTargetLocation(d,m),this.checkout(d)),this.animationFactory.playRefreshAnimation(this.gitVisuals)},this)),e.dontResolvePromise||this.animationQueue.thenFinish(k,j),k},e.prototype.mergeCheck=function(a,b){var c=this.getCommitFromRef(a)===this.getCommitFromRef(b);return this.isUpstreamOf(a,b)||c},e.prototype.merge=function(a,b){b=b||{};var c="HEAD";if(this.mergeCheck(a,c))throw new r({msg:i.str("git-result-uptodate")});if(this.isUpstreamOf(c,a)&&!b.noFF)return this.setTargetLocation(c,this.getCommitFromRef(a)),this.command.setResult(i.str("git-result-fastforward")),void 0;var d=this.getCommitFromRef(c),e=this.getCommitFromRef(a),f=i.str("git-merge-msg",{target:this.resolveName(a),current:this.resolveName(c)}),g=this.makeCommit([d,e],null,{commitMessage:f});return this.setTargetLocation(c,g),g},e.prototype.checkout=function(a){var b=this.resolveID(a);if("HEAD"!==b.get("id")){var c=b.get("type");if("branch"===c&&b.getIsRemote()&&(b=this.getCommitFromRef(b.get("id"))),"branch"!==c&&"tag"!==c&&"commit"!==c)throw new q({msg:i.str("git-error-options")});"tag"===c&&(b=b.get("target")),this.HEAD.set("target",b)}},e.prototype.forceBranch=function(a,b){a=this.crappyUnescape(a),this.refs[a]||this.branch(a,b);var c=this.resolveID(a);if("branch"!==c.get("type"))throw new q({msg:i.str("git-error-options")});if(c.getIsRemote())throw new q({msg:i.str("git-error-remote-branch")});var d=this.getCommitFromRef(b);this.setTargetLocation(c,d)},e.prototype.branch=function(a,b){var c=this.getCommitFromRef(b),d=this.validateAndMakeBranch(a,c);b=this.resolveID(b),this.isRemoteBranchRef(b)&&this.setLocalToTrackRemote(d,b)},e.prototype.isRemoteBranchRef=function(a){var b=this.resolveID(a);return"branch"!==b.get("type")?!1:b.getIsRemote()},e.prototype.tag=function(a,b){var c=this.getCommitFromRef(b);this.validateAndMakeTag(a,c)},e.prototype.describe=function(a){var b=this.getCommitFromRef(a),c={};f.each(this.tagCollection.toJSON(),function(a){c[a.target.get("id")]=a.id});for(var d,e=[b],g=[];e.length;){var h=e.pop(),j=h.get("id");if(c[j]){d=c[j];break}g.push(h.get("id"));var k=h.get("parents");k&&k.length&&(e=e.concat(k),e.sort(this.dateSortFunc))}if(!d)throw new q({msg:i.todo("Fatal: no tags found upstream")});if(0===g.length)throw new r({msg:d});throw new r({msg:d+"_"+g.length+"_g"+b.get("id")})},e.prototype.validateAndDeleteBranch=function(a){var b=this.resolveID(a);if("branch"!==b.get("type")||"master"==b.get("id")||this.HEAD.get("target")===b)throw new q({msg:i.str("git-error-branch")});var c=b;if(b.getIsRemote())throw new q({msg:i.str("git-error-remote-branch")});this.deleteBranch(c)
},e.prototype.deleteBranch=function(a){this.branchCollection.remove(a),this.refs[a.get("id")]=void 0,delete this.refs[a.get("id")],this.HEAD.get("target")===a&&this.HEAD.set("target",this.refs.master),a.get("visBranch")&&a.get("visBranch").remove()},e.prototype.crappyUnescape=function(a){return a.replace(/&#x27;/g,"'").replace(/&#x2F;/g,"/")},e.prototype.filterError=function(a){if(!(a instanceof q||a instanceof r))throw a},e.prototype.externalRefresh=function(){this.animationQueue=new k({callback:function(){}}),this.animationFactory.refreshTree(this.animationQueue,this.gitVisuals),this.animationQueue.start()},e.prototype.dispatch=function(a,b){this.command=a;var c=a.get("vcs"),d=f.bind(function(){this.dispatchProcess(a,b)},this);this.handleModeChange(c,d)},e.prototype.dispatchProcess=function(a,b){var c=f.bind(function(){a.finishWith(b)},this);this.animationQueue=new k({callback:c});var d=a.get("vcs"),e=a.get("method").replace(/-/g,"");try{p.commands.execute(d,e,this,this.command)}catch(g){return this.filterError(g),a.set("error",g),b.resolve(),void 0}var h=this.animationQueue.get("defer")||this.animationQueue.get("promiseBased");this.animationQueue.get("animations").length||h||this.animationFactory.refreshTree(this.animationQueue,this.gitVisuals),h||this.animationQueue.start()},e.prototype.show=function(a){var b=this.getCommitFromRef(a);throw new r({msg:b.getShowEntry()})},e.prototype.status=function(){var a=[];if(this.getDetachedHead())a.push(i.str("git-status-detached"));else{var b=this.HEAD.get("target").get("id");a.push(i.str("git-status-onbranch",{branch:b}))}a.push("Changes to be committed:"),a.push(""),a.push(t+"modified: cal/OskiCostume.stl"),a.push(""),a.push(i.str("git-status-readytocommit"));var c="";throw f.each(a,function(a){c+="# "+a+"\n"}),new r({msg:c})},e.prototype.logWithout=function(a,b){b=b.slice(1),this.log(a,this.getUpstreamSet(b))},e.prototype.log=function(a,b){b=b||{};for(var c=this.getCommitFromRef(a),d=[],e=[c],g={};e.length;){var h=e.shift(0);g[h.get("id")]||b[h.get("id")]||(g[h.get("id")]=!0,d.push(h),h.get("parents")&&h.get("parents").length&&(e=e.concat(h.get("parents"))))}var i="";throw f.each(d,function(a){i+=a.getLogEntry()},this),new r({msg:i})},e.prototype.getCommonAncestor=function(a,b){if(this.isUpstreamOf(b,a))throw new Error("Dont use common ancestor if we are upstream!");for(var c=this.getUpstreamSet(a),d=[this.getCommitFromRef(b)];d.length;){var e=d.pop();if(c[e.get("id")])return e;d=d.concat(e.get("parents"))}throw new Error("something has gone very wrong... two nodes arent connected!")},e.prototype.isUpstreamOf=function(a,b){a=this.getCommitFromRef(a);var c=this.getUpstreamSet(b);return void 0!==c[a.get("id")]},e.prototype.getDownstreamSet=function(a){var b=this.getCommitFromRef(a),c=b.get("id"),d=[b],e={};e[c]=!0;for(var g=function(a){e[a.get("id")]=!0,d.push(a)};d.length;){var h=d.pop(),i=h.get("children");f.each(i,g)}return e},e.prototype.getUpstreamSet=function(a){var b=this.getCommitFromRef(a),c=b.get("id"),d=[b],e={};e[c]=!0;for(var g=function(a){e[a.get("id")]=!0,d.push(a)};d.length;){var h=d.pop(),i=h.get("parents");f.each(i,g)}return e};var v=g.Model.extend({initialize:function(){if(!this.get("target"))throw new Error("must be initialized with target");if(!this.get("id"))throw new Error("must be given an id");this.set("type","general ref"),"HEAD"==this.get("id")&&(this.set("lastLastTarget",null),this.set("lastTarget",this.get("target")),this.on("change:target",this.targetChanged,this))},getIsRemote:function(){return!1},getName:function(){return this.get("id")},targetChanged:function(a,b){this.set("lastLastTarget",this.get("lastTarget")),this.set("lastTarget",b)},toString:function(){return"a "+this.get("type")+"pointing to "+String(this.get("target"))}}),w=v.extend({defaults:{visBranch:null,remoteTrackingBranchID:null,remote:!1},initialize:function(){v.prototype.initialize.call(this),this.set("type","branch")},setRemoteTrackingBranchID:function(a){this.set("remoteTrackingBranchID",a)},getRemoteTrackingBranchID:function(){return this.get("remoteTrackingBranchID")},getPrefixedID:function(){if(this.getIsRemote())throw new Error("im already remote");return s+this.get("id")},getBaseID:function(){if(!this.getIsRemote())throw new Error("im not remote so cant get base");return this.get("id").replace(s,"")},getIsRemote:function(){return"string"!=typeof this.get("id"),this.get("id").slice(0,2)===s}}),x=g.Model.extend({defaults:{type:"commit",children:null,parents:null,author:"Peter Cottle",createTime:null,commitMessage:null,visNode:null,gitVisuals:null},constants:{circularFields:["gitVisuals","visNode","children"]},getLogEntry:function(){return["Author: "+this.get("author"),"Date: "+this.get("createTime"),"<br/>",this.get("commitMessage"),"<br/>","Commit: "+this.get("id")].join("\n")+"\n"},getShowEntry:function(){return[this.getLogEntry(),"diff --git a/bigGameResults.html b/bigGameResults.html","--- bigGameResults.html","+++ bigGameResults.html","@@ 13,27 @@ Winner, Score","- Stanfurd, 14-7","+ Cal, 21-14"].join("\n")+"\n"},validateAtInit:function(){if(!this.get("id"))throw new Error("Need ID!!");if(this.get("createTime")||this.set("createTime",(new Date).toString()),this.get("commitMessage")||this.set("commitMessage",i.str("git-dummy-msg")),this.set("children",[]),!(this.get("rootCommit")||this.get("parents")&&this.get("parents").length))throw new Error("needs parents")},addNodeToVisuals:function(){var a=this.get("gitVisuals").addNode(this.get("id"),this);this.set("visNode",a)},addEdgeToVisuals:function(a){this.get("gitVisuals").addEdge(this.get("id"),a.get("id"))},getParent:function(a){return this&&this.attributes&&this.attributes.parents?this.attributes.parents[a]:null},removeFromParents:function(){f.each(this.get("parents"),function(a){a.removeChild(this)},this)},checkForUpdatedParent:function(a){var b=this.get("parents");if(!(b.length>1)){var c=b[0],d=c.get("id"),e=a.getMostRecentBumpedID(d);if(d!==e){var f=a.refs[e];this.removeFromParents(),this.set("parents",[f]),f.get("children").push(this);var g=this.get("visNode");g&&g.removeAllEdges();var h=this.get("gitVisuals");return h&&h.addEdge(this.get("id"),e),!0}}},removeChild:function(a){var b=[];f.each(this.get("children"),function(c){c!==a&&b.push(c)},this),this.set("children",b)},isMainParent:function(a){var b=this.get("parents").indexOf(a);return 0===b},initialize:function(){this.validateAtInit(),this.addNodeToVisuals(),f.each(this.get("parents"),function(a){a.get("children").push(this),this.addEdgeToVisuals(a)},this)}}),y=v.extend({defaults:{visTag:null},initialize:function(){v.prototype.initialize.call(this),this.set("type","tag")}});c.GitEngine=e,c.Commit=x,c.Branch=w,c.Tag=y,c.Ref=v},{"../app":11,"../commands":12,"../graph":21,"../graph/treeCompare":22,"../intl":24,"../util":41,"../util/errors":39,"../util/eventBaton":40,"../views/rebaseView":51,"../visuals/animation":53,"../visuals/animation/animationFactory":52,backbone:1,q:9,underscore:10}],21:[function(a,b){var c=a("underscore"),d=a("../git"),e=d.Commit,f=d.Branch,g=d.Tag,h=d.Ref,i={getOrMakeRecursive:function(a,b,d){if(b[d])return b[d];var i=function(a,b){if(a.commits[b])return"commit";if(a.branches[b])return"branch";if("HEAD"==b)return"HEAD";if(a.tags[b])return"tag";throw new Error("bad type for "+b)},j=i(a,d);if("HEAD"==j){var k=a.HEAD,l=new h(c.extend(a.HEAD,{target:this.getOrMakeRecursive(a,b,k.target)}));return b[d]=l,l}if("branch"==j){var m=a.branches[d],n=new f(c.extend(a.branches[d],{target:this.getOrMakeRecursive(a,b,m.target)}));return b[d]=n,n}if("tag"==j){var o=a.tags[d],p=new g(c.extend(a.tags[d],{target:this.getOrMakeRecursive(a,b,o.target)}));return b[d]=p,p}if("commit"==j){var q=a.commits[d],r=[];c.each(q.parents,function(c){r.push(this.getOrMakeRecursive(a,b,c))},this);var s=new e(c.extend(q,{parents:r,gitVisuals:this.gitVisuals}));return b[d]=s,s}throw new Error("ruh rho!! unsupported type for "+d)},descendSortDepth:function(a){return a.sort(function(a,b){return b.depth-a.depth})},bfsFromLocationWithSet:function(a,b,c){for(var d=[],e=[a.getCommitFromRef(b)];e.length;){var f=e.pop();c[f.get("id")]||(d.push(f),e=e.concat(f.get("parents")))}return d},getUniqueObjects:function(a){var b={},d=[];return c.forEach(a,function(a){b[a.id]||(b[a.id]=!0,d.push(a))}),d},getDefaultTree:function(){return JSON.parse(unescape("%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C1%22%2C%22id%22%3A%22master%22%2C%22type%22%3A%22branch%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22type%22%3A%22commit%22%2C%22parents%22%3A%5B%5D%2C%22author%22%3A%22Peter%20Cottle%22%2C%22createTime%22%3A%22Mon%20Nov%2005%202012%2000%3A56%3A47%20GMT-0800%20%28PST%29%22%2C%22commitMessage%22%3A%22Quick%20Commit.%20Go%20Bears%21%22%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22type%22%3A%22commit%22%2C%22parents%22%3A%5B%22C0%22%5D%2C%22author%22%3A%22Peter%20Cottle%22%2C%22createTime%22%3A%22Mon%20Nov%2005%202012%2000%3A56%3A47%20GMT-0800%20%28PST%29%22%2C%22commitMessage%22%3A%22Quick%20Commit.%20Go%20Bears%21%22%2C%22id%22%3A%22C1%22%7D%7D%2C%22HEAD%22%3A%7B%22id%22%3A%22HEAD%22%2C%22target%22%3A%22master%22%2C%22type%22%3A%22general%20ref%22%7D%7D"))}};b.exports=i},{"../git":20,underscore:10}],22:[function(a,b){var c=a("underscore"),d={};d.dispatchFromLevel=function(a,b){var c=a.goalTreeString;return d.dispatch(a,c,b)},d.onlyMasterCompared=function(a){var b=!0;switch(b){case!!a.compareOnlyMaster:case!!a.compareOnlyMasterHashAgnostic:case!!a.compareOnlyMasterHashAgnosticWithAsserts:return!0;default:return!1}},d.dispatch=function(a,b,c){var d=this.convertTreeSafe(b);if(c=this.convertTreeSafe(c),typeof d.originTree!=typeof c.originTree)return!1;var e=this.dispatchShallow(a,d,c);if(!e||!d.originTree)return e;var f=a.originCompare?a.originCompare:a;return e&&this.dispatchShallow(f,d.originTree,c.originTree)},d.dispatchShallow=function(a,b,c){var e=!0;switch(e){case!!a.compareOnlyMaster:return d.compareBranchWithinTrees(c,b,"master");case!!a.compareOnlyBranches:return d.compareAllBranchesWithinTrees(c,b);case!!a.compareAllBranchesHashAgnostic:return d.compareAllBranchesWithinTreesHashAgnostic(c,b);case!!a.compareOnlyMasterHashAgnostic:return d.compareBranchesWithinTreesHashAgnostic(c,b,["master"]);case!!a.compareOnlyMasterHashAgnosticWithAsserts:return d.compareBranchesWithinTreesHashAgnostic(c,b,["master"])&&d.evalAsserts(c,a.goalAsserts);default:return d.compareAllBranchesWithinTreesAndHEAD(c,b)}},d.compareAllBranchesWithinTreesAndHEAD=function(a,b){return a=this.convertTreeSafe(a),b=this.convertTreeSafe(b),a.HEAD.target==b.HEAD.target&&this.compareAllBranchesWithinTrees(a,b)&&this.compareAllTagsWithinTrees(a,b)},d.compareAllBranchesWithinTrees=function(a,b){a=this.convertTreeSafe(a),b=this.convertTreeSafe(b);var d=c.extend({},a.branches,b.branches),e=!0;return c.uniq(d,function(c,d){e=e&&this.compareBranchWithinTrees(a,b,d)},this),e},d.compareAllTagsWithinTrees=function(a,b){return a=this.convertTreeSafe(a),b=this.convertTreeSafe(b),this.reduceTreeFields([a,b]),c.isEqual(a.tags,b.tags)},d.compareBranchesWithinTrees=function(a,b,d){var e=!0;return c.each(d,function(c){e=e&&this.compareBranchWithinTrees(a,b,c)},this),e},d.compareBranchWithinTrees=function(a,b,d){a=this.convertTreeSafe(a),b=this.convertTreeSafe(b),this.reduceTreeFields([a,b]);var e=this.getRecurseCompare(a,b),f=a.branches[d],g=b.branches[d];return c.isEqual(f,g)&&e(a.commits[f.target],b.commits[g.target])},d.compareAllBranchesWithinTreesHashAgnostic=function(a,b){a=this.convertTreeSafe(a),b=this.convertTreeSafe(b),this.reduceTreeFields([a,b]);var d=c.extend({},a.branches,b.branches),e=[];return c.each(d,function(a,b){e.push(b)}),this.compareBranchesWithinTreesHashAgnostic(a,b,e)},d.compareBranchesWithinTreesHashAgnostic=function(a,b,d){a=this.convertTreeSafe(a),b=this.convertTreeSafe(b),this.reduceTreeFields([a,b]);var e=c.bind(function(a,b){return a&&b?(a=c.clone(a),b=c.clone(b),a.target=this.getBaseRef(a.target),b.target=this.getBaseRef(b.target),c.isEqual(a,b)):!1},this),f=this.getRecurseCompareHashAgnostic(a,b),g=!0;return c.each(d,function(c){var d=a.branches[c],h=b.branches[c];g=g&&e(d,h)&&f(a.commits[d.target],b.commits[h.target])},this),g},d.evalAsserts=function(a,b){var d=!0;return c.each(b,function(b,c){d=d&&this.evalAssertsOnBranch(a,c,b)},this),d},d.evalAssertsOnBranch=function(a,b,d){if(a=this.convertTreeSafe(a),!a.branches[b])return!1;for(var e=a.branches[b],f=[e.target],g={};f.length;){var h=f.pop();g[this.getBaseRef(h)]=this.getNumHashes(h),f=f.concat(a.commits[h].parents)}var i=!0;return c.each(d,function(a){try{i=i&&a(g)}catch(b){console.warn("error during assert",b),console.log(b),i=!1}}),i},d.getNumHashes=function(a){for(var b=[[/^C(\d+)([']{0,3})$/,function(a){return a[2]?a[2].length:0}],[/^C(\d+)['][\^](\d+)$/,function(a){return Number(a[2])}]],c=0;c<b.length;c++){var d=b[c][0],e=b[c][1],f=d.exec(a);if(f)return e(f)}throw new Error("coudlnt parse ref "+a)},d.getBaseRef=function(a){var b=/^C(\d+)/,c=b.exec(a);if(!c)throw new Error("no regex matchy for "+a);return"C"+c[1]},d.getRecurseCompareHashAgnostic=function(a,b){var d=c.bind(function(a){return a?c.extend({},a,{id:this.getBaseRef(a.id),parents:null}):{}},this),e=function(a,b){return c.isEqual(d(a),d(b))};return this.getRecurseCompare(a,b,{isEqual:e})},d.getRecurseCompare=function(a,b,d){d=d||{};var e=function(f,g){var h=d.isEqual?d.isEqual(f,g):c.isEqual(f,g);if(!h)return!1;var i=Math.max(f.parents.length,g.parents.length);return c.each(c.range(i),function(c){var d=f.parents[c],i=g.parents[c],j=a.commits[d],k=b.commits[i];h=h&&e(j,k)},this),h};return e},d.convertTreeSafe=function(a){return"string"==typeof a?JSON.parse(unescape(a)):a},d.reduceTreeFields=function(a){var b=["parents","id","rootCommit"],d=["target","id","remoteTrackingBranchID"],e=["target","id"],f=["children","parents"],g={remoteTrackingBranchID:null},h={tags:{}};c.each(a,function(a){c.each(h,function(b,c){void 0===a[c]&&(a[c]=b)})});var i=function(a,b,d,e){var f=a[b];c.each(f,function(f,h){var i={};c.each(d,function(a){void 0!==f[a]?i[a]=f[a]:void 0!==g[a]&&(i[a]=g[a])}),c.each(e,function(a){f[a]&&(f[a].sort(),i[a]=f[a])}),a[b][h]=i})};c.each(a,function(a){i(a,"commits",b,f),i(a,"branches",d),i(a,"tags",e),a.HEAD={target:a.HEAD.target,id:a.HEAD.id},a.originTree&&this.reduceTreeFields([a.originTree])},this)},d.compareTrees=function(a,b){return a=this.convertTreeSafe(a),b=this.convertTreeSafe(b),this.reduceTreeFields([a,b]),c.isEqual(a,b)},b.exports=d},{underscore:10}],23:[function(a){var b=(a("sys"),a("underscore")),c=a("child_process"),d=a("../intl/strings").strings,e='grep -C 2 -r "intl.str(" ../../',f=function(a){return'grep -r "'+a+'" ../../'},g=/intl.str\('([a-zA-Z\-]+)'/g,h=/\s+'([a-z\-]+)',/g,i=function(a){c.exec(f(a),function(a,b){console.log(b)})},j=function(a){d[a]||(console.log('NO KEY for: "',a,'"'),i(a))},k=function(a){b.each(a,function(a){var b=g.exec(a);return b&&b[1]?(j(b[1]),void 0):(b=h.exec(a),b&&b[1]&&j(b[1]),void 0)})};c.exec(e,function(a,b){k(b.split("\n"))})},{"../intl/strings":25,child_process:2,sys:6,underscore:10}],24:[function(a,b,c){var d=a("underscore"),e=a("../util/constants"),f=(a("../util"),a("../intl/strings").strings),g=c.getDefaultLocale=function(){return"en_US"},h=c.getLocale=function(){return e.GLOBAL.locale?e.GLOBAL.locale:g()},i=d.clone(d.templateSettings);i.interpolate=/\{(.+?)\}/g;var j=c.template=function(a,b){return d.template(a,b,i)},k=c.str=function(a,b){b=b||{};var c=h();return f[a]?f[a][c]?j(f[a][c],b):"error-untranslated"!==a?k("error-untranslated"):'No translation for the key "'+a+'"':(console.warn("NO INTL support for key "+a),"NO INTL support for key "+a)},l=c.getIntlKey=function(a,b){if(!a||!a[b])throw new Error("that key "+b+"doesnt exist in this blob"+a);return a[b][g()]||console.warn("WARNING!! This blob does not have intl support:",a,"for this key",b),a[b][h()]};c.todo=function(a){return a};c.getDialog=function(a){var b=g();return l(a,"dialog")||a.dialog[b]},c.getHint=function(a){return l(a,"hint")||k("error-untranslated")},c.getName=function(a){return l(a,"name")||k("error-untranslated")},c.getStartDialog=function(a){var b=l(a,"startDialog");if(b)return b;var c={type:"ModalAlert",options:{markdown:k("error-untranslated")}},e=d.clone(a.startDialog[g()]||a.startDialog);return e.childViews.unshift(c),e}},{"../intl/strings":25,"../util":41,"../util/constants":37,underscore:10}],25:[function(a,b,c){c.strings={"finish-dialog-finished":{__desc__:"One of the lines in the next level dialog",ja:"最後のレベルをクリアしました！すごい！！",en_US:"Wow! You finished the last level, great!",de_DE:"Wow! Du hast den letzten Level gelöst, super!",zh_CN:"我的个天！你完成了最后一关，碉堡了！",fr_FR:"Félicitations, vous avez réussi le dernier niveau !"},"finish-dialog-next":{__desc__:"One of the lines in the next level dialog",en_US:'Would you like to move on to *"{nextLevel}"*, the next level?',de_DE:'Möchtest du mit *"{nextLevel}"* weitermachen, dem nächsten Level?',ja:'次の章 *"{nextLevel}"* へ進みますか？',zh_CN:"要不前进到下一关 *“{nextLevel}”*？",fr_FR:'Voulez-vous passer à *"{nextLevel}"*, le prochain niveau ?'},"finish-dialog-win":{__desc__:"One of the lines in the next level dialog",en_US:"Awesome! You matched or exceeded our solution.",de_DE:"Wahnsinn! Du warst so gut wie unsere Lösung, oder sogar besser.",ja:"素晴らしい！このレベルをクリアしましたね。",zh_CN:"牛鼻啊！你达到或者完爆了我们的答案。",fr_FR:"Fabuleux ! Votre solution a égalé ou surpassé notre solution."},"finish-dialog-lose":{__desc__:"When the user entered more commands than our best, encourage them to do better",en_US:"See if you can whittle it down to {best} :D",de_DE:"Schau mal ob du es in {best} Schritten hinbekommst :D",ja:"模範解答の回数={best}回でクリアする方法も考えてみましょう :D",zh_CN:"试试看你能否在 {best} 之内搞定 :D",fr_FR:"Voyons si vous pouvez descendre à {best} :D"},"hg-prune-tree":{__desc__:"warning when pruning tree",en_US:"Warning! Mercurial does aggressive garbage collection and thus needs to prune your tree",de_DE:"Achtung! Mercurial macht aggressive Garbage Collection und muss daher deinen Baum reduzieren"},"hg-a-option":{__desc__:"warning for when using -A option",en_US:"The -A option is not needed for this app, just commit away!",de_DE:"Die Option -A wird in dieser Anwendung nicht benötigt, committe einfach!"},"hg-error-no-status":{__desc__:"One of the errors for hg",en_US:"There is no status command for this app, since there is no staging of files. Try hg summary instead",de_DE:"Es gibt keinen Befehl status in dieser Anwendung, da es kein Staging von Dateien gibt. Probier stattdessen hg summary"},"hg-error-need-option":{__desc__:"One of the errors for hg",en_US:"I need the option {option} for that command!",de_DE:"Ich benötige die Option {option} für diesen Befehl!"},"hg-error-log-no-follow":{__desc__:"hg log without -f (--follow)",en_US:"hg log without -f is currently not supported, use -f",de_DE:"hg log ohne -f wird aktuell nicht unterstützt, benutze bitte -f"},"git-status-detached":{__desc__:"One of the lines for git status output",en_US:"Detached head!",de_DE:"Detached head!",zh_CN:"脑袋搬家（Detached head）了！",fr_FR:"head détaché !"},"git-status-onbranch":{__desc__:"One of the lines for git status output",en_US:"On branch {branch}",de_DE:"Auf Branch {branch}",zh_CN:"切换到分支 {branch}",fr_FR:"Sur la branche {branch}"},"git-status-readytocommit":{__desc__:"One of the lines for git status output",en_US:"Ready to commit! (as always in this demo)",de_DE:"Fertig zum committen! (Wie immer in dieser Demo)",zh_CN:"可以提交啦！（这演示里一直可以提交）",fr_FR:"Prêt à commit ! (comme toujours dans cette démo)"},"git-dummy-msg":{__desc__:"The dummy commit message for all commits. Feel free to put in a shoutout to your school / city / whatever!",en_US:"Quick commit. Go Bears!",de_DE:"Schneller Commit. Eff-Zeh!",zh_CN:"快速提交。上啊月熊！",fr_FR:"Commit rapide. NoMaN Sux!"},"git-error-origin-fetch-uptodate":{__desc__:"One of the error messages for git",en_US:"Already up to date!",de_DE:"Bereits aktuell!",fr_FR:"Déjà à jour"},"git-error-origin-fetch-no-ff":{__desc__:"One of the error messages for git",en_US:"Your origin branch is out of sync with the remote branch and fetch cannot be performed",de_DE:"Dein origin Branch ist nicht auf dem Stand des Remote Branch und fetch kann nicht ausgeführt werden",fr_FR:"Votre branche origin n'est plus synchronisée avec la branche distante et fetch ne peut pas être appliqué. Essayez avec l'option --force"},"git-error-origin-push-no-ff":{__desc__:"One of the error messages for git",en_US:"The remote repository has diverged from your local repository, so uploading your changes is not a simple fast forward (and thus your push was rejected). Please pull down the new changes in the remote repository, incorporate them into this branch, and try again. You can do so with git pull or git pull --rebase",de_DE:"Das entfernte Repository weicht von deinem lokalen Repository ab, daher können deine Änderungen nicht mit einem einfachen fast forward hochgeladen werden (und daher ist dein push abgelehnt worden). Bitte pull erst die neuen Änderungen in das lokale Repository, integriere sie in den Branch und versuch es nochmal. Das kannst du mit git pull oder git pull --rebase machen",fr_FR:"Le dépôt distant a divergé de votre référentiel local, donc l'envoi de vos modifications n'est pas en simple avance rapide (et donc votre envoi a été rejeté). Veuillez récupérer les nouveaux changements depuis le dépôt distant, les intégrer dans cette branche, et essayez à nouveau. Vous pouvez le faire avec git pull ou git pull --rebase"},"git-error-remote-branch":{__desc__:"One of the error messages for git",en_US:"You cannot execute that command on a remote branch",de_DE:"Du kannst diesen Befehl nicht auf einem Remote Branch ausführen",fr_FR:"Vous ne pouvez exécuter cette commande sur une branche distante"},"git-error-origin-required":{__desc__:"One of the error messages for git",en_US:"An origin is required for that command",de_DE:"Für diesen Befehl wird origin benötigt",fr_FR:"Une origine est requise pour cette commande"},"git-error-origin-exists":{__desc__:"One of the error messages for git",en_US:"An origin already exists! You cannot make a new one",de_DE:"origin existiert bereits! Du kannst es nicht nochmal anlegen",fr_FR:"Une origine existe déjà ! Vous ne pouvez pas en créer une nouvelle"},"git-error-branch":{__desc__:"One of the error messages for git",en_US:"You can't delete the master branch, the branch you are on, or things that aren't branches",de_DE:"Du kannst nicht den Branch master, den Branch auf dem du gerade arbeitest oder Refs, die keine Branches sind, löschen",zh_CN:"你不能删除主分支（master），或者你当前所在的分支，或者其他不是分支也不知道能不能吃的东西。",fr_FR:"Vous ne pouvez supprimer la branche master, la branche sur laquelle vous êtes, ou ce qui n'est pas une branche"},"git-merge-msg":{__desc__:"The commit message for a merge commit",en_US:"Merge {target} into {current}",de_DE:"Mergen von {target} in {current}",zh_CN:"合并 {target} 到 {current}",fr_FR:"Merge de {target} dans {current}"},"git-error-rebase-none":{__desc__:"One of the error messages for git",en_US:"No commits to rebase! Everything is a merge commit or changes already applied",de_DE:"Keine Commits für Rebase gefunden! Alle Commits sind Merge Commits oder beinhalten nur schon vorhandene Änderungen",zh_CN:"没有需要 rebase 的提交！都是个合并提交，或者已经 rebase 过了。",fr_FR:"Aucune commit à rebaser ! Tout est soit un commit de merge, soit des modifications déjà appliquées"},"git-result-nothing":{__desc__:"The message that explains the result of a git command",en_US:"Nothing to do...",de_DE:"Nichts zu tun ...",zh_CN:"没啥鸟事……",fr_FR:"Rien à effectuer…"},"git-result-fastforward":{__desc__:"The message that explains the result of a git command",en_US:"Fast forwarding...",de_DE:"Fast forward...",zh_CN:"快速前进……",fr_FR:"En avance rapide…"},"git-result-uptodate":{__desc__:"The message that explains the result of a git command",en_US:"Branch already up-to-date",de_DE:"Branch ist bereits aktuell",zh_CN:"分支已经是最新啦",fr_FR:"Branche déjà à jour"},"git-error-exist":{__desc__:"One of the error messages for git",en_US:"The ref {ref} does not exist or is unknown",de_DE:"Die Ref {ref} existiert nicht oder ist unbekannt",zh_CN:"索引 {ref} 不存在，或者找不到。",fr_FR:"La référence {ref} n'existe pas ou est inconnue"},"git-error-relative-ref":{__desc__:"One of the error messages for git",en_US:"Commit {commit} doesnot have a {match}",de_DE:"Commit {commit} hat kein {match}",zh_CN:"提交 {commit} 并没有 {match}",fr_FR:"Le commit {commit} n'a pas de correspondance {match}"},"git-warning-detached":{__desc__:"One of the warning messages for git",en_US:"Warning!! Detached HEAD state",de_DE:"Achtung! Detached HEAD Zustand",zh_CN:"警告！脑袋搬家（Detached HEAD）状态",fr_FR:"Attention ! HEAD est détaché"},"git-warning-add":{__desc__:"One of the warning messages for git",en_US:"No need to add files in this demo",de_DE:"In dieser Demo müssen keine Dateien hinzugefügt werden",zh_CN:"此演示中不需要添加文件",fr_FR:"Aucun besoin d'ajouter des fichiers dans cette démo"},"git-error-options":{__desc__:"One of the error messages for git",en_US:"Those options you specified are incompatible or incorrect",de_DE:"Die angegebenen Optionen sind inkompatibel oder falsch",zh_CN:"你所指定的参数不兼容或者不准确",fr_FR:"Les options que vous avez spécifiées sont incompatibles ou incorrectes"},"git-error-already-exists":{__desc__:"One of the error messages for git",en_US:"The commit {commit} already exists in your changes set, aborting!",de_DE:"Der Commit {commit} existiert bereit, Abbruch!",zh_CN:"提交 {commit} 已经存在于你的改动集里，正在中止！",fr_FR:"Le commit {commit} existe déjà dans votre ensemble de modifications, opération avortée !"},"git-error-reset-detached":{__desc__:"One of the error messages for git",en_US:"Can't reset in detached head! Use checkout if you want to move",de_DE:"Kann im Detached Head Zustand kein reset ausführen! Bitte checkout zum Bewegen benutzen",zh_CN:"不能在分离的 HEAD 里重置！用 checkout 吧",fr_FR:"On ne peut pas effectuer un reset quand head est détaché. Utilisez checkout pour déplacer"},"git-warning-hard":{__desc__:"One of the warning messages for git",en_US:"The default behavior is a --hard reset, feel free to omit that option!",de_DE:"Das Standardverhalten in dieser Demo ist --hard, du kannst die Option auch weglassen!",zh_CN:"默认的行为是 --hard 硬重置，尽管省略掉那个选项吧！",fr_FR:"Le comportement par défaut est un --hard reset, soyez libre d'omettre cette option !"},"git-error-staging":{__desc__:"One of the error messages for git",en_US:"There is no concept of adding / staging files, so that option or command is invalid!",de_DE:"In dieser Demo gibt es kein Hinzufügen / Vormerken von Dateien, dieser Befehl ist daher ungültig!",zh_CN:"没有添加、缓存文件的必要，所以改选项或者命令是不合法的。",fr_FR:"Il n'y a pas le concept d'ajouter / mettre en staging, donc cette option ou commande est invalide"},"git-revert-msg":{__desc__:"Message for reverting git command",en_US:"Reverting {oldCommit}: {oldMsg}",de_DE:"Reverte {oldCommit}: {oldMsg}",zh_CN:"撤销 {oldCommit}：{oldMsg}",fr_FR:"Revert {oldCommit}: {oldMsg}"},"git-error-args-many":{__desc__:"One of the error messages for git",en_US:"I expect at most {upper} argument(s) for {what}",de_DE:"Ich benötige maximal {upper} Argument(e) für {what}",zh_CN:"{what} 期望最多 {upper} 个参数",fr_FR:"J'attends au plus {upper} argument(s) pour {what}"},"git-error-args-few":{__desc__:"One of the error messages for git",en_US:"I expect at least {lower} argument(s) for {what}",de_DE:"Ich benötige mindestens {lower} Argument(e) für {what}",zh_CN:"{what} 期望最少 {lower} 个参数",fr_FR:"J'attends au moins {upper} argument(s) pour {what}"},"git-error-no-general-args":{__desc__:"One of the error messages for git",en_US:"That command accepts no general arguments",de_DE:"Dieser Befehl akzeptiert keine allgemeinen Argumente",zh_CN:"该命令不接收参数",fr_FR:"Cette commande n'accepte aucun argument général"},"copy-tree-string":{__desc__:"The prompt to copy the tree when sharing",en_US:"Copy the tree string below",de_DE:"Kopiere die folgende Baum-Zeichenkette",zh_CN:"拷贝下面的树字符串",fr_FR:"Copiez la chaîne d'arbre ci-dessous"},"learn-git-branching":{__desc__:"The title of the app, with spaces",en_US:"Learn Git Branching",de_DE:"Learn Git Branching",ja:"日本語版リポジトリ",ko:"Git 브랜치 배우기",zh_CN:"学习Git分支",fr_FR:"Apprenez Git Branching"},"select-a-level":{__desc__:"The prompt to select a level on the drop down view",en_US:"Select a level",de_DE:"Level auswählen",zh_CN:"选择一关",fr_FR:"Choisissez un niveau"},"branch-name-short":{__desc__:"When branch names get too long, we need to truncate them. This is the warning for that",en_US:'Sorry, we need to keep branch names short for the visuals. Your branch name was truncated to 9 characters, resulting in "{branch}"',de_DE:'Tut mir leid, aber aus Gründen der Darstellung müssen wir die Branch-Namen kurz halten. Dein Branch-Name wurde auf 9 Zeichen gekürzt und heißt daher jetzt "{branch}"',zh_CN:'抱歉，为了显示的需要，我们需要一个短些的分支名称。您使用的将被截断到9个字符，即"{branch}"',fr_FR:'Désolé, nous devons garder les noms de branches courts pour la visualisation. Votre nom de branche a été tronqué à 9 caractères, devenant "{branch}"'},"bad-branch-name":{__desc__:"When the user enters a branch name thats not ok",en_US:'That branch name "{branch}" is not allowed!',de_DE:'Der Branch-Name "{branch}" ist nicht erlaubt!',zh_CN:'不能给分支起这个名字 "{branch}"',fr_FR:'Ce nom de branche "{branch}" n\'est pas autorisé'},"bad-tag-name":{__desc__:"When the user enters a tag name thats not ok",en_US:'That tag name "{tag}" is not allowed!',de_DE:'Der Tag-Name "{tag}" ist nicht erlaubt!'},"option-not-supported":{__desc__:"When the user specifies an option that is not supported by our demo",en_US:'The option "{option}" is not supported!',de_DE:'Die  Option "{option}" wird nicht unterstützt!',zh_CN:'不支持选项 "{option}"',fr_FR:"L'option \"{option}\" n'est pas supportée"},"git-usage-command":{__desc__:"The line that shows how to format a git command",en_US:"git <command> [<args>]",de_DE:"git <Befehl> [<Argumente>]",zh_CN:"git <命令> [<参数>]",fr_FR:"git <commande> [<arguments>]"},"git-supported-commands":{__desc__:"In the git help command, the header above the supported commands",en_US:"Supported commands:",de_DE:"Unterstützte Befehle:",zh_CN:"支持的命令有:",fr_FR:"Commandes supportées"},"git-usage":{__desc__:"In the dummy git output, the header before showing all the commands",en_US:"Usage:",de_DE:"Benutzung:",zh_CN:"使用:",fr_FR:"Utilisation :"},"git-version":{__desc__:"The git version dummy output, kind of silly. PCOTTLE is my unix name but feel free to put yours instead",en_US:"Git Version PCOTTLE.1.0",de_DE:"Git Version PCOTTLE.1.0.jbr",zh_CN:"Git 版本 PCOTTLE.1.0",fr_FR:"Git version PCOTTLE.1.0"},"refresh-tree-command":{__desc__:"when the tree is visually refreshed",en_US:"Refreshing tree...",de_DE:"Aktualisiere Baum ...",zh_CN:"正在刷新树结构...",fr_FR:"Actualisation de l'arbre…"},"locale-command":{__desc__:"when the locale is set to something",en_US:"Locale set to {locale}",de_DE:"Locale auf {locale} gesetzt",zh_CN:"语言更改为 {locale}",fr_FR:"Langue changée à {locale}"},"locale-reset-command":{__desc__:"when the locale is reset",en_US:"Locale reset to default, which is {locale}",de_DE:"Locale auf Standard zurückgesetzt, also {locale}",zh_CN:"语言重置为默认的 {locale}",fr_FR:"Langue remise par défaut, qui est {locale}"},"show-command":{__desc__:'command output title from "show"',en_US:"Please use one of the following commands for more info:",de_DE:"Bitte benutze einen der folgenden Befehle um mehr Informationen zu bekommen:",fr_FR:"Merci d'utiliser une des commandes suivantes pour obtenir plus d'info"},"show-all-commands":{__desc__:'command output title from "show commands"',en_US:"Here is a list of all the commmands available:",de_DE:"Hier ist eine Liste aller verfügbarer Befehle:",fr_FR:"Ci-dessous est la liste de toutes les commandes disponibles :"},"cd-command":{__desc__:"dummy command output for the command in the key",en_US:'Directory changed to "/directories/dont/matter/in/this/demo"',de_DE:'Verzeichnis gewechselt zu "/verzeichnisse/sind/in/dieser/demo/latte"',zh_CN:'目录切换到 "/directories/dont/matter/in/this/demo"',fr_FR:'Répertoire changé à "/directories/dont/matter/in/this/demo" (les répertoires ne servent à rien dans cette démo)'},"ls-command":{__desc__:"Dummy command output for the command in the key",en_US:"DontWorryAboutFilesInThisDemo.txt",de_DE:"VergissDateienInDieserDemo.txt",zh_CN:"DontWorryAboutFilesInThisDemo.txt (译: 在试验里不用担心文件.txt)",fr_FR:"DontWorryAboutFilesInThisDemo.txt (ne vous préoccupez pas des noms de fichier dans cette démo)"},"mobile-alert":{__desc__:"When someone comes to the site on a mobile device, they can not input commands so this is a nasty alert to tell them",en_US:"LGB can't receive input on mobile, visit on desktop! it's worth it :D",de_DE:"LGB ist nicht mit mobilen Endgeräten kompatibel, nutz es vom Desktop! Es lohnt sich :D",zh_CN:"无法在移动设备/平板上调出键盘 :( 请试试桌面版 :D",fr_FR:"Impossible de faire apparaître le clavier sur mobile / tablette :( Essayez de passer sur un ordinateur de bureau :D"},"share-tree":{__desc__:"When you export a tree, we want you to share the tree with friends",en_US:'Share this tree with friends! They can load it with "import tree"',de_DE:'Teile diesen git-Baum mit Freunden! Sie können ihn mit "import tree" laden',zh_CN:'与你的好友分享提交树！他们可以用 "import tree" 加载它',fr_FR:'Partagez cet arbre avec vos amis ! Ils peuvent le charger avec "import tree"'},"paste-json":{__desc__:"When you are importing a level or tree",en_US:"Paste a JSON blob below!",de_DE:"Füg einen JSON-Blob unten ein!",zh_CN:"在下边粘贴一个JSON串",fr_FR:"Collez un blob JSON ci-dessous !"},"solved-map-reset":{__desc__:"When you reset the solved map to clear your solved history, in case someone else wants to use your browser",en_US:"Solved map was reset, you are starting from a clean slate!",de_DE:"Gelöste Karte wurde zurückgesetzt, du fängst mit einem leeren Blatt an!",zh_CN:"解决列表已重置，您现在从零开始了",fr_FR:"La carte des niveaux résolus a été effacée, vous repartez de zéro !"},"level-cant-exit":{__desc__:"When the user tries to exit a level when they are not in one",en_US:'You are not in a level! You are in a sandbox, start a level with "levels"',de_DE:'Du bist nicht in einem Level! Du bist im Sandkasten-Modus, starte einen Level mit "levels"',zh_CN:'您没在关卡中！您在沙盒中，要开始关卡请输入 "levels"',fr_FR:'Vous n\'êtes pas dans un niveau ! Vous êtes dans le mode bac à sable, commencez un niveau avec "levels"'},"level-no-id":{__desc__:"When you say an id but that level doesnt exist",en_US:'A level for that id "{id}" was not found! Opening up a level selection view',de_DE:'Konnte keinen Level mit der ID "{id}" finden! Öffne einen Level-Auswahldialog',zh_CN:'没找到id为 "{id}" 的关卡！打开关卡选择框',fr_FR:"Le niveau dont l'identifiant est {id} n'a pas été trouvé ! Ouverture de la vue de sélection des niveaux"},"undo-stack-empty":{__desc__:"The undo command can only undo back until the last time the level was reset or the beginning of the level",en_US:"The undo stack is empty!",de_DE:"Die Undo-Liste ist leer!",zh_CN:"还没有什么可以撤销",fr_FR:"La pile d'annulation est vide !"},"already-solved":{__desc__:"When you play in a level that is already solved",en_US:'You have already solved this level, try other levels with "levels" or go back to sandbox with "sandbox"',de_DE:'Du hast diesen Level bereits gelöst, probier einen anderen Level mit "levels" aus oder geh in den Sandkasten-Modus mit "sandbox"',zh_CN:'你已经解决了本关，输入 "levels" 尝试其他关卡，或者输入 "sandbox" 回到沙盒中',fr_FR:'Vous avez déjà résolu ce niveau, essayez d\'autres niveaux avec "levels" ou revenez au bac à sable avec "sandbox"'},"command-disabled":{__desc__:"When you try a command that is disabled",en_US:"That git command is disabled for this level!",de_DE:"Dieser git-Befehl ist für diesen Level deaktiviert!",zh_CN:"该命令在本关不允许使用！",fr_FR:"Cette commande git est désactivée pour ce niveau !"},"share-json":{__desc__:"when you have made the level, prompt to share this",en_US:"Here is the JSON for this level! Share it with somenoe or send it to me on Github",de_DE:"Hier ist das JSON für diesen Level! Teil es mit jemandem or schick es mir über Github",zh_CN:"这是一个关卡定义JSON！您可以分享它或者发到我的GitHub上",fr_FR:"Voici le JSON pour ce niveau ! Partagez-le avec quelqu'un ou envoyez-le moi sur Github"},"want-start-dialog":{__desc__:"prompt to add a start dialog",en_US:"You have not specified a start dialog, would you like to add one?",de_DE:"Du hast noch keinen Einführungs-Dialog geschrieben, willst du einen hinzufügen?",zh_CN:"您还没有定义一开始的介绍，是否添加一个？",fr_FR:"Vous n'avez pas spécifié de dialogue de départ, voulez-vous en ajouter un ?"},"want-hint":{__desc__:"prompt to add a hint",en_US:"You have not specified a hint, would you like to add one?",de_DE:"Du hast noch keinen Hinweis geschrieben, magst du einen hinzufügen?",zh_CN:"您还没有定义提示，是否添加一个？",fr_FR:"Vous n'avez pas spécifié d'indice, voulez-vous en ajouter un ?"},"prompt-hint":{__desc__:"prompt for hint",en_US:"Enter the hint for this level, or leave this blank if you do not want to include one",de_DE:"Gib den Hinweis für diesen Level an, oder lass es leer wenn du keinen hinzufügen willst",zh_CN:"请输入关卡提示，或者故意留空",fr_FR:"Entrez l'indice pour ce niveau, ou laissez-le vide pour ne pas l'inclure"},"prompt-name":{__desc__:"prompt for level name",en_US:"Enter the name for the level",de_DE:"Gib den Namen für diesen Level an",zh_CN:"输入关卡名",fr_FR:"Entrez le nom pour ce niveau"},"solution-empty":{__desc__:"If you define a solution without any commands, aka a level that is solved without doing anything",en_US:"Your solution is empty!! Something is amiss",de_DE:"Deine Auflösung ist leer! Hier fehlt etwas",zh_CN:"你的解法是空的!! 这应该是出错了",fr_FR:"Votre solution est vide !! Quelque chose ne tourne pas rond"},"define-start-warning":{__desc__:"When you define the start point again, it overwrites the solution and goal so we add a warning",en_US:"Defining start point... solution and goal will be overwritten if they were defined earlier",de_DE:"Lege Start fest ... Auflösung und Ziel werden gelößcht, falls sie schon festgelegt worden waren",zh_CN:"定义开始点... 解决方法和目标会被新的替代",fr_FR:"Redéfinition du point de départ… la solution et la cible seront écrasés s'ils ont déjà été définis"},"help-vague-level":{__desc__:"When you are in a level and you say help, its vague and you need to specify",en_US:'You are in a level, so multiple forms of help are available. Please select either "help level" to learn more about this lesson, "help general" for using Learn GitBranching, or "objective" to learn about how to solve the level.',de_DE:'Du befindest dich in einem Level, daher gibt es verschiedene Hilfen. Gib "help level" ein um mehr úber diesen Level zu erfahren, "help general" um zu sehen wie Learn Git Branching bedient wird, oder "objective" um das Ziel dieses Levels zu erfahren.',zh_CN:'您正在关卡中，这里有多种形式的帮助，请选择 "help level" (关卡帮助)或 "help general" (一般帮助)',fr_FR:'Vous êtes dans un niveau, donc plusieurs formes d\'aide sont disponibles. Merci de sélectionner soit "help level" pour en apprendre plus sur cette leçon, "help general" pour l\'utilisation de Learn GitBranching, ou "objective" pour apprendre comment résoudre le niveau'},"help-vague-builder":{__desc__:"When you are in a level builder, the help command is vague so you need to specify what you mean",en_US:'You are in a level builder, so multiple forms of help are available. Please select either "help general" or "help builder"',de_DE:'Du befindest dich im Level-Editor, daher gibt es verschiedene Hilfen. Gib bitte "help general" oder "help builder" ein',zh_CN:'您正在进行关卡构建中，这里有多种形式的帮助，请选择 "help general" (一般帮助)或 "help builder" (关卡构建帮助)',fr_FR:'Vous êtes dans l\'éditeur de niveaux, donc plusieurs formes d\'aide sont disponibles. Merci de sélectionner soit "help general" soit "help builder"'},"goal-to-reach":{__desc__:"title of window that shoes the goal tree to reach",en_US:"Goal To Reach",de_DE:"Ziel",zh_CN:"目标",fr_FR:"Cible à atteindre"},"goal-only-master":{__desc__:"the helper message for the window that shows the goal tree when the goal will only be compared using the master branch",en_US:'<span class="fwber">Note:</span> Only the master branch will be checked in this level. The other branches are simply for reference (shown as dashed labels below). As always, you can hide this dialog with "hide goal"',de_DE:'<span class="fwber">Hinweis:</span> In diesem Level wird nur der Branch master geprüft. Die anderen Branches dienen nur als Vergleichsbasis (als gestrichelte Bezeichner dargestellt). Wie immer kannst du diese Meldung mit "hide goal" ausblenden'},"hide-goal":{__desc__:"the helper message for the window that shows the goal tree",en_US:'You can hide this window with "hide goal"',de_DE:'Du kannst diese Meldung mit "hide goal" ausblenden',zh_CN:'你可以通过命令 "hide goal" 关闭这个窗口',fr_FR:'Vous pouvez masquer cette fenêtre avec "hide goal"'},"hide-start":{__desc__:"The helper message for the window that shows the start tree for a level",en_US:'You can hide this window with "hide start"',de_DE:'Du kannst diese Meldung mit "hide start" ausblenden',zh_CN:'你可以通过命令 "hide start" 关闭这个窗口',fr_FR:'Vous pouvez masquer cette fenêtre avec "hide start"'},"level-builder":{__desc__:"The name for the environment where you build levels",en_US:"Level Builder",de_DE:"Level-Editor",zh_CN:"关卡生成器",fr_FR:"Éditeur de niveaux"},"no-start-dialog":{__desc__:"when the user tries to open a start dialog for a level that does not have one",en_US:"There is no start dialog to show for this level!",de_DE:"Es gibt keinen Einführungs-Dialog für diesen Level!",zh_CN:"介绍? 这关真没有!",fr_FR:"Il n'y a aucun dialogue de départ à afficher pour ce niveau !"},"no-hint":{__desc__:"when no hint is available for a level",en_US:"Hmm, there doesn't seem to be a hint for this level :-/",de_DE:"Hm, es gibt anscheinend keinen Hinweis für diesen Level :-/",zh_CN:"提示？嗯，这关真没有哎~ :-/",fr_FR:"Hum, il ne semble pas y avoir d'indice pour ce niveau :-/"},"error-untranslated-key":{__desc__:"This error happens when we are trying to translate a specific key and the locale version is mission",en_US:"The translation for {key} does not exist yet :( Please hop on github and offer up a translation!",de_DE:"Die Übersetzung für {key} existiert noch nicht :( Falls du eine hast, bitte teil sie mit auf Github mit!",zh_CN:"还没翻译 {key} :( 请在gitHub上贡献你的翻译!",fr_FR:"La traduction pour {key} n'existe pas encore :( Venez sur Github pour en offrir une !"},"error-untranslated":{__desc__:"The general error when we encounter a dialog that is not translated",en_US:"This dialog or text is not yet translated in your locale :( Hop on github to aid in translation!",de_DE:"Dieser Dialog oder Text ist noch nicht in deine Sprache übersetzt. :( Schau auf Github vorbei um bei der Übersetzung zu helfen!",zh_CN:"这段对话还没有被翻译成你的语言 :( 欢迎在gitHub上贡献你的翻译!",fr_FR:"Ce message n'a pas encore été traduit dans votre langue :( Venez sur Github aider à la traduction !"}}
},{}],26:[function(a,b,c){function d(){this.levelMap={},this.levelSequences=f,this.sequences=[],this.init();var a;try{a=JSON.parse(localStorage.getItem("solvedMap")||"{}")}catch(b){console.warn("local storage failed",b)}this.solvedMap=a||{},h.getEvents().on("levelSolved",this.levelSolved,this)}var e=a("underscore"),f=(a("backbone"),a("../../levels").levelSequences),g=a("../../levels").sequenceInfo,h=a("../app");d.prototype.init=function(){e.each(this.levelSequences,function(a,b){if(this.sequences.push(b),!a||!a.length)throw new Error("no empty sequences allowed");e.each(a,function(a,c){this.validateLevel(a);var d=b+String(c+1),f=e.extend({},a,{index:c,id:d,sequenceName:b});this.levelMap[d]=f,this.levelSequences[b][c]=f},this)},this)},d.prototype.isLevelSolved=function(a){if(!this.levelMap[a])throw new Error("that level doesnt exist!");return Boolean(this.solvedMap[a])},d.prototype.levelSolved=function(a){a&&(this.solvedMap[a]=!0,this.syncToStorage())},d.prototype.resetSolvedMap=function(){this.solvedMap={},this.syncToStorage(),h.getEvents().trigger("levelSolved")},d.prototype.syncToStorage=function(){try{localStorage.setItem("solvedMap",JSON.stringify(this.solvedMap))}catch(a){console.warn("local storage fialed on set",a)}},d.prototype.validateLevel=function(a){a=a||{};var b=["name","goalTreeString","solutionCommand"];e.each(b,function(b){if(void 0===a[b])throw console.log(a),new Error("I need this field for a level: "+b)})},d.prototype.getSequenceToLevels=function(){return this.levelSequences},d.prototype.getSequences=function(){return e.keys(this.levelSequences)},d.prototype.getLevelsInSequence=function(a){if(!this.levelSequences[a])throw new Error("that sequecne name "+a+"does not exist");return this.levelSequences[a]},d.prototype.getSequenceInfo=function(a){return g[a]},d.prototype.getLevel=function(a){return this.levelMap[a]},d.prototype.getNextLevel=function(a){if(!this.levelMap[a])return console.warn("that level doesnt exist!!!"),null;var b=this.levelMap[a],c=b.sequenceName,d=this.levelSequences[c],e=b.index+1;if(e<d.length)return d[e];var f=this.sequences.indexOf(c)+1;if(f<this.sequences.length){var g=this.sequences[f];return this.levelSequences[g][0]}return null},c.LevelArbiter=d},{"../../levels":63,"../app":11,backbone:1,underscore:10}],27:[function(a,b,c){var d=a("underscore"),e=(a("backbone"),a("q")),f=a("../util"),g=a("../app"),h=a("../intl"),i=a("../util/errors"),j=a("../visuals/visualization").Visualization,k=(a("../level/parseWaterfall").ParseWaterfall,a("../level").Level),l=(a("../models/commandModel").Command,a("../git/gitShim").GitShim,a("../views/multiView").MultiView,a("../views").CanvasTerminalHolder),m=a("../views").ConfirmCancelTerminal,n=(a("../views").NextLevelConfirm,a("../views").LevelToolbar),o=a("../views/builderViews").MarkdownPresenter,p=a("../views/builderViews").MultiViewBuilder,q=(a("../views/builderViews").MarkdownGrabber,{"define goal":/^define goal$/,"define name":/^define name$/,"help builder":/^help builder$/,"define start":/^define start$/,"edit dialog":/^edit dialog$/,"show start":/^show start$/,"hide start":/^hide start$/,"define hint":/^define hint$/,finish:/^finish$/}),r=f.genParseCommand(q,"processLevelBuilderCommand"),s=k.extend({initialize:function(b){b=b||{},b.level=b.level||{};var c=h.getLocale();b.level.startDialog={},b.level.startDialog[c]={childViews:h.getDialog(a("../dialogs/levelBuilder"))},s.__super__.initialize.apply(this,[b]),this.startDialogObj=void 0,this.definedGoal=!1,delete this.treeCompare,delete this.solved},initName:function(){this.levelToolbar=new n({name:h.str("level-builder")})},initGoalData:function(){this.level.goalTreeString='{"branches":{"master":{"target":"C1","id":"master"},"makeLevel":{"target":"C2","id":"makeLevel"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"}},"HEAD":{"target":"makeLevel","id":"HEAD"}}',this.level.solutionCommand="git checkout -b makeLevel; git commit",s.__super__.initGoalData.apply(this,arguments)},initStartVisualization:function(){return this.startCanvasHolder=new l({additionalClass:"startTree",text:h.str("hide-start")}),this.startVis=new j({el:this.startCanvasHolder.getCanvasLocation(),containerElement:this.startCanvasHolder.getCanvasLocation(),treeString:this.level.startTree,noKeyboardInput:!0,smallCanvas:!0,noClick:!0}),this.startCanvasHolder},startOffCommand:function(){g.getEventBaton().trigger("commandSubmitted","echo :D")},objectiveDialog:function(a,b){var c=[a,b,void 0===this.startDialogObj?null:{startDialog:{en_US:this.startDialogObj}}];s.__super__.objectiveDialog.apply(this,c)},initParseWaterfall:function(a){s.__super__.initParseWaterfall.apply(this,[a]),this.parseWaterfall.addFirst("parseWaterfall",r),this.parseWaterfall.addFirst("instantWaterfall",this.getInstantCommands())},buildLevel:function(a,b){this.exitLevel(),setTimeout(function(){g.getSandbox().buildLevel(a,b)},1.5*this.getAnimationTime())},getInstantCommands:function(){return[[/^help$|^\?$/,function(){throw new i.CommandResult({msg:h.str("help-vague-builder")})}]]},takeControl:function(){g.getEventBaton().stealBaton("processLevelBuilderCommand",this.processLevelBuilderCommand,this),s.__super__.takeControl.apply(this)},releaseControl:function(){g.getEventBaton().releaseBaton("processLevelBuilderCommand",this.processLevelBuilderCommand,this),s.__super__.releaseControl.apply(this)},showGoal:function(){this.hideStart(),s.__super__.showGoal.apply(this,arguments)},showStart:function(a,b){this.hideGoal(),this.showSideVis(a,b,this.startCanvasHolder,this.initStartVisualization)},resetSolution:function(){this.gitCommandsIssued=[],this.level.solutionCommand=void 0},hideStart:function(a,b){this.hideSideVis(a,b,this.startCanvasHolder)},defineStart:function(a,b){this.hideStart(),a.addWarning(h.str("define-start-warning")),this.resetSolution(),this.level.startTree=this.mainVis.gitEngine.printTree(),this.mainVis.resetFromThisTreeNow(this.level.startTree),this.showStart(a,b)},defineGoal:function(a,b){return this.hideGoal(),this.gitCommandsIssued.length?(this.definedGoal=!0,this.level.solutionCommand=this.gitCommandsIssued.join(";"),this.level.goalTreeString=this.mainVis.gitEngine.printTree(),this.initGoalVisualization(),this.showGoal(a,b),void 0):(a.set("error",new i.GitError({msg:h.str("solution-empty")})),b.resolve(),void 0)},defineName:function(a,b){this.level.name={en_US:prompt(h.str("prompt-name"))},a&&a.finishWith(b)},defineHint:function(a,b){this.level.hint={en_US:prompt(h.str("prompt-hint"))},a&&a.finishWith(b)},editDialog:function(a,b){var c=e.defer();this.currentBuilder=new p({multiViewJSON:this.startDialogObj,deferred:c}),c.promise.then(d.bind(function(a){this.startDialogObj=a},this)).fail(function(){}).done(function(){a?a.finishWith(b):b.resolve()})},finish:function(a,b){if(!this.gitCommandsIssued.length||!this.definedGoal)return a.set("error",new i.GitError({msg:h.str("solution-empty")})),b.resolve(),void 0;for(;!this.level.name;)this.defineName();var c=e.defer(),f=c.promise;if(void 0===this.level.hint){var g=e.defer();f=f.then(function(){return g.promise});var j=new m({markdowns:[h.str("want-hint")]});j.getPromise().then(d.bind(this.defineHint,this)).fail(d.bind(function(){this.level.hint={en_US:""}},this)).done(function(){g.resolve()})}if(void 0===this.startDialogObj){var k=e.defer();f=f.then(function(){return k.promise});var l=new m({markdowns:[h.str("want-start-dialog")]});l.getPromise().then(d.bind(function(){var a=e.defer();return this.editDialog(void 0,a),a.promise},this)).fail(function(){}).done(function(){k.resolve()})}f=f.done(d.bind(function(){new o({fillerText:JSON.stringify(this.getExportObj(),null,2),previewText:h.str("share-json")}),a.finishWith(b)},this)),c.resolve()},getExportObj:function(){var a=d.extend({},this.level);return delete a.startDialog,this.startDialogObj&&(a.startDialog={en_US:this.startDialogObj}),a},processLevelBuilderCommand:function(a){var b={"define goal":this.defineGoal,"define start":this.defineStart,"show start":this.showStart,"hide start":this.hideStart,finish:this.finish,"define hint":this.defineHint,"define name":this.defineName,"edit dialog":this.editDialog,"help builder":s.__super__.startDialog};if(!b[a.get("method")])throw new Error("woah we dont support that method yet");b[a.get("method")].apply(this,arguments)},afterCommandDefer:function(a){a.resolve()},die:function(){this.hideStart(),s.__super__.die.apply(this,arguments),delete this.startVis,delete this.startCanvasHolder}});c.LevelBuilder=s,c.regexMap=q},{"../app":11,"../dialogs/levelBuilder":14,"../git/gitShim":18,"../intl":24,"../level":29,"../level/parseWaterfall":30,"../models/commandModel":34,"../util":41,"../util/errors":39,"../views":48,"../views/builderViews":45,"../views/multiView":50,"../visuals/visualization":61,backbone:1,q:9,underscore:10}],28:[function(a,b,c){function d(a){a=a||{},this.disabledMap=a.disabledMap||{"git cherry-pick":!0,"git rebase":!0}}var e=a("underscore"),f=a("../intl"),g=a("../commands"),h=a("../util/errors"),i=h.GitError;d.prototype.getInstantCommands=function(){var a=[],b=function(){throw new i({msg:f.str("command-disabled")})};return e.each(this.disabledMap,function(c,d){var e="git";d=d.slice(e.length+1);var f=g.commands.getRegexMap()[e][d];if(!f)throw new Error("wuttttt this disbaled command"+d+" has no regex matching");a.push([f,b])}),a},c.DisabledMap=d},{"../commands":12,"../intl":24,"../util/errors":39,underscore:10}],29:[function(a,b,c){var d=a("underscore"),e=(a("backbone"),a("q")),f=a("../util"),g=a("../app"),h=a("../intl"),i=a("../log"),j=a("../util/errors"),k=a("../sandbox/").Sandbox,l=a("../util/constants"),m=a("../visuals/visualization").Visualization,n=(a("../level/parseWaterfall").ParseWaterfall,a("../level/disabledMap").DisabledMap),o=(a("../models/commandModel").Command,a("../git/gitShim").GitShim),p=a("../commands"),q=a("../views/multiView").MultiView,r=a("../views").CanvasTerminalHolder,s=a("../views").ConfirmCancelTerminal,t=a("../views").NextLevelConfirm,u=a("../views").LevelToolbar,v=a("../graph/treeCompare"),w={"help level":/^help level$/,"start dialog":/^start dialog$/,"show goal":/^(show goal|goal|help goal)$/,"hide goal":/^hide goal$/,"show solution":/^show solution($|\s)/,objective:/^(objective|assignment)$/},x=f.genParseCommand(w,"processLevelCommand"),y=k.extend({initialize:function(a){a=a||{},a.level=a.level||{},this.level=a.level,this.gitCommandsIssued=[],this.solved=!1,this.initGoalData(a),this.initName(a),y.__super__.initialize.apply(this,[a]),this.startOffCommand(),this.handleOpen(a.deferred)},handleOpen:function(a){return a=a||e.defer(),this.level.startDialog&&!this.testOption("noIntroDialog")?(new q(d.extend({},h.getStartDialog(this.level),{deferred:a})),void 0):(setTimeout(function(){a.resolve()},1.2*this.getAnimationTime()),void 0)},objectiveDialog:function(a,b,c){if(c=void 0===c?this.level:c,!c||!c.startDialog)return a.set("error",new j.GitError({msg:h.str("no-start-dialog")})),b.resolve(),void 0;console.log(h.getStartDialog(c));var e=$.extend({},h.getStartDialog(c));e.childViews=e.childViews.slice(-1),new q(d.extend(e,{deferred:b})),b.promise.then(function(){a.set("status","finished")})},startDialog:function(a,b){return this.level.startDialog?(this.handleOpen(b),b.promise.then(function(){a.set("status","finished")}),void 0):(a.set("error",new j.GitError({msg:h.str("no-start-dialog")})),b.resolve(),void 0)},getEnglishName:function(){return this.level.name.en_US},initName:function(){var a=h.getName(this.level);this.levelToolbar=new u({name:a})},initGoalData:function(){if(!this.level.goalTreeString||!this.level.solutionCommand)throw new Error("need goal tree and solution")},takeControl:function(){g.getEventBaton().stealBaton("processLevelCommand",this.processLevelCommand,this),y.__super__.takeControl.apply(this)},releaseControl:function(){g.getEventBaton().releaseBaton("processLevelCommand",this.processLevelCommand,this),y.__super__.releaseControl.apply(this)},startOffCommand:function(){this.testOption("noStartCommand")||g.getEventBaton().trigger("commandSubmitted","hint; delay 2000; show goal")},initVisualization:function(a){this.mainVis=new m({el:a.el||this.getDefaultVisEl(),treeString:a.level.startTree})},initGoalVisualization:function(){var a=v.onlyMasterCompared(this.level);return this.goalCanvasHolder=new r({text:a?h.str("goal-only-master"):void 0}),this.goalVis=new m({el:this.goalCanvasHolder.getCanvasLocation(),containerElement:this.goalCanvasHolder.getCanvasLocation(),treeString:this.level.goalTreeString,noKeyboardInput:!0,smallCanvas:!0,isGoalVis:!0,levelBlob:this.level,noClick:!0}),this.goalCanvasHolder},showSolution:function(b,c){var f=this.level.solutionCommand,j=d.bind(function(){this.isShowingSolution=!0,g.getEventBaton().trigger("commandSubmitted",f),i.showLevelSolution(this.getEnglishName())},this),k=b.get("rawStr");if(this.testOptionOnString(k,"noReset")||(f="reset --forSolution; "+f),this.testOptionOnString(k,"force"))return j(),b.finishWith(c),void 0;var l=e.defer(),m=h.getDialog(a("../dialogs/confirmShowSolution"))[0],n=new s({markdowns:m.options.markdowns,deferred:l});l.promise.then(j).fail(function(){b.setResult("")}).done(function(){setTimeout(function(){b.finishWith(c)},n.getAnimationTime())})},showGoal:function(a,b){this.showSideVis(a,b,this.goalCanvasHolder,this.initGoalVisualization)},showSideVis:function(a,b,c,d){var e=function(){a&&a.finishWith(b)};c&&c.inDom||(c=d.apply(this)),c.slideIn(),setTimeout(e,c.getAnimationTime())},hideGoal:function(a,b){this.hideSideVis(a,b,this.goalCanvasHolder)},hideSideVis:function(a,b,c){var d=function(){a&&a.finishWith(b)};c&&c.inDom?(c.die(),setTimeout(d,c.getAnimationTime())):d()},initParseWaterfall:function(a){y.__super__.initParseWaterfall.apply(this,[a]),this.parseWaterfall.addFirst("parseWaterfall",x),this.parseWaterfall.addFirst("instantWaterfall",this.getInstantCommands()),a.level.disabledMap&&this.parseWaterfall.addFirst("instantWaterfall",new n({disabledMap:a.level.disabledMap}).getInstantCommands())},initGitShim:function(){this.gitShim=new o({beforeCB:d.bind(this.beforeCommandCB,this),afterCB:d.bind(this.afterCommandCB,this),afterDeferHandler:d.bind(this.afterCommandDefer,this)})},undo:function(){this.gitCommandsIssued.pop(),y.__super__.undo.apply(this,arguments)},afterCommandCB:function(a){if(!a.get("error")){var b=!1;d.each(p.commands.getCommandsThatCount(),function(c){d.each(c,function(c){b=b||c.test(a.get("rawStr"))})}),b&&this.gitCommandsIssued.push(a.get("rawStr"))}},afterCommandDefer:function(a,b){if(this.solved)return b.addWarning(h.str("already-solved")),a.resolve(),void 0;var c=this.mainVis.gitEngine.exportTree(),d=v.dispatchFromLevel(this.level,c);return d?(this.levelSolved(a),void 0):(a.resolve(),void 0)},getNumSolutionCommands:function(){var a=this.level.solutionCommand.replace(/^;|;$/g,"");return a.split(";").length},testOption:function(a){return this.options.command&&new RegExp("--"+a).test(this.options.command.get("rawStr"))},testOptionOnString:function(a,b){return a&&new RegExp("--"+b).test(a)},levelSolved:function(a){this.solved=!0,this.isShowingSolution||(g.getEvents().trigger("levelSolved",this.level.id),i.levelSolved(this.getEnglishName())),this.hideGoal();var b=g.getLevelArbiter().getNextLevel(this.level.id),c=this.gitCommandsIssued.length,d=this.getNumSolutionCommands();l.GLOBAL.isAnimating=!0;var e=this.testOption("noFinishDialog"),f=this.mainVis.gitVisuals.finishAnimation();this.mainVis.originVis&&(f=f.then(this.mainVis.originVis.gitVisuals.finishAnimation())),e||(f=f.then(function(){var a=new t({nextLevel:b,numCommands:c,best:d});return a.getPromise()})),f.then(function(){!e&&b&&(i.choseNextLevel(b.id),g.getEventBaton().trigger("commandSubmitted","level "+b.id))}).fail(function(){}).done(function(){l.GLOBAL.isAnimating=!1,a.resolve()})},die:function(){this.levelToolbar.die(),this.hideGoal(),this.mainVis.die(),this.releaseControl(),this.clear(),delete this.commandCollection,delete this.mainVis,delete this.goalVis,delete this.goalCanvasHolder},getInstantCommands:function(){var a=d.bind(function(){var a=h.getHint(this.level);return a&&a.length?a:h.str("no-hint")},this);return[[/^help$|^\?$/,function(){throw new j.CommandResult({msg:h.str("help-vague-level")})}],[/^hint$/,function(){throw new j.CommandResult({msg:a()})}]]},reset:function(a){this.gitCommandsIssued=[];var b=a?a.get("rawStr"):"";this.testOptionOnString(b,"forSolution")||(this.isShowingSolution=!1),this.solved=!1,y.__super__.reset.apply(this,arguments)},buildLevel:function(a,b){this.exitLevel(),setTimeout(function(){g.getSandbox().buildLevel(a,b)},1.5*this.getAnimationTime())},importLevel:function(a,b){this.exitLevel(),setTimeout(function(){g.getSandbox().importLevel(a,b)},1.5*this.getAnimationTime())},startLevel:function(a,b){this.exitLevel(),setTimeout(function(){g.getSandbox().startLevel(a,b)},1.5*this.getAnimationTime())},exitLevel:function(a,b){this.die(),a&&b&&(setTimeout(function(){a.finishWith(b)},this.getAnimationTime()),g.getEventBaton().trigger("levelExited"))},processLevelCommand:function(a,b){var c={"show goal":this.showGoal,"hide goal":this.hideGoal,"show solution":this.showSolution,"start dialog":this.startDialog,"help level":this.startDialog,objective:this.objectiveDialog},d=c[a.get("method")];if(!d)throw new Error("woah we dont support that method yet",d);d.apply(this,[a,b])}});c.Level=y,c.regexMap=w},{"../app":11,"../commands":12,"../dialogs/confirmShowSolution":13,"../git/gitShim":18,"../graph/treeCompare":22,"../intl":24,"../level/disabledMap":28,"../level/parseWaterfall":30,"../log":31,"../models/commandModel":34,"../sandbox/":36,"../util":41,"../util/constants":37,"../util/errors":39,"../views":48,"../views/multiView":50,"../visuals/visualization":61,backbone:1,q:9,underscore:10}],30:[function(a,b,c){var d=a("underscore"),e=a("../git/commands"),f=a("../commands"),g=a("../sandbox/commands"),h=function(a){a=a||{},this.options=a,this.shortcutWaterfall=a.shortcutWaterfall||[f.commands.getShortcutMap()],this.instantWaterfall=a.instantWaterfall||[e.instantCommands,g.instantCommands]};h.prototype.initParseWaterfall=function(){return a("../util").isBrowser()?(this.parseWaterfall=this.options.parseWaterfall||[f.parse,g.parse,g.getOptimisticLevelParse(),g.getOptimisticLevelBuilderParse()],void 0):(this.parseWaterfall=[f.parse],void 0)},h.prototype.clone=function(){return new h({shortcutWaterfall:this.shortcutWaterfall.slice(),instantWaterfall:this.instantWaterfall.slice(),parseWaterfall:this.parseWaterfall.slice()})},h.prototype.getWaterfallMap=function(){return this.parseWaterfall||this.initParseWaterfall(),{shortcutWaterfall:this.shortcutWaterfall,instantWaterfall:this.instantWaterfall,parseWaterfall:this.parseWaterfall}},h.prototype.addFirst=function(a,b){if(!a||!b)throw new Error("need to know which!!!");this.getWaterfallMap()[a].unshift(b)},h.prototype.addLast=function(a,b){this.getWaterfallMap()[a].push(b)},h.prototype.expandAllShortcuts=function(a){return d.each(this.shortcutWaterfall,function(b){a=this.expandShortcut(a,b)},this),a},h.prototype.expandShortcut=function(a,b){return d.each(b,function(b,c){d.each(b,function(b,d){var e=b.exec(a);e&&(a=c+" "+d+" "+a.slice(e[0].length))})}),a},h.prototype.processAllInstants=function(a){d.each(this.instantWaterfall,function(b){this.processInstant(a,b)},this)},h.prototype.processInstant=function(a,b){d.each(b,function(b){var c=b[0],d=c.exec(a);d&&b[1](d)})},h.prototype.parseAll=function(a){this.parseWaterfall||this.initParseWaterfall();var b=!1;return d.each(this.parseWaterfall,function(c){var d=c(a);d&&(b=d)},this),b},c.ParseWaterfall=h},{"../commands":12,"../git/commands":17,"../sandbox/commands":35,"../util":41,underscore:10}],31:[function(a,b,c){var d=function(a,b,c){window._gaq=window._gaq||[],window._gaq.push(["_trackEvent",a,b,c])};c.viewInteracted=function(a){d("views","interacted",a)},c.showLevelSolution=function(a){d("levels","showedLevelSolution",a)},c.choseNextLevel=function(a){d("levels","nextLevelChosen",a)},c.levelSelected=function(a){d("levels","levelSelected",a)},c.levelSolved=function(a){d("levels","levelSolved",a)},c.commandEntered=function(a){d("commands","commandEntered",a)}},{}],32:[function(a,b,c){var d=(a("underscore"),a("../intl")),e=(a("../git/commands"),a("../util/errors")),f=(e.CommandProcessError,e.GitError),g=(e.Warning,e.CommandResult,{commit:{regex:/^hg +(commit|ci)($|\s)/,options:["--amend","-A","-m"],delegate:function(a,b){var c=b.getOptionsMap();return c["-A"]&&b.addWarning(d.str("hg-a-option")),{vcs:"git",name:"commit"}}},status:{regex:/^hg +(status|st) *$/,dontCountForGolf:!0,execute:function(){throw new f({msg:d.str("hg-error-no-status")})}},"export":{regex:/^hg +export($|\s)/,dontCountForGolf:!0,delegate:function(a,b){return b.mapDotToHead(),{vcs:"git",name:"show"}}},graft:{regex:/^hg +graft($|\s)/,options:["-r"],delegate:function(a,b){return b.acceptNoGeneralArgs(),b.prependOptionR(),{vcs:"git",name:"cherrypick"}}},log:{regex:/^hg +log($|\s)/,options:["-f"],dontCountForGolf:!0,delegate:function(a,b){var c=b.getOptionsMap();if(b.acceptNoGeneralArgs(),!c["-f"])throw new f({msg:d.str("hg-error-log-no-follow")});return b.mapDotToHead(),{vcs:"git",name:"log"}}},bookmark:{regex:/^hg (bookmarks|bookmark|book)($|\s)/,options:["-r","-f","-d"],delegate:function(a,b){var c,e,g=b.getOptionsMap(),h=b.getGeneralArgs(),i={vcs:"git"};if(g["-m"]&&g["-d"])throw new f({msg:d.todo("-m and -d are incompatible")});if(g["-d"]&&g["-r"])throw new f({msg:d.todo("-r is incompatible with -d")});if(g["-m"]&&g["-r"])throw new f({msg:d.todo("-r is incompatible with -m")});return h.length+(g["-r"]?g["-r"].length:0)+(g["-d"]?g["-d"].length:0)===0?(i.name="branch",i):(g["-d"]?(g["-D"]=g["-d"],delete g["-d"],i.name="branch"):g["-r"]?(h=b.getGeneralArgs(),c=h[0],e=g["-r"][0],i.name="branch",b.setGeneralArgs([c,e])):h.length>0?(b.setOptionsMap({"-b":[h[0]]}),i.name="checkout",b.setGeneralArgs([])):i.name="branch",i)}},rebase:{regex:/^hg +rebase($|\s+)/,options:["-d","-s","-b"],execute:function(a,b){var c=function(){throw new f({msg:d.str("git-error-options")})},e=b.getOptionsMap();if(e["-d"]&&e["-s"]||!e["-d"]&&!e["-s"],e["-b"]||(e["-b"]=["."]),b.setOptionsMap(e),b.mapDotToHead(),e=b.getOptionsMap(),e["-d"]){var g=e["-d"][0]||c(),h=e["-b"][0];a.hgRebase(g,h)}else c()}},update:{regex:/^hg +(update|up)($|\s+)/,options:["-r"],delegate:function(a,b){return b.appendOptionR(),{vcs:"git",name:"checkout"}}},backout:{regex:/^hg +backout($|\s+)/,options:["-r"],delegate:function(a,b){return b.prependOptionR(),{vcs:"git",name:"revert"}}},histedit:{regex:/^hg +histedit($|\s+)/,delegate:function(a,b){var c=b.getGeneralArgs();return b.validateArgBounds(c,1,1),b.setOptionsMap({"-i":c}),b.setGeneralArgs([]),{vcs:"git",name:"rebase"}}},pull:{regex:/^hg +pull($|\s+)/,delegate:function(){return{vcs:"git",name:"pull"}}},summary:{regex:/^hg +(summary|sum) *$/,delegate:function(){return{vcs:"git",name:"branch"}}}});c.commandConfig=g},{"../git/commands":17,"../intl":24,"../util/errors":39,underscore:10}],33:[function(a,b,c){var d=a("underscore"),e=a("q"),f=f=a("../util").isBrowser()?window.Backbone:a("backbone"),g=a("../git").Commit,h=a("../git").Branch,i=a("../git").Tag,j=a("../models/commandModel").Command,k=a("../models/commandModel").CommandEntry,l=a("../util/constants").TIME,m=f.Collection.extend({model:g}),n=f.Collection.extend({model:j}),o=f.Collection.extend({model:h}),p=f.Collection.extend({model:i}),q=f.Collection.extend({model:k,localStorage:f.LocalStorage?new f.LocalStorage("CommandEntries"):null}),r=f.Model.extend({defaults:{collection:null},initialize:function(a){a.collection.bind("add",this.addCommand,this),this.buffer=[],this.timeout=null},addCommand:function(a){this.buffer.push(a),this.touchBuffer()},touchBuffer:function(){this.timeout||this.setTimeout()},setTimeout:function(){this.timeout=setTimeout(d.bind(function(){this.sipFromBuffer()},this),l.betweenCommandsDelay)},popAndProcess:function(){for(var a=this.buffer.shift(0);a.get("error")&&this.buffer.length;)a=this.buffer.shift(0);a.get("error")?this.clear():this.processCommand(a)},processCommand:function(b){b.set("status","processing");var c=e.defer();c.promise.then(d.bind(function(){this.setTimeout()},this));var f=b.get("eventName");if(!f)throw new Error("I need an event to trigger when this guy is parsed and ready");var g=a("../app"),h=g.getEventBaton(),i=h.getNumListeners(f);if(!i){var j=a("../util/errors");return b.set("error",new j.GitError({msg:"That command is valid, but not supported in this current environment! Try entering a level or level builder to use that command"})),c.resolve(),void 0}g.getEventBaton().trigger(f,b,c)},clear:function(){clearTimeout(this.timeout),this.timeout=null},sipFromBuffer:function(){return this.buffer.length?(this.popAndProcess(),void 0):(this.clear(),void 0)}});c.CommitCollection=m,c.CommandCollection=n,c.BranchCollection=o,c.TagCollection=p,c.CommandEntryCollection=q,c.CommandBuffer=r},{"../app":11,"../git":20,"../models/commandModel":34,"../util":41,"../util/constants":37,"../util/errors":39,backbone:1,q:9,underscore:10}],34:[function(a,b,c){var d=a("underscore"),e=e=a("../util").isBrowser()?window.Backbone:a("backbone"),f=a("../util/errors"),g=a("../level/parseWaterfall").ParseWaterfall,h=a("../intl"),i=f.CommandProcessError,j=f.GitError,k=f.Warning,l=f.CommandResult,m=e.Model.extend({defaults:{status:"inqueue",rawStr:null,result:"",createTime:null,error:null,warnings:null,parseWaterfall:new g,generalArgs:null,supportedMap:null,options:null,method:null},initialize:function(){this.initDefaults(),this.validateAtInit(),this.on("change:error",this.errorChanged,this),this.get("error")&&this.errorChanged(),this.parseOrCatch()},initDefaults:function(){this.set("generalArgs",[]),this.set("supportedMap",{}),this.set("warnings",[])},replaceDotWithHead:function(a){return a.replace(/\./g,"HEAD")},appendOptionR:function(){var a=this.getOptionsMap()["-r"]||[];this.setGeneralArgs(this.getGeneralArgs().concat(a))},prependOptionR:function(){var a=this.getOptionsMap()["-r"]||[];this.setGeneralArgs(a.concat(this.getGeneralArgs()))},mapDotToHead:function(){var a=this.getGeneralArgs(),b=this.getOptionsMap();a=d.map(a,function(a){return this.replaceDotWithHead(a)},this);var c={};d.each(b,function(a,b){c[b]=d.map(a,function(a){return this.replaceDotWithHead(a)},this)},this),this.setGeneralArgs(a),this.setOptionsMap(c)},deleteOptions:function(a){var b=this.getOptionsMap();d.each(a,function(a){delete b[a]},this),this.setOptionsMap(b)},getGeneralArgs:function(){return this.get("generalArgs")},setGeneralArgs:function(a){this.set("generalArgs",a)},setOptionsMap:function(a){this.set("supportedMap",a)},getOptionsMap:function(){return this.get("supportedMap")},acceptNoGeneralArgs:function(){if(this.getGeneralArgs().length)throw new j({msg:h.str("git-error-no-general-args")})},oneArgImpliedHead:function(a,b){this.validateArgBounds(a,0,1,b),0===a.length&&a.push("HEAD")},twoArgsImpliedHead:function(a,b){this.validateArgBounds(a,1,2,b),1==a.length&&a.push("HEAD")},oneArgImpliedOrigin:function(a){this.validateArgBounds(a,0,1),a.length||a.unshift("origin")},twoArgsForOrigin:function(a){this.validateArgBounds(a,0,2)},validateArgBounds:function(a,b,c,d){var e=void 0===d?"git "+this.get("method"):this.get("method")+" "+d+" ";if(e="with "+e,a.length<b)throw new j({msg:h.str("git-error-args-few",{lower:String(b),what:e})});if(a.length>c)throw new j({msg:h.str("git-error-args-many",{upper:String(c),what:e})})},validateAtInit:function(){if(null===this.get("rawStr"))throw new Error("Give me a string!");this.get("createTime")||this.set("createTime",(new Date).toString())},setResult:function(a){this.set("result",a)},finishWith:function(a){this.set("status","finished"),a.resolve()},addWarning:function(a){this.get("warnings").push(a),this.set("numWarnings",this.get("numWarnings")?this.get("numWarnings")+1:1)},getFormattedWarnings:function(){if(!this.get("warnings").length)return"";var a='<i class="icon-exclamation-sign"></i>';return"<p>"+a+this.get("warnings").join("</p><p>"+a)+"</p>"},parseOrCatch:function(){this.expandShortcuts(this.get("rawStr"));try{this.processInstants()}catch(a){return f.filterError(a),this.set("error",a),void 0}this.parseAll()||this.set("error",new i({msg:'The command "'+this.get("rawStr")+"\" isn't supported, sorry!"}))},errorChanged:function(){var a=this.get("error");a&&(a instanceof i||a instanceof j?this.set("status","error"):a instanceof l?this.set("status","finished"):a instanceof k&&this.set("status","warning"),this.formatError())},formatError:function(){this.set("result",this.get("error").toResult())},expandShortcuts:function(a){a=this.get("parseWaterfall").expandAllShortcuts(a),this.set("rawStr",a)},processInstants:function(){var a=this.get("rawStr");if(!a.length)throw new l({msg:""});this.get("parseWaterfall").processAllInstants(a)},parseAll:function(){var a=this.get("rawStr"),b=this.get("parseWaterfall").parseAll(a);return b?(d.each(b.toSet,function(a,b){this.set(b,a)},this),!0):!1}}),n=e.Model.extend({defaults:{text:""}});c.CommandEntry=n,c.Command=m},{"../intl":24,"../level/parseWaterfall":30,"../util":41,"../util/errors":39,backbone:1,underscore:10}],35:[function(a,b,c){var d=a("underscore"),e=a("../util"),f=a("../util/constants"),g=a("../intl"),h=a("../commands"),i=a("../util/errors"),j=(i.CommandProcessError,i.GitError,i.Warning,i.CommandResult),k=[[/^ls/,function(){throw new j({msg:g.str("ls-command")})}],[/^cd/,function(){throw new j({msg:g.str("cd-command")})}],[/^(locale|locale reset)$/,function(){f.GLOBAL.locale=g.getDefaultLocale();a("../app").getEvents().trigger("localeChanged");throw new j({msg:g.str("locale-reset-command",{locale:g.getDefaultLocale()})})}],[/^show$/,function(){var a=[g.str("show-command"),"<br/>","show commands","show solution","show goal"];throw new j({msg:a.join("\n")})}],[/^locale (\w+)$/,function(b){f.GLOBAL.locale=b[1];a("../app").getEvents().trigger("localeChanged");throw new j({msg:g.str("locale-command",{locale:b[1]})})}],[/^refresh$/,function(){var b=a("../app").getEvents();throw b.trigger("refreshTree"),new j({msg:g.str("refresh-tree-command")})}],[/^rollup (\d+)$/,function(b){var c=a("../app").getEvents();throw c.trigger("rollupCommands",b[1]),new j({msg:"Commands combined!"})}],[/^echo "(.*?)"$|^echo (.*?)$/,function(a){var b=a[1]||a[2];throw new j({msg:b})}],[/^show +commands$/,function(){var a=m(),b=[g.str("show-all-commands"),"<br/>"];throw d.each(a,function(a,c){b.push(c)}),new j({msg:b.join("\n")})}]],l={"reset solved":/^reset solved($|\s)/,help:/^help( +general)?$|^\?$/,reset:/^reset( +--forSolution)?$/,delay:/^delay (\d+)$/,clear:/^clear($|\s)/,"exit level":/^exit level($|\s)/,sandbox:/^sandbox($|\s)/,level:/^level\s?([a-zA-Z0-9]*)/,levels:/^levels($|\s)/,mobileAlert:/^mobile alert($|\s)/,"build level":/^build +level($|\s)/,"export tree":/^export +tree$/,importTreeNow:/^importTreeNow($|\s)/,"import tree":/^import +tree$/,"import level":/^import +level$/,undo:/^undo($|\s)/},m=function(){var b=["mobileAlert"],c=d.extend({},a("../level").regexMap,l);return d.each(h.commands.getRegexMap(),function(a,b){d.each(a,function(a,d){c[b+" "+d]=a})}),d.each(b,function(a){delete c[a]}),c};c.instantCommands=k,c.parse=e.genParseCommand(l,"processSandboxCommand"),c.getOptimisticLevelParse=function(){return e.genParseCommand(a("../level").regexMap,"processLevelCommand")},c.getOptimisticLevelBuilderParse=function(){return e.genParseCommand(a("../level/builder").regexMap,"processLevelBuilderCommand")}},{"../app":11,"../commands":12,"../intl":24,"../level":29,"../level/builder":27,"../util":41,"../util/constants":37,"../util/errors":39,underscore:10}],36:[function(a,b,c){var d=a("underscore"),e=a("q"),f=a("../util").isBrowser()?window.Backbone:a("backbone"),g=a("../util"),h=a("../intl"),i=a("../app"),j=a("../util/errors"),k=a("../visuals/visualization").Visualization,l=a("../level/parseWaterfall").ParseWaterfall,m=(a("../level/disabledMap").DisabledMap,a("../models/commandModel").Command),n=a("../git/gitShim").GitShim,o=a("../views"),p=(o.ModalTerminal,o.ModalAlert,a("../views/builderViews")),q=a("../views/multiView").MultiView,r=f.View.extend({tagName:"div",initialize:function(a){a=a||{},this.options=a,this.initVisualization(a),this.initCommandCollection(a),this.initParseWaterfall(a),this.initGitShim(a),this.initUndoStack(a),a.wait||this.takeControl()
},getDefaultVisEl:function(){return $("#mainVisSpace")[0]},getAnimationTime:function(){return 1050},initVisualization:function(a){this.mainVis=new k({el:a.el||this.getDefaultVisEl()})},initUndoStack:function(){this.undoStack=[]},initCommandCollection:function(){this.commandCollection=i.getCommandUI().commandCollection},initParseWaterfall:function(){this.parseWaterfall=new l},initGitShim:function(){this.gitShim=new n({beforeCB:d.bind(this.beforeCommandCB,this)})},takeControl:function(){i.getEventBaton().stealBaton("commandSubmitted",this.commandSubmitted,this),i.getEventBaton().stealBaton("processSandboxCommand",this.processSandboxCommand,this),i.getEventBaton().stealBaton("levelExited",this.levelExited,this),this.insertGitShim()},releaseControl:function(){i.getEventBaton().releaseBaton("commandSubmitted",this.commandSubmitted,this),i.getEventBaton().releaseBaton("processSandboxCommand",this.processSandboxCommand,this),i.getEventBaton().releaseBaton("levelExited",this.levelExited,this),this.releaseGitShim()},releaseGitShim:function(){this.gitShim&&this.gitShim.removeShim()},insertGitShim:function(){this.gitShim&&this.mainVis.customEvents.on("gitEngineReady",function(){this.gitShim.insertShim()},this)},beforeCommandCB:function(){this.pushUndo()},pushUndo:function(){this.undoStack.push(this.mainVis.gitEngine.printTree())},undo:function(a,b){var c=this.undoStack.pop();return c?(this.mainVis.reset(c),setTimeout(function(){a.finishWith(b)},this.mainVis.getAnimationTime()),void 0):(a.set("error",new j.GitError({msg:h.str("undo-stack-empty")})),b.resolve(),void 0)},commandSubmitted:function(a){i.getEvents().trigger("commandSubmittedPassive",a),g.splitTextCommand(a,function(a){this.commandCollection.add(new m({rawStr:a,parseWaterfall:this.parseWaterfall}))},this)},startLevel:function(b,c){var d=b.get("regexResults")||[],f=d[1]||"",g=i.getLevelArbiter().getLevel(f);if(!g)return b.addWarning(h.str("level-no-id",{id:f})),i.getEventBaton().trigger("commandSubmitted","levels"),b.set("status","error"),c.resolve(),void 0;this.hide(),this.clear();var j=e.defer(),k=a("../level").Level;this.currentLevel=new k({level:g,deferred:j,command:b}),j.promise.then(function(){b.finishWith(c)})},buildLevel:function(b,c){this.hide(),this.clear();var d=e.defer(),f=a("../level/builder").LevelBuilder;this.levelBuilder=new f({deferred:d}),d.promise.then(function(){b.finishWith(c)})},exitLevel:function(a,b){a.addWarning(h.str("level-cant-exit")),a.set("status","error"),b.resolve()},showLevels:function(a,b){var c=e.defer();i.getLevelDropdown().show(c,a),c.promise.done(function(){a.finishWith(b)})},resetSolved:function(a,b){i.getLevelArbiter().resetSolvedMap(),a.addWarning(h.str("solved-map-reset")),a.finishWith(b)},processSandboxCommand:function(a,b){var c={"reset solved":this.resetSolved,undo:this.undo,"help general":this.helpDialog,help:this.helpDialog,reset:this.reset,delay:this.delay,clear:this.clear,"exit level":this.exitLevel,level:this.startLevel,sandbox:this.exitLevel,levels:this.showLevels,mobileAlert:this.mobileAlert,"build level":this.buildLevel,"export tree":this.exportTree,"import tree":this.importTree,importTreeNow:this.importTreeNow,"import level":this.importLevel},d=c[a.get("method")];if(!d)throw new Error("no method for that wut");d.apply(this,[a,b])},hide:function(){this.mainVis.hide()},levelExited:function(){this.show()},show:function(){this.mainVis.show()},importTreeNow:function(a,b){var c=a.get("regexResults")||[];if(c.length<2)a.set("error",new j.GitError({msg:h.str("git-error-options")}));else{var d=c.input.replace(/importTreeNow\s+/g,"");try{this.mainVis.gitEngine.loadTreeFromString(d)}catch(e){a.set("error",new j.GitError({msg:String(e)}))}}a.finishWith(b)},importTree:function(a,b){var c=new p.MarkdownPresenter({previewText:h.str("paste-json"),fillerText:" "});c.deferred.promise.then(d.bind(function(a){try{this.mainVis.gitEngine.loadTree(JSON.parse(a))}catch(b){this.mainVis.reset(),new q({childViews:[{type:"ModalAlert",options:{markdowns:["## Error!","","Something is wrong with that JSON! Here is the error:","",String(b)]}}]})}},this)).fail(function(){}).done(function(){a.finishWith(b)})},importLevel:function(b,c){var f=new p.MarkdownPresenter({previewText:h.str("paste-json"),fillerText:" "});f.deferred.promise.then(d.bind(function(d){var f=a("../level").Level;try{var g=JSON.parse(d),h=e.defer();this.currentLevel=new f({level:g,deferred:h,command:b}),this.hide(),h.promise.then(function(){b.finishWith(c)})}catch(i){new q({childViews:[{type:"ModalAlert",options:{markdowns:["## Error!","","Something is wrong with that level JSON, this happened:","",String(i)]}}]}),b.finishWith(c)}},this)).fail(function(){b.finishWith(c)}).done()},exportTree:function(a,b){var c=JSON.stringify(this.mainVis.gitEngine.exportTree(),null,2),d=new q({childViews:[{type:"MarkdownPresenter",options:{previewText:h.str("share-tree"),fillerText:c,noConfirmCancel:!0}}]});d.getPromise().then(function(){a.finishWith(b)}).done()},clear:function(a,b){i.getEvents().trigger("clearOldCommands"),a&&b&&a.finishWith(b)},mobileAlert:function(a,b){alert(h.str("mobile-alert")),a.finishWith(b)},delay:function(a,b){var c=parseInt(a.get("regexResults")[1],10);setTimeout(function(){a.finishWith(b)},c)},reset:function(a,b){this.mainVis.reset(),this.initUndoStack(),setTimeout(function(){a.finishWith(b)},this.mainVis.getAnimationTime())},helpDialog:function(b,c){var e=new q({childViews:h.getDialog(a("../dialogs/sandbox"))});e.getPromise().then(d.bind(function(){b.finishWith(c)},this)).done()}});c.Sandbox=r},{"../app":11,"../dialogs/sandbox":16,"../git/gitShim":18,"../intl":24,"../level":29,"../level/builder":27,"../level/disabledMap":28,"../level/parseWaterfall":30,"../models/commandModel":34,"../util":41,"../util/errors":39,"../views":48,"../views/builderViews":45,"../views/multiView":50,"../visuals/visualization":61,backbone:1,q:9,underscore:10}],37:[function(a,b,c){var d={betweenCommandsDelay:400},e={isAnimating:!1},f={minZoom:.55,maxZoom:1.25,minWidth:600,minHeight:600},g={arrowHeadSize:8,nodeRadius:17,curveControlPointOffset:50,defaultEasing:"easeInOut",defaultAnimationTime:400,rectFill:"hsb(0.8816909813322127,0.6,1)",headRectFill:"#2831FF",rectStroke:"#FFF",rectStrokeWidth:"3",originDash:"- ",multiBranchY:20,multiTagY:15,upstreamHeadOpacity:.5,upstreamNoneOpacity:.2,edgeUpstreamHeadOpacity:.4,edgeUpstreamNoneOpacity:.15,visBranchStrokeWidth:2,visBranchStrokeColorNone:"#333",defaultNodeFill:"hsba(0.5,0.6,0.7,1)",defaultNodeStrokeWidth:2,defaultNodeStroke:"#FFF",tagFill:"hsb(0,0,0.9)",tagStroke:"#FFF",tagStrokeWidth:"2",orphanNodeFill:"hsb(0.5,0.8,0.7)"};c.GLOBAL=e,c.TIME=d,c.GRAPHICS=g,c.VIEWPORT=f},{}],38:[function(a){var b=a("underscore"),c={Tree:a("../visuals/tree"),Visuals:a("../visuals"),Git:a("../git"),CommandModel:a("../models/commandModel"),Levels:a("../graph/treeCompare"),Constants:a("../util/constants"),Commands:a("../commands"),Collections:a("../models/collections"),Async:a("../visuals/animation"),AnimationFactory:a("../visuals/animation/animationFactory"),Main:a("../app"),HeadLess:a("../git/headless"),Q:{Q:a("q")},RebaseView:a("../views/rebaseView"),Views:a("../views"),MultiView:a("../views/multiView"),ZoomLevel:a("../util/zoomLevel"),VisBranch:a("../visuals/visBranch"),TreeCompare:a("../graph/treeCompare"),Level:a("../level"),Sandbox:a("../sandbox/"),GitDemonstrationView:a("../views/gitDemonstrationView"),Markdown:a("markdown"),LevelDropdownView:a("../views/levelDropdownView"),BuilderViews:a("../views/builderViews"),LevelArbiter:a("../level/arbiter"),Intl:a("../intl")};b.each(c,function(a){for(var b in a)window["debug_"+b]=a[b]}),$(document).ready(function(){window.debug_events=c.Main.getEvents(),window.debug_eventBaton=c.Main.getEventBaton(),window.debug_sandbox=c.Main.getSandbox(),window.debug_modules=c,window.debug_levelDropdown=c.Main.getLevelDropdown(),window.debug_under=b,window.debug_copyTree=function(){return c.Main.getSandbox().mainVis.gitEngine.printAndCopyTree()}})},{"../app":11,"../commands":12,"../git":20,"../git/headless":19,"../graph/treeCompare":22,"../intl":24,"../level":29,"../level/arbiter":26,"../models/collections":33,"../models/commandModel":34,"../sandbox/":36,"../util/constants":37,"../util/zoomLevel":44,"../views":48,"../views/builderViews":45,"../views/gitDemonstrationView":47,"../views/levelDropdownView":49,"../views/multiView":50,"../views/rebaseView":51,"../visuals":54,"../visuals/animation":53,"../visuals/animation/animationFactory":52,"../visuals/tree":55,"../visuals/visBranch":57,markdown:7,q:9,underscore:10}],39:[function(a,b,c){var d=(a("underscore"),a("backbone")),e=d.Model.extend({defaults:{type:"MyError",msg:"Unknown Error"},toString:function(){return this.get("type")+": "+this.get("msg")},getMsg:function(){return this.get("msg")||"Unknown Error"},toResult:function(){return this.get("msg").length?"<p>"+this.get("msg").replace(/\n/g,"</p><p>")+"</p>":""}}),f=c.CommandProcessError=e.extend({defaults:{type:"Command Process Error"}}),g=c.CommandResult=e.extend({defaults:{type:"Command Result"}}),h=c.Warning=e.extend({defaults:{type:"Warning"}}),i=c.GitError=e.extend({defaults:{type:"Git Error"}}),j=function(a){if(!(a instanceof f||a instanceof i||a instanceof g||a instanceof h))throw a};c.filterError=j},{backbone:1,underscore:10}],40:[function(a,b,c){function d(a){this.eventMap={},this.options=a||{}}var e=a("underscore");d.prototype.stealBaton=function(a,b,c){if(!a)throw new Error("need name");if(!b)throw new Error("need func!");var d=this.eventMap[a]||[];d.push({func:b,context:c}),this.eventMap[a]=d},d.prototype.sliceOffArgs=function(a,b){for(var c=[],d=a;d<b.length;d++)c.push(b[d]);return c},d.prototype.trigger=function(a){var b=this.sliceOffArgs(1,arguments),c=this.eventMap[a];if(!c||!c.length)return console.warn("no listeners for",a),void 0;var d=c.slice(-1)[0];d.func.apply(d.context,b)},d.prototype.getNumListeners=function(a){var b=this.eventMap[a]||[];return b.length},d.prototype.getListenersThrow=function(a){var b=this.eventMap[a];if(!b||!b.length)throw new Error("no one has that baton!"+a);return b},d.prototype.passBatonBackSoft=function(a,b,c,d){try{return this.passBatonBack(a,b,c,d)}catch(e){}},d.prototype.passBatonBack=function(a,b,c,d){var f,g=this.getListenersThrow(a);if(e.each(g,function(a,d){0!==d&&a.func===b&&a.context===c&&(f=d-1)},this),void 0===f)throw new Error("you are the last baton holder! or i didnt find you");var h=g[f];h.func.apply(h.context,d)},d.prototype.releaseBaton=function(a,b,c){var d=this.getListenersThrow(a),f=[],g=!1;if(e.each(d,function(a){a.func===b&&a.context===c?(g&&(console.warn("woah duplicates!!!"),console.log(d)),g=!0):f.push(a)},this),!g)throw console.log("did not find that function",b,c,a,arguments),console.log(this.eventMap),new Error("cant releasebaton if yu dont have it");this.eventMap[a]=f},c.EventBaton=d},{underscore:10}],41:[function(a,b,c){{var d=a("underscore");a("../util/constants")}c.parseQueryString=function(a){var b={};return a.replace(new RegExp("([^?=&]+)(=([^&]*))?","g"),function(a,c,d,e){b[c]=e}),b},c.isBrowser=function(){var a="undefined"!==String(typeof window);return a},c.splitTextCommand=function(a,b,c){b=d.bind(b,c),d.each(a.split(";"),function(a,c){a=d.escape(a),a=a.replace(/^(\s+)/,"").replace(/(\s+)$/,"").replace(/&quot;/g,'"').replace(/&#x27;/g,"'"),c>0&&!a.length||b(a)})},c.genParseCommand=function(a,b){return function(c){var e,f;return d.each(a,function(a,b){var d=a.exec(c);d&&(e=b,f=d)}),e?{toSet:{eventName:b,method:e,regexResults:f}}:!1}}},{"../util/constants":37,underscore:10}],42:[function(a,b,c){function d(a){this.events=a.events||e.clone(f.Events),this.aliasMap=a.aliasMap||{},a.wait||this.listen()}var e=a("underscore"),f=a("backbone"),g=a("../app"),h=function(a){var b={37:"left",38:"up",39:"right",40:"down",27:"esc",13:"enter"};return b[a]};d.prototype.listen=function(){this.listening||(this.listening=!0,g.getEventBaton().stealBaton("docKeydown",this.keydown,this))},d.prototype.mute=function(){this.listening=!1,g.getEventBaton().releaseBaton("docKeydown",this.keydown,this)},d.prototype.keydown=function(a){var b=a.which||a.keyCode,c=h(b);void 0!==c&&this.fireEvent(c,a)},d.prototype.fireEvent=function(a,b){a=this.aliasMap[a]||a,this.events.trigger(a,b)},d.prototype.passEventBack=function(a){g.getEventBaton().passBatonBackSoft("docKeydown",this.keydown,this,[a])},c.KeyboardListener=d,c.mapKeycodeToKey=h},{"../app":11,backbone:1,underscore:10}],43:[function(a,b,c){c.mock=function(a){var b={},c=function(){};for(var d in a.prototype)b[d]=c;return b}},{}],44:[function(a,b,c){function d(){return window.outerWidth&&window.innerWidth?window.outerWidth/window.innerWidth:(e&&(console.warn("Can't detect zoom level correctly :-/"),e=!1),1)}var e=(a("underscore"),!0),f=!0,g=function(a,b){var c=0;setInterval(function(){var e=d();if(e!==c){if(f)return f=!1,void 0;c=e,a.apply(b,[e])}else f=!0},500)};c.setupZoomPoll=g,c.detectZoom=d},{underscore:10}],45:[function(a,b,c){var d=a("underscore"),e=a("q"),f=(a("../util").isBrowser()?window.Backbone:a("backbone"),a("../util"),a("../intl"),a("../util/keyboard").KeyboardListener,a("../views")),g=f.ModalTerminal,h=f.ContainedBase,i=h.extend({tagName:"div",className:"textGrabber box vertical",template:d.template($("#text-grabber").html()),initialize:function(a){a=a||{},this.JSON={helperText:a.helperText||"Enter some text"},this.container=a.container||new g({title:"Enter some text"}),this.render(),a.initialText&&this.setText(a.initialText),a.wait||this.show()},getText:function(){return this.$("textarea").val()},setText:function(a){this.$("textarea").val(a)}}),j=h.extend({tagName:"div",className:"markdownGrabber box horizontal",template:d.template($("#markdown-grabber-view").html()),events:{"keyup textarea":"keyup"},initialize:function(a){if(a=a||{},this.deferred=a.deferred||e.defer(),a.fromObj&&(a.fillerText=a.fromObj.options.markdowns.join("\n")),this.JSON={previewText:a.previewText||"Preview",fillerText:a.fillerText||"## Enter some markdown!\n\n\n"},this.container=a.container||new g({title:a.title||"Enter some markdown"}),this.render(),!a.withoutButton){var b=e.defer();b.promise.then(d.bind(this.confirmed,this)).fail(d.bind(this.cancelled,this)).done();{new f.ConfirmCancelView({deferred:b,destination:this.getDestination()})}}this.updatePreview(),a.wait||this.show()},confirmed:function(){this.die(),this.deferred.resolve(this.getRawText())},cancelled:function(){this.die(),this.deferred.resolve()},keyup:function(){this.throttledPreview||(this.throttledPreview=d.throttle(d.bind(this.updatePreview,this),500)),this.throttledPreview()},getRawText:function(){return this.$("textarea").val()},exportToArray:function(){return this.getRawText().split("\n")},getExportObj:function(){return{markdowns:this.exportToArray()}},updatePreview:function(){var b=this.getRawText(),c=a("markdown").markdown.toHTML(b);this.$("div.insidePreview").html(c)}}),k=h.extend({tagName:"div",className:"markdownPresenter box vertical",template:d.template($("#markdown-presenter").html()),initialize:function(a){if(a=a||{},this.deferred=a.deferred||e.defer(),this.JSON={previewText:a.previewText||"Here is something for you",fillerText:a.fillerText||"# Yay"},this.container=new g({title:"Check this out..."}),this.render(),!a.noConfirmCancel){var b=new f.ConfirmCancelView({destination:this.getDestination()});b.deferred.promise.then(d.bind(function(){this.deferred.resolve(this.grabText())},this)).fail(d.bind(function(){this.deferred.reject()},this)).done(d.bind(this.die,this))}this.show()},grabText:function(){return this.$("textarea").val()}}),l=h.extend({tagName:"div",className:"demonstrationBuilder box vertical",template:d.template($("#demonstration-builder").html()),events:{"click div.testButton":"testView"},initialize:function(a){if(a=a||{},this.deferred=a.deferred||e.defer(),a.fromObj){var b=a.fromObj.options;a=d.extend({},a,b,{beforeMarkdown:b.beforeMarkdowns.join("\n"),afterMarkdown:b.afterMarkdowns.join("\n")})}this.JSON={},this.container=new g({title:"Demonstration Builder"}),this.render(),this.beforeMarkdownView=new j({container:this,withoutButton:!0,fillerText:a.beforeMarkdown,previewText:"Before demonstration Markdown"}),this.beforeCommandView=new i({container:this,helperText:"The git command(s) to set up the demonstration view (before it is displayed)",initialText:a.beforeCommand||"git checkout -b bugFix"}),this.commandView=new i({container:this,helperText:"The git command(s) to demonstrate to the reader",initialText:a.command||"git commit"}),this.afterMarkdownView=new j({container:this,withoutButton:!0,fillerText:a.afterMarkdown,previewText:"After demonstration Markdown"});{var c=e.defer();new f.ConfirmCancelView({deferred:c,destination:this.getDestination()})}c.promise.then(d.bind(this.confirmed,this)).fail(d.bind(this.cancelled,this)).done()},testView:function(){var b=a("../views/multiView").MultiView;new b({childViews:[{type:"GitDemonstrationView",options:this.getExportObj()}]})},getExportObj:function(){return{beforeMarkdowns:this.beforeMarkdownView.exportToArray(),afterMarkdowns:this.afterMarkdownView.exportToArray(),command:this.commandView.getText(),beforeCommand:this.beforeCommandView.getText()}},confirmed:function(){this.die(),this.deferred.resolve(this.getExportObj())},cancelled:function(){this.die(),this.deferred.resolve()},getInsideElement:function(){return this.$(".insideBuilder")[0]}}),m=h.extend({tagName:"div",className:"multiViewBuilder box vertical",template:d.template($("#multi-view-builder").html()),typeToConstructor:{ModalAlert:j,GitDemonstrationView:l},events:{"click div.deleteButton":"deleteOneView","click div.testButton":"testOneView","click div.editButton":"editOneView","click div.testEntireView":"testEntireView","click div.addView":"addView","click div.saveView":"saveView","click div.cancelView":"cancel"},initialize:function(a){a=a||{},this.deferred=a.deferred||e.defer(),this.multiViewJSON=a.multiViewJSON||{},this.JSON={views:this.getChildViews(),supportedViews:d.keys(this.typeToConstructor)},this.container=new g({title:"Build a MultiView!"}),this.render(),this.show()},saveView:function(){this.hide(),this.deferred.resolve(this.multiViewJSON)},cancel:function(){this.hide(),this.deferred.resolve()},addView:function(a){var b=a.target,c=$(b).attr("data-type"),f=e.defer(),g=this.typeToConstructor[c],h=new g({deferred:f});f.promise.then(d.bind(function(){var a={type:c,options:h.getExportObj()};this.addChildViewObj(a)},this)).fail(function(){}).done()},testOneView:function(b){var c=b.target,d=$(c).attr("data-index"),e=this.getChildViews()[d],f=a("../views/multiView").MultiView;new f({childViews:[e]})},testEntireView:function(){var b=a("../views/multiView").MultiView;new b({childViews:this.getChildViews()})},editOneView:function(a){var b=a.target,c=$(b).attr("data-index"),f=$(b).attr("data-type"),g=e.defer(),h=new this.typeToConstructor[f]({deferred:g,fromObj:this.getChildViews()[c]});g.promise.then(d.bind(function(){var a={type:f,options:h.getExportObj()},b=this.getChildViews();b[c]=a,this.setChildViews(b)},this)).fail(function(){}).done()},deleteOneView:function(a){var b=a.target,c=$(b).attr("data-index"),d=this.getChildViews(),e=d.slice(0,c).concat(d.slice(c+1));this.setChildViews(e),this.update()},addChildViewObj:function(a){var b=this.getChildViews();b.push(a),this.setChildViews(b),this.update()},setChildViews:function(a){this.multiViewJSON.childViews=a},getChildViews:function(){return this.multiViewJSON.childViews||[]},update:function(){this.JSON.views=this.getChildViews(),this.renderAgain()}});c.MarkdownGrabber=j,c.DemonstrationBuilder=l,c.TextGrabber=i,c.MultiViewBuilder=m,c.MarkdownPresenter=k},{"../intl":24,"../util":41,"../util/keyboard":42,"../views":48,"../views/multiView":50,backbone:1,markdown:7,q:9,underscore:10}],46:[function(a,b,c){var d=a("underscore"),e=e=a("../util").isBrowser()?window.Backbone:a("backbone"),f=a("../models/collections").CommandEntryCollection,g=a("../app"),h=a("../models/commandModel").Command,i=a("../models/commandModel").CommandEntry,j=a("../util/errors"),k=j.Warning,l=(a("../util"),a("../log")),m=a("../util/keyboard"),n=e.View.extend({initialize:function(){g.getEvents().on("commandSubmittedPassive",this.addToCommandHistory,this),this.commands=new f,this.commands.fetch({success:d.bind(function(){var a=[];this.commands.each(function(b){a.push(b)}),a.reverse(),this.commands.reset(),d.each(a,function(a){this.commands.add(a)},this)},this)}),this.index=-1,this.commandParagraph=this.$("#prompt p.command")[0],this.commandCursor=this.$("#prompt span.cursor")[0],this.focus(),g.getEvents().on("rollupCommands",this.rollupCommands,this),g.getEventBaton().stealBaton("keydown",this.onKeyDown,this),g.getEventBaton().stealBaton("keyup",this.onKeyUp,this)},events:{"blur #commandTextField":"hideCursor","focus #commandTextField":"showCursor"},blur:function(){this.hideCursor()},focus:function(){this.$("#commandTextField").focus(),this.showCursor()},hideCursor:function(){this.toggleCursor(!1)},showCursor:function(){this.toggleCursor(!0)},toggleCursor:function(a){$(this.commandCursor).toggleClass("shown",a)},onKeyDown:function(a){var b=a.target;this.updatePrompt(b)},onKeyUp:function(a){this.onKeyDown(a);var b={enter:d.bind(function(){this.submit()},this),up:d.bind(function(){this.commandSelectChange(1)},this),down:d.bind(function(){this.commandSelectChange(-1)},this)},c=m.mapKeycodeToKey(a.which||a.keyCode);void 0!==b[c]&&(a.preventDefault(),b[c](),this.onKeyDown(a))},badHtmlEncode:function(a){return a.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/</g,"&lt;").replace(/ /g,"&nbsp;").replace(/\n/g,"")},updatePrompt:function(a){a=a||{};var b=$("#commandTextField").val(),c=this.badHtmlEncode(b);this.commandParagraph.innerHTML=c,this.cursorUpdate(b.length,a.selectionStart,a.selectionEnd),g.getEvents().trigger("commandScrollDown")},cursorUpdate:function(b,c,d){(void 0===c||void 0===d)&&(c=Math.max(b-1,0),d=b);var e=a("../util/zoomLevel").detectZoom(),f=10*e,g=22*e,h=$(this.commandParagraph).width(),i=h/f,j=Math.min(Math.max(1,d-c),i),k=String(j*f)+"px",l=String(f*(c%i))+"px",m=String(Math.floor(c/i)*g)+"px";$(this.commandCursor).css({width:k,left:l,top:m})},commandSelectChange:function(a){if(this.index+=a,this.index>=this.commands.length||this.index<0)return this.clear(),this.index=-1,void 0;var b=this.commands.toArray()[this.index].get("text");this.setTextField(b)},clearLocalStorage:function(){this.commands.each(function(a){e.sync("delete",a,function(){})},this)},setTextField:function(a){this.$("#commandTextField").val(a)},clear:function(){this.setTextField("")},submit:function(){var a=this.$("#commandTextField").val().replace("\n","");this.clear(),this.submitCommand(a),this.index=-1},rollupCommands:function(a){var b=this.commands.toArray().slice(1,Number(a)+1);b.reverse();var c="";d.each(b,function(a){c+=a.get("text")+";"},this);var f=new i({text:c});this.commands.unshift(f),e.sync("create",f,function(){})},addToCommandHistory:function(a){var b=a.length&&-1===this.index||a.length&&-1!==this.index&&this.commands.toArray()[this.index].get("text")!==a;if(b){var c=new i({text:a});this.commands.unshift(c),e.sync("create",c,function(){}),this.commands.length>100&&this.clearLocalStorage(),l.commandEntered(a)}},submitCommand:function(a){g.getEventBaton().trigger("commandSubmitted",a)}}),o=e.View.extend({tagName:"div",model:h,template:d.template($("#command-template").html()),events:{click:"clicked"},clicked:function(){},initialize:function(){this.model.bind("change",this.wasChanged,this),this.model.bind("destroy",this.remove,this)},wasChanged:function(a,b){var c=b.changes,e=d.keys(c);0===d.difference(e,["status"]).length?this.updateStatus():this.render()},updateStatus:function(){var a=["inqueue","processing","finished"],b={};d.each(a,function(a){b[a]=!1}),b[this.model.get("status")]=!0;var c=this.$("p.commandLine");d.each(b,function(a,b){c.toggleClass(b,a)})},render:function(){var a=d.extend({resultType:"",result:"",formattedWarnings:this.model.getFormattedWarnings()},this.model.toJSON());return this.$el.html(this.template(a)),this},remove:function(){$(this.el).hide()}}),p=e.View.extend({initialize:function(a){this.collection=a.collection,this.collection.on("add",this.addOne,this),this.collection.on("reset",this.addAll,this),this.collection.on("all",this.render,this),this.collection.on("change",this.scrollDown,this),g.getEvents().on("commandScrollDown",this.scrollDown,this),g.getEvents().on("clearOldCommands",this.clearOldCommands,this)},addWarning:function(a){var b=new k({msg:a}),c=new h({error:b,rawStr:"Warning:"});this.collection.add(c)},clearOldCommands:function(){var a=[];this.collection.each(function(b){"inqueue"!==b.get("status")&&"processing"!==b.get("status")&&a.push(b)},this),d.each(a,function(a){a.destroy()},this),this.scrollDown()},scrollDown:function(){var a=$("#commandDisplay")[0],b=$("#terminal")[0],c=a.clientHeight>b.clientHeight||$(window).height()<a.clientHeight;$(b).toggleClass("scrolling",c),c&&(b.scrollTop=b.scrollHeight)},addOne:function(a){var b=new o({model:a});this.$("#commandDisplay").append(b.render().el),this.scrollDown()},addAll:function(){this.collection.each(this.addOne)}});c.CommandPromptView=n,c.CommandLineHistoryView=p},{"../app":11,"../log":31,"../models/collections":33,"../models/commandModel":34,"../util":41,"../util/errors":39,"../util/keyboard":42,"../util/zoomLevel":44,backbone:1,underscore:10}],47:[function(a,b,c){var d=a("underscore"),e=a("q"),f=a("../util").isBrowser()?window.Backbone:a("backbone"),g=a("../util"),h=a("../util/keyboard").KeyboardListener,i=a("../models/commandModel").Command,j=a("../views").ModalTerminal,k=a("../views").ContainedBase,l=a("../visuals/visualization").Visualization,m=a("../git/headless"),n=k.extend({tagName:"div",className:"gitDemonstrationView box horizontal",template:d.template($("#git-demonstration-view").html()),events:{"click div.command > p.uiButton":"positive"},initialize:function(b){b=b||{},this.options=b,this.JSON=d.extend({beforeMarkdowns:["## Git Commits","","Awesome!"],command:"git commit",afterMarkdowns:["Now you have seen it in action","","Go ahead and try the level!"]},b);var c=function(b){return a("markdown").markdown.toHTML(b.join("\n"))};this.JSON.beforeHTML=c(this.JSON.beforeMarkdowns),this.JSON.afterHTML=c(this.JSON.afterMarkdowns),this.container=new j({title:b.title||"Git Demonstration"}),this.render(),this.checkScroll(),this.navEvents=d.clone(f.Events),this.navEvents.on("positive",this.positive,this),this.navEvents.on("negative",this.negative,this),this.keyboardListener=new h({events:this.navEvents,aliasMap:{enter:"positive",right:"positive",left:"negative"},wait:!0}),this.visFinished=!1,this.initVis(),b.wait||this.show()},receiveMetaNav:function(a,b){a.navEvents.on("positive",this.positive,this),this.metaContainerView=b},checkScroll:function(){var a=this.$("div.demonstrationText").children(),b=d.map(a,function(a){return a.clientHeight}),c=d.reduce(b,function(a,b){return a+b});c<this.$("div.demonstrationText").height()&&this.$("div.demonstrationText").addClass("noLongText")},dispatchBeforeCommand:function(){if(this.options.beforeCommand){var a=e.defer();m.getTreeQuick(this.options.beforeCommand,a),a.promise.then(d.bind(function(a){this.mainVis.gitEngine.loadTree(a),this.mainVis.gitVisuals.refreshTreeHarsh()},this))}},takeControl:function(){this.hasControl=!0,this.keyboardListener.listen(),this.metaContainerView&&this.metaContainerView.lock()},releaseControl:function(){this.hasControl&&(this.hasControl=!1,this.keyboardListener.mute(),this.metaContainerView&&this.metaContainerView.unlock())},reset:function(){this.mainVis.reset(),this.dispatchBeforeCommand(),this.demonstrated=!1,this.$el.toggleClass("demonstrated",!1),this.$el.toggleClass("demonstrating",!1)},positive:function(){!this.demonstrated&&this.hasControl&&(this.demonstrated=!0,this.demonstrate())},demonstrate:function(){this.$el.toggleClass("demonstrating",!0);var a=e.defer();this.dispatchCommand(this.JSON.command,a),a.promise.then(d.bind(function(){this.$el.toggleClass("demonstrating",!1),this.$el.toggleClass("demonstrated",!0),this.releaseControl()},this))},negative:function(a){this.$el.hasClass("demonstrating")||this.keyboardListener.passEventBack(a)},dispatchCommand:function(a,b){var c=[];g.splitTextCommand(a,function(a){c.push(new i({rawStr:a}))},this);var f=e.defer(),h=f.promise;d.each(c,function(a){h=h.then(d.bind(function(){var b=e.defer();return this.mainVis.gitEngine.dispatch(a,b),b.promise},this)),h=h.then(function(){return e.delay(300)})},this),h=h.then(function(){b.resolve()}),f.resolve()},tearDown:function(){this.mainVis.tearDown(),n.__super__.tearDown.apply(this)},hide:function(){this.releaseControl(),this.reset(),this.visFinished&&(this.mainVis.setTreeIndex(-1),this.mainVis.setTreeOpacity(0)),this.shown=!1,n.__super__.hide.apply(this)},show:function(){this.takeControl(),this.visFinished&&setTimeout(d.bind(function(){this.shown&&(this.mainVis.setTreeIndex(300),this.mainVis.showHarsh())},this),1*this.getAnimationTime()),this.shown=!0,n.__super__.show.apply(this)},die:function(){this.visFinished&&n.__super__.die.apply(this)},initVis:function(){this.mainVis=new l({el:this.$("div.visHolder div.visHolderInside")[0],noKeyboardInput:!0,noClick:!0,smallCanvas:!0,zIndex:-1}),this.mainVis.customEvents.on("paperReady",d.bind(function(){this.visFinished=!0,this.dispatchBeforeCommand(),this.shown&&this.show()},this))}});c.GitDemonstrationView=n},{"../git/headless":19,"../models/commandModel":34,"../util":41,"../util/keyboard":42,"../views":48,"../visuals/visualization":61,backbone:1,markdown:7,q:9,underscore:10}],48:[function(a,b,c){var d=a("__browserify_process"),e=a("underscore"),f=a("q"),g=a("../util").isBrowser()?window.Backbone:a("backbone"),h=a("../app"),i=a("../intl"),j=a("../log"),k=a("../util/constants"),l=a("../util/keyboard").KeyboardListener,m=(a("../util/errors").GitError,g.View.extend({getDestination:function(){return this.destination||this.container.getInsideElement()},tearDown:function(){this.$el.remove(),this.container&&this.container.tearDown()},renderAgain:function(a){a=a||this.template(this.JSON),this.$el.html(a)},render:function(a){this.renderAgain(a);var b=this.getDestination();$(b).append(this.el)}})),n=m.extend({resolve:function(){this.deferred.resolve()},reject:function(){this.deferred.reject()}}),o=m.extend({positive:function(){this.navEvents.trigger("positive")},exit:function(){this.navEvents.trigger("exit")},negative:function(){this.navEvents.trigger("negative")}}),p=m.extend({getAnimationTime:function(){return 700},show:function(){this.container.show()},hide:function(){this.container.hide()},die:function(){this.hide(),setTimeout(e.bind(function(){this.tearDown()},this),1.1*this.getAnimationTime())}}),q=p.extend({tagName:"a",className:"generalButton uiButton",template:e.template($("#general-button").html()),events:{click:"click"},initialize:function(a){a=a||{},this.navEvents=a.navEvents||e.clone(g.Events),this.destination=a.destination,this.destination||(this.container=new u),this.JSON={buttonText:a.buttonText||"General Button",wantsWrapper:void 0!==a.wantsWrapper?a.wantsWrapper:!0},this.render(),this.container&&!a.wait&&this.show()},click:function(){this.clickFunc||(this.clickFunc=e.throttle(e.bind(this.sendClick,this),500)),this.clickFunc()},sendClick:function(){this.navEvents.trigger("click")}}),r=n.extend({tagName:"div",className:"confirmCancelView box horizontal justify",template:e.template($("#confirm-cancel-template").html()),events:{"click .confirmButton":"resolve","click .cancelButton":"reject"},initialize:function(a){if(!a.destination)throw new Error("needmore");this.destination=a.destination,this.deferred=a.deferred||f.defer(),this.JSON={confirm:a.confirm||"Confirm",cancel:a.cancel||"Cancel"},this.render()}}),s=o.extend({tagName:"div",className:"leftRightView box horizontal center",template:e.template($("#left-right-template").html()),events:{"click .left":"negative","click .exit":"exit","click .right":"positive"},exit:function(){this.pipeEvents.trigger("exit"),s.__super__.exit.apply(this)
},positive:function(){this.pipeEvents.trigger("positive"),s.__super__.positive.apply(this)},negative:function(){this.pipeEvents.trigger("negative"),s.__super__.negative.apply(this)},initialize:function(a){if(!a.destination||!a.events)throw new Error("needmore");this.destination=a.destination,this.pipeEvents=a.events,this.navEvents=e.clone(g.Events),this.JSON={showLeft:void 0===a.showLeft?!0:a.showLeft,lastNav:void 0===a.lastNav?!1:a.lastNav},this.render()}}),t=g.View.extend({tagName:"div",className:"modalView box horizontal center transitionOpacityLinear",template:e.template($("#modal-view-template").html()),getAnimationTime:function(){return 700},initialize:function(){this.shown=!1,this.render()},render:function(){this.$el.html(this.template({})),$("body").append(this.el)},stealKeyboard:function(){h.getEventBaton().stealBaton("keydown",this.onKeyDown,this),h.getEventBaton().stealBaton("keyup",this.onKeyUp,this),h.getEventBaton().stealBaton("windowFocus",this.onWindowFocus,this),h.getEventBaton().stealBaton("documentClick",this.onDocumentClick,this),$("#commandTextField").blur()},releaseKeyboard:function(){h.getEventBaton().releaseBaton("keydown",this.onKeyDown,this),h.getEventBaton().releaseBaton("keyup",this.onKeyUp,this),h.getEventBaton().releaseBaton("windowFocus",this.onWindowFocus,this),h.getEventBaton().releaseBaton("documentClick",this.onDocumentClick,this),h.getEventBaton().trigger("windowFocus")},onWindowFocus:function(){},onDocumentClick:function(){},onKeyDown:function(a){a.preventDefault()},onKeyUp:function(a){a.preventDefault()},show:function(){this.toggleZ(!0),d.nextTick(e.bind(function(){this.toggleShow(!0)},this))},hide:function(){this.toggleShow(!1),setTimeout(e.bind(function(){this.shown||this.toggleZ(!1)},this),this.getAnimationTime())},getInsideElement:function(){return this.$(".contentHolder")},toggleShow:function(a){this.shown!==a&&(a?this.stealKeyboard():this.releaseKeyboard(),this.shown=a,this.$el.toggleClass("show",a))},toggleZ:function(a){this.$el.toggleClass("inFront",a)},tearDown:function(){this.$el.html(""),$("body")[0].removeChild(this.el)}}),u=p.extend({tagName:"div",className:"modalTerminal box flex1",template:e.template($("#terminal-window-template").html()),events:{"click div.inside":"onClick"},initialize:function(a){a=a||{},this.navEvents=a.events||e.clone(g.Events),this.container=new t,this.JSON={title:a.title||"Heed This Warning!"},this.render()},onClick:function(){this.navEvents.trigger("click")},getInsideElement:function(){return this.$(".inside")}}),v=p.extend({tagName:"div",template:e.template($("#modal-alert-template").html()),initialize:function(a){a=a||{},this.JSON={title:a.title||"Something to say",text:a.text||"Here is a paragraph",markdown:a.markdown},a.markdowns&&(this.JSON.markdown=a.markdowns.join("\n")),this.container=new u({title:"Alert!"}),this.render(),a.wait||this.show()},render:function(){var b=this.JSON.markdown?a("markdown").markdown.toHTML(this.JSON.markdown):this.template(this.JSON);v.__super__.render.apply(this,[b])}}),w=g.View.extend({initialize:function(a){a=a||{},this.deferred=a.deferred||f.defer(),this.modalAlert=new v(e.extend({},{markdown:"#you sure?"},a));var b=f.defer();this.buttonDefer=b,this.confirmCancel=new r({deferred:b,destination:this.modalAlert.getDestination()}),b.promise.then(this.deferred.resolve).fail(this.deferred.reject).done(e.bind(function(){this.close()},this)),this.navEvents=e.clone(g.Events),this.navEvents.on("positive",this.positive,this),this.navEvents.on("negative",this.negative,this),this.keyboardListener=new l({events:this.navEvents,aliasMap:{enter:"positive",esc:"negative"}}),a.wait||this.modalAlert.show()},positive:function(){this.buttonDefer.resolve()},negative:function(){this.buttonDefer.reject()},getAnimationTime:function(){return 700},show:function(){this.modalAlert.show()},hide:function(){this.modalAlert.hide()},getPromise:function(){return this.deferred.promise},close:function(){this.keyboardListener.mute(),this.modalAlert.die()}}),x=w.extend({initialize:function(b){b=b||{};var c=b.nextLevel?i.getName(b.nextLevel):"",d=i.getDialog(a("../dialogs/nextLevel"))[0].options.markdowns,f=d.join("\n");f=i.template(f,{numCommands:b.numCommands,best:b.best}),f=b.numCommands<=b.best?f+"\n\n"+i.str("finish-dialog-win"):f+"\n\n"+i.str("finish-dialog-lose",{best:b.best}),f+="\n\n",f+=b.nextLevel?i.str("finish-dialog-next",{nextLevel:c}):i.str("finish-dialog-finished"),b=e.extend({},b,{markdown:f}),x.__super__.initialize.apply(this,[b])}}),y=g.View.extend({initialize:function(){this.$body=$("body"),h.getEvents().on("vcsModeChange",this.updateMode,this)},updateMode:function(a){a=a||{};var b="git"===a.mode;this.$body.toggleClass("gitMode",b),this.$body.toggleClass("hgMode",!b)}}),z=g.View.extend({initialize:function(){this.grabBatons(),this.modalAlert=new v({markdowns:this.markdowns}),this.modalAlert.show()},grabBatons:function(){h.getEventBaton().stealBaton(this.eventBatonName,this.batonFired,this)},releaseBatons:function(){h.getEventBaton().releaseBaton(this.eventBatonName,this.batonFired,this)},finish:function(){this.releaseBatons(),this.modalAlert.die()}}),A=z.extend({initialize:function(a){this.eventBatonName="windowSizeCheck",this.markdowns=["## That window size is not supported :-/","Please resize your window back to a supported size","","(and of course, pull requests to fix this are appreciated :D)"],A.__super__.initialize.apply(this,[a])},batonFired:function(a){a.w>k.VIEWPORT.minWidth&&a.h>k.VIEWPORT.minHeight&&this.finish()}}),B=z.extend({initialize:function(a){if(!a||!a.level)throw new Error("need level");this.eventBatonName="zoomChange",this.markdowns=["## That zoom level of "+a.level+" is not supported :-/","Please zoom back to a supported zoom level with Ctrl + and Ctrl -","","(and of course, pull requests to fix this are appreciated :D)"],B.__super__.initialize.apply(this,[a])},batonFired:function(a){a<=k.VIEWPORT.maxZoom&&a>=k.VIEWPORT.minZoom&&this.finish()}}),C=m.extend({tagName:"div",className:"levelToolbarHolder",template:e.template($("#level-toolbar-template").html()),initialize:function(a){a=a||{},this.JSON={name:a.name||"Some level! (unknown name)"},this.beforeDestination=$($("#commandLineHistory div.toolbar")[0]),this.render(),a.wait||d.nextTick(e.bind(this.show,this))},getAnimationTime:function(){return 700},render:function(){var a=this.template(this.JSON);this.$el.html(a),this.beforeDestination.after(this.el)},die:function(){this.hide(),setTimeout(e.bind(function(){this.tearDown()},this),this.getAnimationTime())},hide:function(){this.$("div.toolbar").toggleClass("hidden",!0)},show:function(){this.$("div.toolbar").toggleClass("hidden",!1)}}),D=m.extend({tagName:"div",className:"helperBar transitionAll",template:e.template($("#helper-bar-template").html()),events:{"click a":"onClick"},onClick:function(a){var b=a.target,c=$(b).attr("data-id"),d="on"+c[0].toUpperCase()+c.slice(1)+"Click";this[d].call(this)},show:function(){this.$el.toggleClass("show",!0)},hide:function(){this.$el.toggleClass("show",!1),this.deferred&&this.deferred.resolve()},getItems:function(){return[]},setupChildren:function(){},fireCommand:function(a){h.getEventBaton().trigger("commandSubmitted",a)},showDeferMe:function(a){this.hide();var b=f.defer();a.deferred=b,b.promise.then(e.bind(function(){this.show()},this)),a.show()},onExitClick:function(){this.hide()},initialize:function(a){a=a||{},this.destination=$("body"),this.JSON={items:this.getItems()},this.render(),this.setupChildren(),a.wait||this.show()}}),E=D.extend({getItems:function(){return[{text:"Git Branching",id:"english"},{text:"日本語版リポジトリ",id:"japanese"},{text:"Git 브랜치 배우기",id:"korean"},{text:"学习Git分支",id:"chinese"},{text:"français",id:"french"},{text:"Deutsch",id:"german"},{icon:"signout",id:"exit"}]},fireCommand:function(){j.viewInteracted("intlSelect"),D.prototype.fireCommand.apply(this,arguments)},onJapaneseClick:function(){this.fireCommand("locale ja; levels"),this.hide()},onEnglishClick:function(){this.fireCommand("locale en_US; levels"),this.hide()},onKoreanClick:function(){this.fireCommand("locale ko; levels"),this.hide()},onFrenchClick:function(){this.fireCommand("locale fr_FR; levels"),this.hide()},onGermanClick:function(){this.fireCommand("locale de_DE; levels"),this.hide()},onChineseClick:function(){this.fireCommand("locale zh_CN; levels"),this.hide()}}),F=D.extend({getItems:function(){return[{text:"Levels",id:"levels"},{text:"Reset",id:"reset"},{text:"Undo",id:"undo"},{text:"Objective",id:"objective"},{text:"Help",id:"help"},{icon:"signout",id:"exit"}]},fireCommand:function(){j.viewInteracted("helperBar"),D.prototype.fireCommand.apply(this,arguments)},onObjectiveClick:function(){this.fireCommand("objective")},onLevelsClick:function(){this.fireCommand("levels")},onResetClick:function(){this.fireCommand("reset")},onUndoClick:function(){this.fireCommand("undo")},onHelpClick:function(){this.fireCommand("help general; git help")}}),G=D.extend({getItems:function(){return[{icon:"question-sign",id:"commands"},{icon:"globe",id:"intl"},{newPageLink:!0,icon:"facebook",id:"fb",href:"https://www.facebook.com/LearnGitBranching"}]},onFbClick:function(){j.viewInteracted("fbPageLink")},onIntlClick:function(){this.showDeferMe(this.intlHelper),j.viewInteracted("openIntlBar")},onCommandsClick:function(){this.showDeferMe(this.commandsHelper),j.viewInteracted("openCommandsBar")},setupChildren:function(){this.commandsHelper=new F({wait:!0}),this.intlHelper=new E({wait:!0})}}),H=m.extend({tagName:"div",className:"canvasTerminalHolder box flex1",template:e.template($("#terminal-window-bare-template").html()),events:{"click div.wrapper":"onClick"},initialize:function(a){a=a||{},this.destination=$("body"),this.JSON={title:a.title||i.str("goal-to-reach"),text:a.text||i.str("hide-goal")},this.render(),this.inDom=!0,a.additionalClass&&this.$el.addClass(a.additionalClass)},getAnimationTime:function(){return 700},onClick:function(){this.die()},die:function(){this.slideOut(),this.inDom=!1,setTimeout(e.bind(function(){this.tearDown()},this),this.getAnimationTime())},slideOut:function(){this.slideToggle(!0)},slideIn:function(){this.slideToggle(!1)},slideToggle:function(a){this.$("div.terminal-window-holder").toggleClass("slideOut",a)},getCanvasLocation:function(){return this.$("div.inside")[0]}});c.BaseView=m,c.BackgroundView=y,c.GeneralButton=q,c.ModalView=t,c.ModalTerminal=u,c.ModalAlert=v,c.ContainedBase=p,c.ConfirmCancelView=r,c.LeftRightView=s,c.ZoomAlertWindow=B,c.ConfirmCancelTerminal=w,c.WindowSizeAlertWindow=A,c.MainHelperBar=G,c.CanvasTerminalHolder=H,c.LevelToolbar=C,c.NextLevelConfirm=x},{"../app":11,"../dialogs/nextLevel":15,"../intl":24,"../log":31,"../util":41,"../util/constants":37,"../util/errors":39,"../util/keyboard":42,__browserify_process:4,backbone:1,markdown:7,q:9,underscore:10}],49:[function(a,b,c){var d=a("underscore"),e=(a("q"),a("../util").isBrowser()?window.Backbone:a("backbone")),f=a("../util"),g=a("../intl"),h=a("../log"),i=a("../util/keyboard").KeyboardListener,j=a("../app"),k=a("../views").ModalTerminal,l=a("../views").ContainedBase,m=a("../views").BaseView,n=a("../../levels"),o=l.extend({tagName:"div",className:"levelDropdownView box vertical",template:d.template($("#level-dropdown-view").html()),events:{"click div.levelDropdownTab":"onTabClick"},initialize:function(a){a=a||{};var b=f.parseQueryString(window.location.href);this.JSON={selectedTab:b.defaultTab||"main",tabs:[{id:"main",name:g.todo("Main")},{id:"remote",name:g.todo("Remote")}]},this.navEvents=d.clone(e.Events),this.navEvents.on("clickedID",d.debounce(d.bind(this.loadLevelID,this),300,!0)),this.navEvents.on("negative",this.negative,this),this.navEvents.on("positive",this.positive,this),this.navEvents.on("left",this.left,this),this.navEvents.on("right",this.right,this),this.navEvents.on("up",this.up,this),this.navEvents.on("down",this.down,this),this.keyboardListener=new i({events:this.navEvents,aliasMap:{esc:"negative",enter:"positive"},wait:!0}),this.sequences=j.getLevelArbiter().getSequences(),this.sequenceToLevels=j.getLevelArbiter().getSequenceToLevels(),this.container=new k({title:g.str("select-a-level")}),this.render(),j.getEvents().on("resetMapSolved",this.render,this),j.getEvents().on("localeChanged",this.render,this),a.wait||this.show()},render:function(){o.__super__.render.apply(this,arguments),this.buildSequences()},onTabClick:function(a){var b=a.target||a.srcElement,c=$(b).attr("data-id");c!==this.JSON.selectedTab&&this.updateTabTo(c)},updateTabTo:function(a){this.JSON.selectedTab=a,this.render(),this.selectedID&&(this.selectedSequence=this.getSequencesOnTab()[0],this.selectedIndex=0,this.updateSelectedIcon())},positive:function(){this.selectedID&&this.loadLevelID(this.selectedID)},left:function(){this.turnOnKeyboardSelection()||this.leftOrRight(-1)},updateSelectedIcon:function(){this.selectedID=this.getSelectedID(),this.selectIconByID(this.selectedID)},leftOrRight:function(a){this.deselectIconByID(this.selectedID);var b=this.selectedIndex+a,c=this.getCurrentSequence(),d=this.JSON.tabs;b>=c.length&&this.getTabIndex()+1<d.length?(this.switchToTabIndex(this.getTabIndex()+1),this.selectedIndex=0):0>b&&this.getTabIndex()-1>=0?(this.switchToTabIndex(this.getTabIndex()-1),this.selectedIndex=0):this.selectedIndex=this.wrapIndex(this.selectedIndex+a,this.getCurrentSequence()),this.updateSelectedIcon()},right:function(){this.turnOnKeyboardSelection()||this.leftOrRight(1)},up:function(){this.turnOnKeyboardSelection()||(this.selectedSequence=this.getPreviousSequence(),this.downOrUp())},down:function(){this.turnOnKeyboardSelection()||(this.selectedSequence=this.getNextSequence(),this.downOrUp())},downOrUp:function(){this.selectedIndex=this.boundIndex(this.selectedIndex,this.getCurrentSequence()),this.deselectIconByID(this.selectedID),this.updateSelectedIcon()},turnOnKeyboardSelection:function(){return this.selectedID?!1:(this.selectFirst(),!0)},turnOffKeyboardSelection:function(){this.selectedID&&(this.deselectIconByID(this.selectedID),this.selectedID=void 0,this.selectedIndex=void 0,this.selectedSequence=void 0)},getTabIndex:function(){var a=d.map(this.JSON.tabs,function(a){return a.id});return a.indexOf(this.JSON.selectedTab)},switchToTabIndex:function(a){var b=this.JSON.tabs[a].id;this.updateTabTo(b)},wrapIndex:function(a,b){return a=a>=b.length?0:a,a=0>a?b.length-1:a},boundIndex:function(a,b){return a=a>=b.length?b.length-1:a,a=0>a?0:a},getSequencesOnTab:function(){return d.filter(this.sequences,function(a){var b=n.getTabForSequence(a);return b===this.JSON.selectedTab},this)},getNextSequence:function(){var a=this.getSequenceIndex(this.selectedSequence),b=this.wrapIndex(a+1,this.getSequencesOnTab());return this.getSequencesOnTab()[b]},getPreviousSequence:function(){var a=this.getSequenceIndex(this.selectedSequence),b=this.wrapIndex(a-1,this.getSequencesOnTab());return this.getSequencesOnTab()[b]},getSequenceIndex:function(a){var b=this.getSequencesOnTab().indexOf(a);if(0>b)throw new Error("didnt find");return b},getIndexForID:function(a){return j.getLevelArbiter().getLevel(a).index},selectFirst:function(){var a=this.sequenceToLevels[this.getSequencesOnTab()[0]][0].id;this.selectIconByID(a),this.selectedIndex=0,this.selectedSequence=this.getSequencesOnTab()[0]},getCurrentSequence:function(){return this.sequenceToLevels[this.selectedSequence]},getSelectedID:function(){return this.sequenceToLevels[this.selectedSequence][this.selectedIndex].id},selectIconByID:function(a){this.toggleIconSelect(a,!0)},deselectIconByID:function(a){this.toggleIconSelect(a,!1)},toggleIconSelect:function(a,b){this.selectedID=a;var c="#levelIcon-"+a;$(c).toggleClass("selected",b),d.each(this.seriesViews,function(b){return-1===b.levelIDs.indexOf(a)?(b.resetAbout(),void 0):(b.updateAboutForLevelID(a),void 0)},this)},negative:function(){this.hide()},testOption:function(a){return this.currentCommand&&new RegExp("--"+a).test(this.currentCommand.get("rawStr"))},show:function(a,b){this.currentCommand=b,this.updateSolvedStatus(),this.showDeferred=a,this.keyboardListener.listen(),o.__super__.show.apply(this)},hide:function(){this.showDeferred&&this.showDeferred.resolve(),this.showDeferred=void 0,this.keyboardListener.mute(),this.turnOffKeyboardSelection(),o.__super__.hide.apply(this)},loadLevelID:function(a){if(!this.testOption("noOutput")){j.getEventBaton().trigger("commandSubmitted","level "+a);var b=j.getLevelArbiter().getLevel(a),c=b.name.en_US;h.levelSelected(c)}this.hide()},updateSolvedStatus:function(){d.each(this.seriesViews,function(a){a.updateSolvedStatus()},this)},buildSequences:function(){this.seriesViews=[],d.each(this.getSequencesOnTab(),function(a){this.seriesViews.push(new p({destination:this.$el,name:a,navEvents:this.navEvents}))},this)}}),p=m.extend({tagName:"div",className:"seriesView box flex1 vertical",template:d.template($("#series-view").html()),events:{"click div.levelIcon":"click","mouseenter div.levelIcon":"enterIcon","mouseleave div.levelIcon":"leaveIcon"},initialize:function(a){this.name=a.name||"intro",this.navEvents=a.navEvents,this.info=j.getLevelArbiter().getSequenceInfo(this.name),this.levels=j.getLevelArbiter().getLevelsInSequence(this.name),this.levelIDs=[],d.each(this.levels,function(a){this.levelIDs.push(a.id)},this),this.destination=a.destination,this.JSON={displayName:g.getIntlKey(this.info,"displayName"),about:g.getIntlKey(this.info,"about")||"&nbsp;",ids:this.levelIDs},this.render(),this.updateSolvedStatus()},updateSolvedStatus:function(){this.$("div.levelIcon").each(function(a,b){var c=$(b).attr("data-id");$(b).toggleClass("solved",j.getLevelArbiter().isLevelSolved(c))})},getEventID:function(a){var b=a.target;return $(b).attr("data-id")},resetAbout:function(){this.$("p.about").text(g.getIntlKey(this.info,"about")).css("font-style","inherit")},setAbout:function(a){this.$("p.about").text(a).css("font-style","italic")},enterIcon:function(a){var b=this.getEventID(a);this.updateAboutForLevelID(b)},updateAboutForLevelID:function(a){var b=j.getLevelArbiter().getLevel(a);this.setAbout(g.getName(b))},leaveIcon:function(){this.resetAbout()},click:function(a){var b=this.getEventID(a);this.navEvents.trigger("clickedID",b)}});c.LevelDropdownView=o},{"../../levels":63,"../app":11,"../intl":24,"../log":31,"../util":41,"../util/keyboard":42,"../views":48,backbone:1,q:9,underscore:10}],50:[function(a,b,c){var d=a("underscore"),e=a("q"),f=a("../util").isBrowser()?window.Backbone:a("backbone"),g=(a("../views").ModalTerminal,a("../views").ContainedBase,a("../views").ConfirmCancelView,a("../views").LeftRightView),h=a("../views").ModalAlert,i=a("../views/gitDemonstrationView").GitDemonstrationView,j=a("../views/builderViews"),k=j.MarkdownPresenter,l=a("../util/keyboard").KeyboardListener,m=(a("../util/errors").GitError,f.View.extend({tagName:"div",className:"multiView",navEventDebounce:550,deathTime:700,typeToConstructor:{ModalAlert:h,GitDemonstrationView:i,MarkdownPresenter:k},initialize:function(a){a=a||{},this.childViewJSONs=a.childViews||[{type:"ModalAlert",options:{markdown:"Woah wtf!!"}},{type:"GitDemonstrationView",options:{command:"git checkout -b side; git commit; git commit"}},{type:"ModalAlert",options:{markdown:"Im second"}}],this.deferred=a.deferred||e.defer(),this.childViews=[],this.currentIndex=0,this.navEvents=d.clone(f.Events),this.navEvents.on("negative",this.getNegFunc(),this),this.navEvents.on("positive",this.getPosFunc(),this),this.navEvents.on("quit",this.finish,this),this.navEvents.on("exit",this.finish,this),this.keyboardListener=new l({events:this.navEvents,aliasMap:{left:"negative",right:"positive",enter:"positive",esc:"quit"}}),this.render(),a.wait||this.start()},onWindowFocus:function(){},getAnimationTime:function(){return 700},getPromise:function(){return this.deferred.promise},getPosFunc:function(){return d.debounce(d.bind(function(){this.navForward()},this),this.navEventDebounce,!0)},getNegFunc:function(){return d.debounce(d.bind(function(){this.navBackward()},this),this.navEventDebounce,!0)},lock:function(){this.locked=!0},unlock:function(){this.locked=!1},navForward:function(){return this.locked?void 0:this.currentIndex===this.childViews.length-1?(this.hideViewIndex(this.currentIndex),this.finish(),void 0):(this.navIndexChange(1),void 0)},navBackward:function(){0!==this.currentIndex&&this.navIndexChange(-1)},navIndexChange:function(a){this.hideViewIndex(this.currentIndex),this.currentIndex+=a,this.showViewIndex(this.currentIndex)},hideViewIndex:function(a){this.childViews[a].hide()},showViewIndex:function(a){this.childViews[a].show()},finish:function(){this.keyboardListener.mute(),d.each(this.childViews,function(a){a.die()}),this.deferred.resolve()},start:function(){this.showViewIndex(this.currentIndex)},createChildView:function(a){var b=a.type;if(!this.typeToConstructor[b])throw new Error('no constructor for type "'+b+'"');var c=new this.typeToConstructor[b](d.extend({},a.options,{wait:!0}));return c},addNavToView:function(a,b){var c=new g({events:this.navEvents,destination:a.getDestination(),showLeft:0!==b,lastNav:b===this.childViewJSONs.length-1});a.receiveMetaNav&&a.receiveMetaNav(c,this)},render:function(){d.each(this.childViewJSONs,function(a,b){var c=this.createChildView(a);this.childViews.push(c),this.addNavToView(c,b)},this)}}));c.MultiView=m},{"../util":41,"../util/errors":39,"../util/keyboard":42,"../views":48,"../views/builderViews":45,"../views/gitDemonstrationView":47,backbone:1,q:9,underscore:10}],51:[function(a,b,c){var d=(a("../util/errors").GitError,a("underscore")),e=a("q"),f=a("../util").isBrowser()?window.Backbone:a("backbone"),g=a("../views").ModalTerminal,h=a("../views").ContainedBase,i=a("../views").ConfirmCancelView,j=(a("../views").LeftRightView,h.extend({tagName:"div",template:d.template($("#interactive-rebase-template").html()),initialize:function(a){this.deferred=a.deferred,this.rebaseMap={},this.entryObjMap={},this.options=a,this.rebaseEntries=new l,a.toRebase.reverse(),d.each(a.toRebase,function(a){var b=a.get("id");this.rebaseMap[b]=a,this.entryObjMap[b]=new k({id:b}),this.rebaseEntries.add(this.entryObjMap[b])},this),this.container=new g({title:"Interactive Rebase"}),this.render(),this.show(),a.aboveAll&&$("#canvasHolder").css("display","none")},restoreVis:function(){$("#canvasHolder").css("display","inherit")},confirm:function(){this.die(),this.options.aboveAll&&this.restoreVis();var a=[];this.$("ul.rebaseEntries li").each(function(b,c){a.push(c.id)});var b=[];d.each(a,function(a){this.entryObjMap[a].get("pick")&&b.unshift(this.rebaseMap[a])},this),b.reverse(),this.deferred.resolve(b),this.$el.html("")},render:function(){var a={num:d.keys(this.rebaseMap).length},b=this.container.getInsideElement();this.$el.html(this.template(a)),$(b).append(this.el);var c=this.$("ul.rebaseEntries");this.rebaseEntries.each(function(a){new m({el:c,model:a})},this),c.sortable({axis:"y",placeholder:"rebaseEntry transitionOpacity ui-state-highlight",appendTo:"parent"}),this.makeButtons()},cancel:function(){this.hide(),this.options.aboveAll&&this.restoreVis(),this.deferred.resolve([])},makeButtons:function(){var a=e.defer();a.promise.then(d.bind(function(){this.confirm()},this)).fail(d.bind(function(){this.cancel()},this)).done(),new i({destination:this.$(".confirmCancel"),deferred:a})}})),k=f.Model.extend({defaults:{pick:!0},toggle:function(){this.set("pick",!this.get("pick"))}}),l=f.Collection.extend({model:k}),m=f.View.extend({tagName:"li",template:d.template($("#interactive-rebase-entry-template").html()),toggle:function(){this.model.toggle(),this.listEntry.toggleClass("notPicked",!this.model.get("pick"))},initialize:function(){this.render()},render:function(){this.model.toJSON();this.$el.append(this.template(this.model.toJSON())),this.listEntry=this.$el.children(":last"),this.listEntry.delegate("#toggleButton","click",d.bind(function(){this.toggle()},this))}});c.InteractiveRebaseView=j},{"../util":41,"../util/errors":39,"../views":48,backbone:1,q:9,underscore:10}],52:[function(a,b,c){var d=a("underscore"),e=(a("backbone"),a("q")),f=a("./index").Animation,g=a("./index").PromiseAnimation,h=a("../../util/constants").GRAPHICS,i={},j=function(a,b){var c=1*h.defaultAnimationTime,d=2*c,e=function(){a.refreshTree(c),b.setBirth(),b.parentInFront(),a.visBranchesFront(),b.animateUpdatedPosition(d,"bounce"),b.animateOutgoingEdges(c)};return{animation:e,duration:Math.max(c,d)}},k=function(a,b){var c=.66*h.defaultAnimationTime,d=2*c;return{animation:function(){a.highlightTo(b,d,"easeInOut")},duration:1.5*d}};i.genCommitBirthAnimation=function(a,b,c){if(!a)throw new Error("Need animation queue to add closure to!");var d=b.get("visNode"),e=j(c,d);a.add(new f({closure:e.animation,duration:e.duration}))},i.genCommitBirthPromiseAnimation=function(a,b){var c=a.get("visNode");return new g(j(b,c))},i.highlightEachWithPromise=function(a,b,c){return d.each(b,function(b){a=a.then(d.bind(function(){return this.playHighlightPromiseAnimation(b,c)},this))},this),a},i.playCommitBirthPromiseAnimation=function(a,b){var c=this.genCommitBirthPromiseAnimation(a,b);return c.play(),c.getPromise()},i.playRefreshAnimationAndFinish=function(a,b){var c=new g({closure:function(){a.refreshTree()}});c.play(),b.thenFinish(c.getPromise())},i.genRefreshPromiseAnimation=function(a){return new g({closure:function(){a.refreshTree()}})},i.playRefreshAnimationSlow=function(a){var b=h.defaultAnimationTime;return this.playRefreshAnimation(a,2*b)},i.playRefreshAnimation=function(a,b){var c=new g({duration:b,closure:function(){a.refreshTree(b)}});return c.play(),c.getPromise()},i.refreshTree=function(a,b){a.add(new f({closure:function(){b.refreshTree()}}))},i.genHighlightPromiseAnimation=function(a,b){var c=b.get("visBranch")||b.get("visNode"),d=a.get("visNode");return new g(k(d,c))},i.playHighlightPromiseAnimation=function(a,b){var c=this.genHighlightPromiseAnimation(a,b);return c.play(),c.getPromise()},i.getDelayedPromise=function(a){var b=e.defer();return setTimeout(b.resolve,a||1e3),b.promise},i.delay=function(a,b){b=b||h.defaultAnimationTime,a.add(new f({closure:function(){},duration:b}))},c.AnimationFactory=i},{"../../util/constants":37,"./index":53,backbone:1,q:9,underscore:10}],53:[function(a,b,c){var d=a("underscore"),e=a("q"),f=a("backbone"),g=a("../../util/constants").GLOBAL,h=a("../../util/constants").GRAPHICS,i=f.Model.extend({defaults:{duration:h.defaultAnimationTime,closure:null},validateAtInit:function(){if(!this.get("closure"))throw new Error("give me a closure!")},initialize:function(){this.validateAtInit()},run:function(){this.get("closure")()}}),j=f.Model.extend({defaults:{animations:null,index:0,callback:null,defer:!1,promiseBased:!1},initialize:function(a){this.set("animations",[]),a.callback||console.warn("no callback")},thenFinish:function(a,b){a.then(d.bind(function(){this.finish()},this)),a.fail(function(a){throw console.log("uncaught error",a),a}),this.set("promiseBased",!0),b&&b.resolve()},add:function(a){if(!a instanceof i)throw new Error("Need animation not something else");this.get("animations").push(a)},start:function(){this.set("index",0),g.isAnimating=!0,this.next()},finish:function(){g.isAnimating=!1,this.get("callback")()},next:function(){var a=this.get("animations"),b=this.get("index");if(b>=a.length)return this.finish(),void 0;var c=a[b],e=c.get("duration");c.run(),this.set("index",b+1),setTimeout(d.bind(function(){this.next()},this),e)}}),k=f.Model.extend({defaults:{deferred:null,closure:null,duration:h.defaultAnimationTime},initialize:function(a){if(!a.closure&&!a.animation)throw new Error("need closure or animation");this.set("closure",a.closure||a.animation),this.set("duration",a.duration||this.get("duration")),this.set("deferred",a.deferred||e.defer())},getPromise:function(){return this.get("deferred").promise},play:function(){this.get("closure")(),setTimeout(d.bind(function(){this.get("deferred").resolve()},this),this.get("duration"))},then:function(a){return this.get("deferred").promise.then(a)}});k.fromAnimation=function(a){return new k({closure:a.get("closure"),duration:a.get("duration")})},c.Animation=i,c.PromiseAnimation=k,c.AnimationQueue=j},{"../../util/constants":37,backbone:1,q:9,underscore:10}],54:[function(a,b,c){function d(b){b=b||{},this.options=b,this.visualization=b.visualization,this.commitCollection=b.commitCollection,this.branchCollection=b.branchCollection,this.tagCollection=b.tagCollection,this.visNodeMap={},this.visEdgeCollection=new p,this.visBranchCollection=new l,this.visTagCollection=new n,this.commitMap={},this.rootCommit=null,this.branchStackMap=null,this.tagStackMap=null,this.upstreamBranchSet=null,this.upstreamTagSet=null,this.upstreamHeadSet=null,this.paper=b.paper,this.gitReady=!1,this.branchCollection.on("add",this.addBranchFromEvent,this),this.branchCollection.on("remove",this.removeBranch,this),this.tagCollection.on("add",this.addTagFromEvent,this),this.tagCollection.on("remove",this.removeTag,this),this.deferred=[],this.flipFraction=.65;var c=a("../app");c.getEvents().on("refreshTree",this.refreshTree,this)}function e(a){var b=0,c=0,d=0,e=0,g=a.length;f.each(a,function(a){var f=a.split("(")[1];f=f.split(")")[0],f=f.split(","),d+=parseFloat(f[1]),e+=parseFloat(f[2]);var g=parseFloat(f[0]),h=g*Math.PI*2;b+=Math.cos(h),c+=Math.sin(h)}),b/=g,c/=g,d/=g,e/=g;var h=Math.atan2(c,b)/(2*Math.PI);return 0>h&&(h+=1),"hsb("+String(h)+","+String(d)+","+String(e)+")"}var f=a("underscore"),g=a("q"),h=(a("backbone"),a("../util/constants").GRAPHICS),i=(a("../util/constants").GLOBAL,a("../models/collections")),j=(i.CommitCollection,i.BranchCollection,i.TagCollection,a("../visuals/visNode").VisNode),k=a("../visuals/visBranch").VisBranch,l=a("../visuals/visBranch").VisBranchCollection,m=a("../visuals/visTag").VisTag,n=a("../visuals/visTag").VisTagCollection,o=a("../visuals/visEdge").VisEdge,p=a("../visuals/visEdge").VisEdgeCollection;d.prototype.defer=function(a){this.deferred.push(a)},d.prototype.deferFlush=function(){f.each(this.deferred,function(a){a()},this),this.deferred=[]},d.prototype.resetAll=function(){var a=this.visEdgeCollection.toArray();f.each(a,function(a){a.remove()},this);var b=this.visBranchCollection.toArray();f.each(b,function(a){a.remove()},this);var c=this.visTagCollection.toArray();f.each(c,function(a){a.remove()},this),f.each(this.visNodeMap,function(a){a.remove()},this),this.visEdgeCollection.reset(),this.visBranchCollection.reset(),this.visTagCollection.reset(),this.visNodeMap={},this.rootCommit=null,this.commitMap={}},d.prototype.tearDown=function(){this.resetAll(),this.paper.remove()},d.prototype.assignGitEngine=function(a){this.gitEngine=a,this.initHeadBranch(),this.deferFlush()},d.prototype.getVisualization=function(){return this.visualization},d.prototype.initHeadBranch=function(){this.addBranchFromEvent(this.gitEngine.HEAD)},d.prototype.getScreenPadding=function(){return{widthPadding:1.5*h.nodeRadius,topHeightPadding:1.5*h.nodeRadius,bottomHeightPadding:5*h.nodeRadius}},d.prototype.getPosBoundaries=function(){return this.gitEngine.hasOrigin()?{min:0,max:.5}:this.gitEngine.isOrigin()?{min:.5,max:1}:{min:0,max:1}},d.prototype.getFlipPos=function(){var a=this.getPosBoundaries(),b=a.min,c=a.max;return this.flipFraction*(c-b)+b},d.prototype.getIsGoalVis=function(){return!!this.options.isGoalVis},d.prototype.getLevelBlob=function(){return this.visualization.options.levelBlob||{}},d.prototype.toScreenCoords=function(a){if(!this.paper.width)throw new Error("being called too early for screen coords");var b=this.getScreenPadding(),c=function(a,b,c){return c+a*(b-2*c)},d=function(a,b,c,d){return c+a*(b-d-c)};return{x:c(a.x,this.paper.width,b.widthPadding),y:d(a.y,this.paper.height,b.topHeightPadding,b.bottomHeightPadding)}},d.prototype.animateAllAttrKeys=function(a,b,c,d){var e=g.defer(),i=function(e){e.animateAttrKeys(a,b,c,d)};this.visBranchCollection.each(i),this.visEdgeCollection.each(i),this.visTagCollection.each(i),f.each(this.visNodeMap,i);var j=void 0!==c?c:h.defaultAnimationTime;return setTimeout(function(){e.resolve()
},j),e.promise},d.prototype.finishAnimation=function(){var a=g.defer(),b=g.defer(),c=h.defaultAnimationTime,d=h.nodeRadius,e="Solved!!\n:D",i=null,j=f.bind(function(){i=this.paper.text(this.paper.width/2,this.paper.height/2,e),i.attr({opacity:0,"font-weight":500,"font-size":"32pt","font-family":"Monaco, Courier, font-monospace",stroke:"#000","stroke-width":2,fill:"#000"}),i.animate({opacity:1},c)},this);return a.promise.then(f.bind(function(){return this.animateAllAttrKeys({exclude:["circle"]},{opacity:0},1.1*c)},this)).then(f.bind(function(){return this.animateAllAttrKeys({exclude:["arrow","rect","path","text"]},{r:2*d},1.5*c)},this)).then(f.bind(function(){return this.animateAllAttrKeys({exclude:["arrow","rect","path","text"]},{r:.75*d},.5*c)},this)).then(f.bind(function(){return j(),this.explodeNodes()},this)).then(f.bind(function(){return this.explodeNodes()},this)).then(f.bind(function(){return this.animateAllAttrKeys({exclude:["arrow","rect","path","text"]},{},1.25*c)},this)).then(f.bind(function(){return i.animate({opacity:0},c,void 0,void 0,function(){i.remove()}),this.animateAllAttrKeys({},{})},this)).then(function(){b.resolve()}).fail(function(a){console.warn("animation error"+a)}).done(),a.resolve(),b.promise},d.prototype.explodeNodes=function(){var a=g.defer(),b=[];f.each(this.visNodeMap,function(a){b.push(a.getExplodeStepFunc())});var c=setInterval(function(){var d=[];return f.each(b,function(a){a()&&d.push(a)}),d.length?(b=d,void 0):(clearInterval(c),a.resolve(),void 0)},.025);return a.promise},d.prototype.animateAllFromAttrToAttr=function(a,b,c){var d=function(d){var e=d.getID();f.include(c,e)||a[e]&&b[e]&&d.animateFromAttrToAttr(a[e],b[e])};this.visBranchCollection.each(d),this.visEdgeCollection.each(d),this.visTagCollection.each(d),f.each(this.visNodeMap,d)},d.prototype.genSnapshot=function(){this.fullCalc();var a={};return f.each(this.visNodeMap,function(b){a[b.get("id")]=b.getAttributes()},this),this.visBranchCollection.each(function(b){a[b.getID()]=b.getAttributes()},this),this.visEdgeCollection.each(function(b){a[b.getID()]=b.getAttributes()},this),this.visTagCollection.each(function(b){a[b.getID()]=b.getAttributes()},this),a},d.prototype.refreshTree=function(a){this.gitReady&&this.gitEngine.rootCommit&&(this.fullCalc(),this.animateAll(a))},d.prototype.refreshTreeHarsh=function(){this.fullCalc(),this.animateAll(0)},d.prototype.animateAll=function(a){this.zIndexReflow(),this.animateEdges(a),this.animateNodePositions(a),this.animateRefs(a)},d.prototype.fullCalc=function(){this.calcTreeCoords(),this.calcGraphicsCoords()},d.prototype.calcTreeCoords=function(){if(!this.rootCommit)throw new Error("grr, no root commit!");this.calcUpstreamSets(),this.calcBranchStacks(),this.calcTagStacks(),this.calcDepth(),this.calcWidth()},d.prototype.calcGraphicsCoords=function(){this.visBranchCollection.each(function(a){a.updateName()}),this.visTagCollection.each(function(a){a.updateName()})},d.prototype.calcUpstreamSets=function(){this.upstreamBranchSet=this.gitEngine.getUpstreamBranchSet(),this.upstreamHeadSet=this.gitEngine.getUpstreamHeadSet(),this.upstreamTagSet=this.gitEngine.getUpstreamTagSet()},d.prototype.getCommitUpstreamBranches=function(a){return this.branchStackMap[a.get("id")]},d.prototype.getBlendedHuesForCommit=function(a){var b=this.upstreamBranchSet[a.get("id")];if(!b)throw new Error("that commit doesnt have upstream branches!");return this.blendHuesFromBranchStack(b)},d.prototype.blendHuesFromBranchStack=function(a){var b=[];return f.each(a,function(a){var c=a.obj.get("visBranch").get("fill");if("hsb"!==c.slice(0,3)){var d=Raphael.color(c);c="hsb("+String(d.h)+","+String(d.l),c=c+","+String(d.s)+")"}b.push(c)}),e(b)},d.prototype.getCommitUpstreamStatus=function(a){if(!this.upstreamBranchSet)throw new Error("Can't calculate this yet!");var b=a.get("id"),c=this.upstreamBranchSet,d=this.upstreamHeadSet,e=this.upstreamTagSet;return c[b]?"branch":e[b]?"tag":d[b]?"head":"none"},d.prototype.calcTagStacks=function(){var a=this.gitEngine.getTags(),b={};f.each(a,function(a){var c=a.target.get("id");b[c]=b[c]||[],b[c].push(a),b[c].sort(function(a,b){var c=a.obj.get("id"),d=b.obj.get("id");return c.localeCompare(d)})}),this.tagStackMap=b},d.prototype.calcBranchStacks=function(){var a=this.gitEngine.getBranches(),b={};f.each(a,function(a){var c=a.target.get("id");b[c]=b[c]||[],b[c].push(a),b[c].sort(function(a,b){var c=a.obj.get("id"),d=b.obj.get("id");return"master"==c||"master"==d?"master"==c?-1:1:c.localeCompare(d)})}),this.branchStackMap=b},d.prototype.calcWidth=function(){this.maxWidthRecursive(this.rootCommit);var a=this.getPosBoundaries();this.assignBoundsRecursive(this.rootCommit,a.min,a.max)},d.prototype.maxWidthRecursive=function(a){var b=0;f.each(a.get("children"),function(c){if(c.isMainParent(a)){var d=this.maxWidthRecursive(c);b+=d}},this);var c=Math.max(1,b);return a.get("visNode").set("maxWidth",c),c},d.prototype.assignBoundsRecursive=function(a,b,c){var d=(c+b)/2;if(a.get("visNode").get("pos").x=d,0!==a.get("children").length){var e=c-b,g=0,h=a.get("children");f.each(h,function(b){b.isMainParent(a)&&(g+=b.get("visNode").getMaxWidthScaled())},this);var i=b;f.each(h,function(b){if(b.isMainParent(a)){var c=b.get("visNode").getMaxWidthScaled(),d=c/g*e,f=i,h=f+d;this.assignBoundsRecursive(b,f,h),i=f+d}},this)}},d.prototype.calcDepth=function(){var a=this.calcDepthRecursive(this.rootCommit,0);a>15&&console.warn("graphics are degrading from too many layers");var b=this.getDepthIncrement(a);f.each(this.visNodeMap,function(a){a.setDepthBasedOn(b,this.getHeaderOffset())},this)},d.prototype.animateNodePositions=function(a){f.each(this.visNodeMap,function(b){b.animateUpdatedPosition(a)},this)},d.prototype.addBranchFromEvent=function(a){var b=f.bind(function(){this.addBranch(a)},this);this.gitEngine&&this.gitReady?b():this.defer(b)},d.prototype.addBranch=function(a){var b=new k({branch:a,gitVisuals:this,gitEngine:this.gitEngine});this.visBranchCollection.add(b),this.gitReady?b.genGraphics(this.paper):this.defer(f.bind(function(){b.genGraphics(this.paper)},this))},d.prototype.addTagFromEvent=function(a){var b=f.bind(function(){this.addTag(a)},this);this.gitEngine&&this.gitReady?b():this.defer(b)},d.prototype.addTag=function(a){var b=new m({tag:a,gitVisuals:this,gitEngine:this.gitEngine});this.visTagCollection.add(b),this.gitReady?b.genGraphics(this.paper):this.defer(f.bind(function(){b.genGraphics(this.paper)},this))},d.prototype.removeVisBranch=function(a){this.visBranchCollection.remove(a)},d.prototype.removeVisTag=function(a){this.visTagCollection.remove(a)},d.prototype.removeVisNode=function(a){delete this.visNodeMap[a.getID()]},d.prototype.removeVisEdge=function(a){this.visEdgeCollection.remove(a)},d.prototype.animateRefs=function(a){this.visBranchCollection.each(function(b){b.animateUpdatedPos(a)},this),this.visTagCollection.each(function(b){b.animateUpdatedPos(a)},this)},d.prototype.animateEdges=function(a){this.visEdgeCollection.each(function(b){b.animateUpdatedPath(a)},this)},d.prototype.getMinLayers=function(){return this.options.smallCanvas?2:7},d.prototype.getDepthIncrement=function(a){a=Math.max(a,this.getMinLayers());var b=1-this.getHeaderOffset(),c=b/a;return c},d.prototype.shouldHaveHeader=function(){return this.gitEngine.isOrigin()||this.gitEngine.hasOrigin()},d.prototype.getHeaderOffset=function(){return this.shouldHaveHeader()?.05:0},d.prototype.calcDepthRecursive=function(a,b){a.get("visNode").setDepth(b);var c=a.get("children"),d=b;return f.each(c,function(a){var c=this.calcDepthRecursive(a,b+1);d=Math.max(c,d)},this),d},d.prototype.canvasResize=function(a,b){this.resizeFunc||this.genResizeFunc(),this.resizeFunc(a,b)},d.prototype.genResizeFunc=function(){this.resizeFunc=f.debounce(f.bind(function(){this.refreshTree()},this),200,!0)},d.prototype.addNode=function(a,b){this.commitMap[a]=b,b.get("rootCommit")&&(this.rootCommit=b);var c=new j({id:a,commit:b,gitVisuals:this,gitEngine:this.gitEngine});return this.visNodeMap[a]=c,this.gitReady&&c.genGraphics(this.paper),c},d.prototype.addEdge=function(a,b){var c=this.visNodeMap[a],d=this.visNodeMap[b];if(!c||!d)throw new Error("one of the ids in ("+a+", "+b+") does not exist");var e=new o({tail:c,head:d,gitVisuals:this,gitEngine:this.gitEngine});this.visEdgeCollection.add(e),this.gitReady&&e.genGraphics(this.paper)},d.prototype.zIndexReflow=function(){this.visNodesFront(),this.visBranchesFront(),this.visTagsFront()},d.prototype.visNodesFront=function(){f.each(this.visNodeMap,function(a){a.toFront()})},d.prototype.visBranchesFront=function(){this.visBranchCollection.each(function(a){a.nonTextToFront(),a.textToFront()}),this.visBranchCollection.each(function(a){a.textToFrontIfInStack()})},d.prototype.visTagsFront=function(){this.visTagCollection.each(function(a){a.nonTextToFront(),a.textToFront()}),this.visTagCollection.each(function(a){a.textToFrontIfInStack()})},d.prototype.drawTreeFromReload=function(){this.gitReady=!0,this.deferFlush(),this.calcTreeCoords()},d.prototype.drawTreeFirstTime=function(){this.gitReady=!0,this.calcTreeCoords(),f.each(this.visNodeMap,function(a){a.genGraphics(this.paper)},this),this.visEdgeCollection.each(function(a){a.genGraphics(this.paper)},this),this.visBranchCollection.each(function(a){a.genGraphics(this.paper)},this),this.visTagCollection.each(function(a){a.genGraphics(this.paper)},this),this.zIndexReflow()},c.GitVisuals=d},{"../app":11,"../models/collections":33,"../util/constants":37,"../visuals/visBranch":57,"../visuals/visEdge":58,"../visuals/visNode":59,"../visuals/visTag":60,backbone:1,q:9,underscore:10}],55:[function(a,b,c){var d=a("underscore"),e=a("backbone"),f=e.Model.extend({removeKeys:function(a){d.each(a,function(a){this.get(a)&&this.get(a).remove()},this)},animateAttrKeys:function(a,b,c,e){a=d.extend({},{include:["circle","arrow","rect","path","text"],exclude:[]},a||{});var f=this.getAttributes();d.each(a.include,function(a){f[a]=d.extend({},f[a],b)}),d.each(a.exclude,function(a){delete f[a]}),this.animateToAttr(f,c,e)}});c.VisBase=f},{backbone:1,underscore:10}],56:[function(a,b,c){var d=a("underscore"),e=a("backbone"),f=e.Model.extend({removeKeys:function(a){d.each(a,function(a){this.get(a)&&this.get(a).remove()},this)},getNonAnimateKeys:function(){return["stroke-dasharray"]},getIsInOrigin:function(){return this.get("gitEngine")?this.get("gitEngine").isOrigin():!1},animateToAttr:function(a,b,c){if(0===b)return this.setAttr(a,!0),void 0;var d=void 0!==b?b:this.get("animationSpeed"),e=c||this.get("animationEasing");this.setAttr(a,!1,d,e)},setAttrBase:function(a,b,c,e,f){d.each(a,function(a){c?this.get(a).attr(b[a]):(this.get(a).stop(),this.get(a).animate(b[a],e,f),d.forEach(this.getNonAnimateKeys(),function(c){b[a]&&void 0!==b[a][c]&&this.get(a).attr(c,b[a][c])},this)),b.css&&$(this.get(a).node).css(b.css)},this)},animateAttrKeys:function(a,b,c,e){a=d.extend({},{include:["circle","arrow","rect","path","text"],exclude:[]},a||{});var f=this.getAttributes();d.each(a.include,function(a){f[a]=d.extend({},f[a],b)}),d.each(a.exclude,function(a){delete f[a]}),this.animateToAttr(f,c,e)}});c.VisBase=f},{backbone:1,underscore:10}],57:[function(a,b,c){var d=a("underscore"),e=a("backbone"),f=a("../util/constants").GRAPHICS,g=a("../visuals/visBase").VisBase,h=a("../graph/treeCompare"),i=function(){var a=Math.random(),b="hsb("+String(a)+",0.6,1)";return b},j=g.extend({defaults:{pos:null,text:null,rect:null,arrow:null,isHead:!1,flip:1,fill:f.rectFill,stroke:f.rectStroke,"stroke-width":f.rectStrokeWidth,offsetX:4.75*f.nodeRadius,offsetY:0,arrowHeight:14,arrowInnerSkew:0,arrowEdgeHeight:6,arrowLength:14,arrowOffsetFromCircleX:10,vPad:5,hPad:5,animationSpeed:f.defaultAnimationTime,animationEasing:f.defaultEasing},validateAtInit:function(){if(!this.get("branch"))throw new Error("need a branch!")},getID:function(){return this.get("branch").get("id")},initialize:function(){if(this.validateAtInit(),this.gitVisuals=this.get("gitVisuals"),this.gitEngine=this.get("gitEngine"),!this.gitEngine)throw new Error("asd wtf");this.get("branch").set("visBranch",this);var a=this.get("branch").get("id");"HEAD"==a?(this.set("isHead",!0),this.set("flip",-1),this.refreshOffset(),this.set("fill",f.headRectFill)):"master"!==a&&this.set("fill",i())},getCommitPosition:function(){var a=this.gitEngine.getCommitFromRef(this.get("branch")),b=a.get("visNode");return this.set("flip",this.getFlipValue(a,b)),this.refreshOffset(),b.getScreenCoords()},getDashArray:function(){return this.get("gitVisuals").getIsGoalVis()?this.getIsLevelBranchCompared()?"":"--":""},getIsGoalAndNotCompared:function(){return this.get("gitVisuals").getIsGoalVis()?!this.getIsLevelBranchCompared():!1},getIsLevelBranchCompared:function(){if(this.getIsMaster())return!0;var a=this.get("gitVisuals").getLevelBlob();return!h.onlyMasterCompared(a)},getIsMaster:function(){return"master"==this.get("branch").get("id")},getFlipValue:function(a,b){var c=this.get("gitVisuals").getFlipPos(),d=b.get("pos").x>c;return"C0"===a.get("id")?-1:this.get("isHead")?d?this.isBranchStackEmpty()?-1:1:this.isBranchStackEmpty()?1:-1:d?-1:1},refreshOffset:function(){var a=4.75*f.nodeRadius,b=33,c=10;1===this.get("flip")?(this.set("offsetY",-b),this.set("offsetX",a-c)):(this.set("offsetY",b),this.set("offsetX",a-c))},getArrowTransform:function(){return 1===this.get("flip")?"t-2,-20R-35":"t2,20R-35"},getBranchStackIndex:function(){if(this.get("isHead"))return 0;var a=this.getBranchStackArray(),b=-1;return d.each(a,function(a,c){a.obj==this.get("branch")&&(b=c)},this),b},getBranchStackLength:function(){return this.get("isHead")?1:this.getBranchStackArray().length},isBranchStackEmpty:function(){var a=this.gitVisuals.branchStackMap[this.getCommitID()];return a?0===a.length:!0},getCommitID:function(){var a=this.get("branch").get("target");return"branch"===a.get("type")&&(a=a.get("target")),a.get("id")},getBranchStackArray:function(){var a=this.gitVisuals.branchStackMap[this.getCommitID()];return void 0===a?(this.gitVisuals.calcBranchStacks(),this.getBranchStackArray()):a},getTextPosition:function(){var a=this.getCommitPosition(),b=this.getBranchStackIndex();return{x:a.x+this.get("flip")*this.get("offsetX"),y:a.y+b*f.multiBranchY+this.get("offsetY")}},getRectPosition:function(){var a=this.getTextPosition(),b=(this.get("flip"),this.getTextSize());return{x:a.x-.5*b.w-this.get("hPad"),y:a.y-.5*b.h-this.get("vPad")}},getArrowPath:function(){var a=function(a,b,c){return{x:a.x+b,y:a.y+c}},b=function(a){return String(Math.round(a.x))+","+String(Math.round(a.y))},c=this.get("flip"),e=a(this.getCommitPosition(),c*this.get("arrowOffsetFromCircleX"),0),f=a(e,c*this.get("arrowLength"),-this.get("arrowHeight")),g=a(e,c*this.get("arrowLength"),this.get("arrowHeight")),h=a(f,c*this.get("arrowInnerSkew"),this.get("arrowEdgeHeight")),i=a(g,c*this.get("arrowInnerSkew"),-this.get("arrowEdgeHeight")),j=49,k=a(h,c*j,0),l=a(i,c*j,0),m="";m+="M"+b(k)+" ";var n=[h,f,e,g,i,l];return d.each(n,function(a){m+="L"+b(a)+" "},this),m+="z"},getTextSize:function(){var a=function(a){var b=a.get("text")?a.get("text").node:null;return null===b?0:b.clientWidth},b=function(a){return a.w||(a.w=75),a.h||(a.h=20),a},c=this.get("text").node;if(this.get("isHead"))return b({w:c.clientWidth,h:c.clientHeight});var e=0;return d.each(this.getBranchStackArray(),function(b){e=Math.max(e,a(b.obj.get("visBranch")))}),b({w:e,h:c.clientHeight})},getSingleRectSize:function(){var a=this.getTextSize(),b=this.get("vPad"),c=this.get("hPad");return{w:a.w+2*b,h:a.h+2*c}},getRectSize:function(){var a=this.getTextSize(),b=this.get("vPad"),c=this.get("hPad"),d=this.getBranchStackLength();return{w:a.w+2*b,h:a.h*d*1.1+2*c}},getIsRemote:function(){return this.get("branch").getIsRemote()},getName:function(){var a=this.get("branch").getName(),b=this.get("branch")===this.gitEngine.HEAD.get("target"),c=this.getIsRemote(),d=this.gitEngine.getIsHg();"HEAD"===a&&d&&(a=".");var e=!b||this.getIsInOrigin()||c?"":"*";return a+e},nonTextToFront:function(){this.get("arrow").toFront(),this.get("rect").toFront()},textToFront:function(){this.get("text").toFront()},textToFrontIfInStack:function(){0!==this.getBranchStackIndex()&&this.get("text").toFront()},getFill:function(){return this.get("isHead")||1==this.getBranchStackLength()||0!==this.getBranchStackIndex()?this.get("fill"):this.gitVisuals.blendHuesFromBranchStack(this.getBranchStackArray())},remove:function(){this.removeKeys(["text","arrow","rect"]),this.gitVisuals.removeVisBranch(this)},handleModeChange:function(){},genGraphics:function(a){var b=this.getTextPosition(),c=this.getName(),e=a.text(b.x,b.y,String(c));e.attr({"font-size":14,"font-family":"Monaco, Courier, font-monospace",opacity:this.getTextOpacity()}),this.set("text",e);var f=this.getAttributes(),g=this.getRectPosition(),h=this.getRectSize(),i=a.rect(g.x,g.y,h.w,h.h,8).attr(f.rect);this.set("rect",i);var j=this.getArrowPath(),k=a.path(j).attr(f.arrow);this.set("arrow",k);var l=["text","rect","arrow"];d.each(l,function(a){$(this.get(a).node).css(f.css)},this),this.attachClickHandlers(),i.toFront(),e.toFront()},attachClickHandlers:function(){if(!this.get("gitVisuals").options.noClick){var a=[this.get("rect"),this.get("text"),this.get("arrow")];d.each(a,function(a){a.click(d.bind(this.onClick,this))},this)}},shouldDisableClick:function(){return this.get("isHead")&&!this.gitEngine.getDetachedHead()},onClick:function(){if(!this.shouldDisableClick()){var b="git checkout "+this.get("branch").get("id"),c=a("../app");c.getEventBaton().trigger("commandSubmitted",b)}},updateName:function(){this.get("text").attr({text:this.getName()})},getNonTextOpacity:function(){return this.get("isHead")?this.gitEngine.getDetachedHead()?1:0:0!==this.getBranchStackIndex()?0:1},getTextOpacity:function(){return this.get("isHead")?this.gitEngine.getDetachedHead()?1:0:this.getIsGoalAndNotCompared()?0===this.getBranchStackIndex()?.7:.3:1},getStrokeWidth:function(){return this.getIsGoalAndNotCompared()?this.get("stroke-width")/5:this.get("stroke-width")},getAttributes:function(){var a=this.getTextOpacity();this.updateName();var b=this.getTextPosition(),c=this.getRectPosition(),d=this.getRectSize(),e=this.getArrowPath(),f=this.getDashArray(),g=this.shouldDisableClick()?"auto":"pointer";return{css:{cursor:g},text:{x:b.x,y:b.y,opacity:a},rect:{x:c.x,y:c.y,width:d.w,height:d.h,opacity:this.getNonTextOpacity(),fill:this.getFill(),stroke:this.get("stroke"),"stroke-dasharray":f,"stroke-width":this.getStrokeWidth()},arrow:{path:e,opacity:this.getNonTextOpacity(),fill:this.getFill(),stroke:this.get("stroke"),transform:this.getArrowTransform(),"stroke-dasharray":f,"stroke-width":this.getStrokeWidth()}}},animateUpdatedPos:function(a,b){var c=this.getAttributes();this.animateToAttr(c,a,b)},animateFromAttrToAttr:function(a,b,c,d){this.animateToAttr(a,0),this.animateToAttr(b,c,d)},setAttr:function(a,b,c,d){var e=["text","rect","arrow"];this.setAttrBase(e,a,b,c,d)}}),k=e.Collection.extend({model:j});c.VisBranchCollection=k,c.VisBranch=j,c.randomHueString=i},{"../app":11,"../graph/treeCompare":22,"../util/constants":37,"../visuals/visBase":56,backbone:1,underscore:10}],58:[function(a,b,c){var d=a("underscore"),e=a("backbone"),f=a("../util/constants").GRAPHICS,g=a("../visuals/visBase").VisBase,h=g.extend({defaults:{tail:null,head:null,animationSpeed:f.defaultAnimationTime,animationEasing:f.defaultEasing},validateAtInit:function(){var a=["tail","head"];d.each(a,function(a){if(!this.get(a))throw new Error(a+" is required!")},this)},getID:function(){return this.get("tail").get("id")+"."+this.get("head").get("id")},initialize:function(){this.validateAtInit(),this.gitVisuals=this.get("gitVisuals"),this.gitEngine=this.get("gitEngine"),this.get("tail").get("outgoingEdges").push(this)},remove:function(){this.removeKeys(["path"]),this.gitVisuals.removeVisEdge(this)},genSmoothBezierPathString:function(a,b){var c=a.getScreenCoords(),d=b.getScreenCoords();return this.genSmoothBezierPathStringFromCoords(c,d)},genSmoothBezierPathStringFromCoords:function(a,b){var c=function(a){return String(Math.round(a.x))+","+String(Math.round(a.y))},d=function(a,b,c){return c=c||f.curveControlPointOffset,{x:a.x,y:a.y+c*b}},e=function(a,b,c){return{x:a.x+b,y:a.y+c}};a=d(a,-1,this.get("tail").getRadius()),b=d(b,1,this.get("head").getRadius());var g="";g+="M"+c(a)+" ",g+="C",g+=c(d(a,-1))+" ",g+=c(d(b,1))+" ",g+=c(b);var h=f.arrowHeadSize||10;return g+=" L"+c(e(b,-h,h)),g+=" L"+c(e(b,h,h)),g+=" L"+c(b),g+="C",g+=c(d(b,1))+" ",g+=c(d(a,-1))+" ",g+=c(a)},getBezierCurve:function(){return this.genSmoothBezierPathString(this.get("tail"),this.get("head"))},getStrokeColor:function(){return f.visBranchStrokeColorNone},setOpacity:function(a){a=void 0===a?1:a,this.get("path").attr({opacity:a})},genGraphics:function(a){var b=this.getBezierCurve(),c=a.path(b).attr({"stroke-width":f.visBranchStrokeWidth,stroke:this.getStrokeColor(),"stroke-linecap":"round","stroke-linejoin":"round",fill:this.getStrokeColor()});c.toBack(),this.set("path",c)},getOpacity:function(){var a=this.gitVisuals.getCommitUpstreamStatus(this.get("tail")),b={branch:1,tag:1,head:f.edgeUpstreamHeadOpacity,none:f.edgeUpstreamNoneOpacity};if(void 0===b[a])throw new Error("bad stat");return b[a]},getAttributes:function(){var a=this.getBezierCurve(),b=this.getOpacity();return{path:{path:a,opacity:b}}},animateUpdatedPath:function(a,b){var c=this.getAttributes();this.animateToAttr(c,a,b)},animateFromAttrToAttr:function(a,b,c,d){this.animateToAttr(a,0),this.animateToAttr(b,c,d)},animateToAttr:function(a,b,c){return 0===b?(this.get("path").attr(a.path),void 0):(this.get("path").toBack(),this.get("path").stop(),this.get("path").animate(a.path,void 0!==b?b:this.get("animationSpeed"),c||this.get("animationEasing")),void 0)}}),i=e.Collection.extend({model:h});c.VisEdgeCollection=i,c.VisEdge=h},{"../util/constants":37,"../visuals/visBase":56,backbone:1,underscore:10}],59:[function(a,b,c){var d=a("underscore"),e=(a("backbone"),a("../util/constants").GRAPHICS),f=a("../visuals/visBase").VisBase,g=f.extend({defaults:{depth:void 0,maxWidth:null,outgoingEdges:null,circle:null,text:null,id:null,pos:null,radius:null,commit:null,animationSpeed:e.defaultAnimationTime,animationEasing:e.defaultEasing,fill:e.defaultNodeFill,"stroke-width":e.defaultNodeStrokeWidth,stroke:e.defaultNodeStroke},getID:function(){return this.get("id")},validateAtInit:function(){if(!this.get("id"))throw new Error("need id for mapping");if(!this.get("commit"))throw new Error("need commit for linking");this.get("pos")||this.set("pos",{x:Math.random(),y:Math.random()})},initialize:function(){this.validateAtInit(),this.gitVisuals=this.get("gitVisuals"),this.gitEngine=this.get("gitEngine"),this.set("outgoingEdges",[])},setDepth:function(a){this.set("depth",Math.max(this.get("depth")||0,a))},setDepthBasedOn:function(a,b){if(void 0===this.get("depth"))throw new Error("no depth yet!");var c=this.get("pos");c.y=this.get("depth")*a+b},getMaxWidthScaled:function(){var a=this.gitVisuals.getCommitUpstreamStatus(this.get("commit")),b={branch:1,tag:1,head:.3,none:.1};if(void 0===b[a])throw new Error("bad stat");return b[a]*this.get("maxWidth")},toFront:function(){this.get("circle").toFront(),this.get("text").toFront()},getOpacity:function(){var a={branch:1,tag:1,head:e.upstreamHeadOpacity,none:e.upstreamNoneOpacity},b=this.gitVisuals.getCommitUpstreamStatus(this.get("commit"));if(void 0===a[b])throw new Error("invalid status");return a[b]},getTextScreenCoords:function(){return this.getScreenCoords()},getAttributes:function(){var a=this.getScreenCoords(),b=this.getTextScreenCoords(),c=this.getOpacity(),d=this.getIsInOrigin()?e.originDash:"";return{circle:{cx:a.x,cy:a.y,opacity:c,r:this.getRadius(),fill:this.getFill(),"stroke-width":this.get("stroke-width"),"stroke-dasharray":d,stroke:this.get("stroke")},text:{x:b.x,y:b.y,opacity:c}}},animatePositionTo:function(a,b,c){var d=this.getAttributes(),e=a.getAttributes();d.circle=e.circle,d.text=e.text,this.animateToAttr(d,b,c)},highlightTo:function(a,b,c){var d=a.get("fill"),e={circle:{fill:d,stroke:d,"stroke-dasharray":"","stroke-width":5*this.get("stroke-width")},text:{}};this.animateToAttr(e,b,c)},animateUpdatedPosition:function(a,b){var c=this.getAttributes();this.animateToAttr(c,a,b)},animateFromAttrToAttr:function(a,b,c,d){this.animateToAttr(a,0),this.animateToAttr(b,c,d)},animateToSnapshot:function(a,b,c){a[this.getID()]&&this.animateToAttr(a[this.getID()],b,c)},setAttr:function(a,b,c,d){var e=["text","circle"];this.setAttrBase(e,a,b,c,d)},animateToAttr:function(a,b,c){f.prototype.animateToAttr.apply(this,arguments);{var d=void 0!==b?b:this.get("animationSpeed");c||this.get("animationEasing")}"bounce"==c&&a.circle&&void 0!==a.circle.cx&&a.text&&void 0!==a.text.x&&(this.get("circle").animate(a.circle.cx,d,"easeInOut"),this.get("text").animate(a.text.x,d,"easeInOut"))},getScreenCoords:function(){var a=this.get("pos");return this.gitVisuals.toScreenCoords(a)},getRadius:function(){return this.get("radius")||e.nodeRadius},getParentScreenCoords:function(){return this.get("commit").get("parents")[0].get("visNode").getScreenCoords()},setBirthPosition:function(){var a=this.getParentScreenCoords();this.get("circle").attr({cx:a.x,cy:a.y,opacity:0,r:0}),this.get("text").attr({x:a.x,y:a.y,opacity:0})},setBirthFromSnapshot:function(a){var b=this.get("commit").get("parents")[0].get("visNode").getID(),c=a[b];this.get("circle").attr({opacity:0,r:0,cx:c.circle.cx,cy:c.circle.cy}),this.get("text").attr({opacity:0,x:c.text.x,y:c.text.y});var d={x:c.circle.cx,y:c.circle.cy};this.setOutgoingEdgesBirthPosition(d)},setBirth:function(){this.setBirthPosition(),this.setOutgoingEdgesBirthPosition(this.getParentScreenCoords())},setOutgoingEdgesOpacity:function(a){d.each(this.get("outgoingEdges"),function(b){b.setOpacity(a)})},animateOutgoingEdgesToAttr:function(a){d.each(this.get("outgoingEdges"),function(b){var c=a[b.getID()];b.animateToAttr(c)},this)},animateOutgoingEdges:function(a,b){d.each(this.get("outgoingEdges"),function(c){c.animateUpdatedPath(a,b)},this)},animateOutgoingEdgesFromSnapshot:function(a,b,c){d.each(this.get("outgoingEdges"),function(d){var e=a[d.getID()];d.animateToAttr(e,b,c)},this)},setOutgoingEdgesBirthPosition:function(a){d.each(this.get("outgoingEdges"),function(b){var c=b.get("head").getScreenCoords(),d=b.genSmoothBezierPathStringFromCoords(a,c);b.get("path").stop(),b.get("path").attr({path:d,opacity:0})},this)},parentInFront:function(){this.get("commit").get("parents")[0].get("visNode").toFront()},getFontSize:function(a){return a.length<3?12:a.length<5?10:8},getFill:function(){var a=this.gitVisuals.getCommitUpstreamStatus(this.get("commit"));return"head"==a?e.headRectFill:"tag"==a?e.orphanNodeFill:"none"==a?e.orphanNodeFill:this.gitVisuals.getBlendedHuesForCommit(this.get("commit"))},attachClickHandlers:function(){if(!this.get("gitVisuals").options.noClick){var b="git checkout "+this.get("commit").get("id"),c=a("../app");d.each([this.get("circle"),this.get("text")],function(a){a.click(function(){c.getEventBaton().trigger("commandSubmitted",b)}),$(a.node).css("cursor","pointer")})}},setOpacity:function(a){a=void 0===a?1:a;var b=["circle","text"];d.each(b,function(b){this.get(b).attr({opacity:a})},this)},remove:function(){this.removeKeys(["circle"],["text"]);var a=this.get("text");a&&a.remove(),this.gitVisuals.removeVisNode(this)},removeAll:function(){this.remove(),this.removeAllEdges()},removeAllEdges:function(){d.each(this.get("outgoingEdges"),function(a){a.remove()},this)},getExplodeStepFunc:function(){var a=this.get("circle"),b=20,c=Math.PI+1*Math.random()*Math.PI,d=.2,e=.01,f=b*Math.cos(c),g=b*Math.sin(c),h=a.attr("cx"),i=a.attr("cy"),j=this.gitVisuals.paper.width,k=this.gitVisuals.paper.height,l=.8,m=1,n=function(){return g+=d*m-e*g,f-=e*f,h+=f*m,i+=g*m,(0>h||h>j)&&(f=l*-f,h=0>h?0:j),(0>i||i>k)&&(g=l*-g,i=0>i?0:k),a.attr({cx:h,cy:i}),.01>f*f+g*g&&0===Math.abs(i-k)?!1:!0};return n},makeCircle:function(a){var b=this.getScreenCoords();return a.circle(b.x,b.y,this.getRadius()).attr(this.getAttributes().circle)},makeText:function(a){var b=this.getTextScreenCoords();return a.text(b.x,b.y,String(this.get("id")))},genGraphics:function(){var a=this.gitVisuals.paper,b=this.makeCircle(a),c=this.makeText(a);c.attr({"font-size":this.getFontSize(this.get("id")),"font-weight":"bold","font-family":"Monaco, Courier, font-monospace",opacity:this.getOpacity()}),this.set("circle",b),this.set("text",c),this.attachClickHandlers()}});c.VisNode=g},{"../app":11,"../util/constants":37,"../visuals/visBase":56,backbone:1,underscore:10}],60:[function(a,b,c){var d=a("underscore"),e=a("backbone"),f=a("../util/constants").GRAPHICS,g=a("../visuals/visBase").VisBase,h=a("../graph/treeCompare"),i=function(){var a=Math.random(),b="hsb("+String(a)+",0.7,1)";return b},j=g.extend({defaults:{pos:null,text:null,rect:null,isHead:!1,fill:f.tagFill,stroke:f.tagStroke,"stroke-width":f.tagStrokeWidth,offsetX:f.nodeRadius,offsetY:f.nodeRadius,vPad:2,hPad:2,animationSpeed:f.defaultAnimationTime,animationEasing:f.defaultEasing},validateAtInit:function(){if(!this.get("tag"))throw new Error("need a Tag!")},getID:function(){return this.get("tag").get("id")},initialize:function(){if(this.validateAtInit(),this.gitVisuals=this.get("gitVisuals"),this.gitEngine=this.get("gitEngine"),!this.gitEngine)throw new Error("asd wtf");this.get("tag").set("visTag",this)},getCommitPosition:function(){var a=this.gitEngine.getCommitFromRef(this.get("tag")),b=a.get("visNode");return b.getScreenCoords()},getDashArray:function(){return this.get("gitVisuals").getIsGoalVis()?this.getIsLevelTagCompared()?"":"--":""},getIsGoalAndNotCompared:function(){return this.get("gitVisuals").getIsGoalVis()?!this.getIsLevelTagCompared():!1},getIsLevelTagCompared:function(){var a=this.get("gitVisuals").getLevelBlob();return!h.onlyMasterCompared(a)},getTagStackIndex:function(){if(this.get("isHead"))return 0;var a=this.getTagStackArray(),b=-1;return d.each(a,function(a,c){a.obj==this.get("tag")&&(b=c)},this),b},getTagStackLength:function(){return this.get("isHead")?1:this.getTagStackArray().length},isTagStackEmpty:function(){var a=this.gitVisuals.tagStackMap[this.getCommitID()];return a?0===a.length:!0},getCommitID:function(){var a=this.get("tag").get("target");return a.get("id")},getTagStackArray:function(){var a=this.gitVisuals.tagStackMap[this.getCommitID()];return void 0===a?(this.gitVisuals.calcTagStacks(),this.getTagStackArray()):a},getTextPosition:function(){var a=this.getCommitPosition(),b=this.getTagStackIndex();return{x:a.x+this.get("offsetX"),y:a.y+b*f.multiTagY+this.get("offsetY")}},getRectPosition:function(){var a=this.getTextPosition(),b=this.getTextSize();return{x:a.x-this.get("hPad"),y:a.y-.5*b.h-this.get("vPad")}},getTextSize:function(){var a=function(a){var b=a.get("text")?a.get("text").node:null;return null===b?0:b.clientWidth},b=function(a){return a.w||(a.w=75),a.h||(a.h=20),a},c=this.get("text").node,e=0;return d.each(this.getTagStackArray(),function(b){e=Math.max(e,a(b.obj.get("visTag")))}),b({w:e,h:c.clientHeight})},getSingleRectSize:function(){var a=this.getTextSize(),b=this.get("vPad"),c=this.get("hPad");return{w:a.w+2*b,h:a.h+2*c}},getRectSize:function(){var a=this.getTextSize(),b=this.get("vPad"),c=this.get("hPad"),d=this.getTagStackLength();return{w:a.w+2*b,h:a.h*d+2*c}},getIsRemote:function(){return this.get("tag").getIsRemote()},getName:function(){{var a=this.get("tag").getName();this.getIsRemote(),this.gitEngine.getIsHg()}return a},nonTextToFront:function(){this.get("rect").toFront()},textToFront:function(){this.get("text").toFront()},textToFrontIfInStack:function(){0!==this.getTagStackIndex()&&this.get("text").toFront()},remove:function(){this.removeKeys(["text","rect"]),this.gitVisuals.removeVisTag(this)},handleModeChange:function(){},genGraphics:function(a){var b=this.getTextPosition(),c=this.getName(),e=a.text(b.x,b.y,String(c));e.attr({"font-size":14,"font-family":"Monaco, Courier, font-monospace",opacity:this.getTextOpacity(),"text-anchor":"start"}),this.set("text",e);
var f=this.getAttributes(),g=this.getRectPosition(),h=this.getRectSize(),i=a.rect(g.x,g.y,h.w,h.h,8).attr(f.rect);this.set("rect",i);var j=["text","rect"];d.each(j,function(a){$(this.get(a).node).css(f.css)},this),this.attachClickHandlers(),i.toFront(),e.toFront()},attachClickHandlers:function(){if(!this.get("gitVisuals").options.noClick){var a=[this.get("rect"),this.get("text")];d.each(a,function(a){a.click(d.bind(this.onClick,this))},this)}},shouldDisableClick:function(){return this.get("isHead")&&!this.gitEngine.getDetachedHead()},onClick:function(){if(!this.shouldDisableClick()){var b="git checkout "+this.get("tag").get("id"),c=a("../app");c.getEventBaton().trigger("commandSubmitted",b)}},updateName:function(){this.get("text").attr({text:this.getName()})},getNonTextOpacity:function(){return this.get("isHead")?this.gitEngine.getDetachedHead()?1:0:0!==this.getTagStackIndex()?0:1},getTextOpacity:function(){return this.get("isHead")?this.gitEngine.getDetachedHead()?1:0:this.getIsGoalAndNotCompared()?0===this.getTagStackIndex()?.7:.3:1},getStrokeWidth:function(){return this.getIsGoalAndNotCompared()?this.get("stroke-width")/5:this.get("stroke-width")},getAttributes:function(){var a=this.getTextOpacity();this.updateName();var b=this.getTextPosition(),c=this.getRectPosition(),d=this.getRectSize(),e=this.getDashArray(),f=this.shouldDisableClick()?"auto":"pointer";return{css:{cursor:f},text:{x:b.x,y:b.y,opacity:a},rect:{x:c.x,y:c.y,width:d.w,height:d.h,opacity:this.getNonTextOpacity(),fill:this.get("fill"),stroke:this.get("stroke"),"stroke-dasharray":e,"stroke-width":this.getStrokeWidth()}}},animateUpdatedPos:function(a,b){var c=this.getAttributes();this.animateToAttr(c,a,b)},animateFromAttrToAttr:function(a,b,c,d){this.animateToAttr(a,0),this.animateToAttr(b,c,d)},setAttr:function(a,b,c,d){var e=["text","rect"];this.setAttrBase(e,a,b,c,d)}}),k=e.Collection.extend({model:j});c.VisTagCollection=k,c.VisTag=j,c.randomHueString=i},{"../app":11,"../graph/treeCompare":22,"../util/constants":37,"../visuals/visBase":56,backbone:1,underscore:10}],61:[function(a,b,c){var d=a("__browserify_process"),e=a("underscore"),f=f=a("../util").isBrowser()?window.Backbone:a("backbone"),g=a("../models/collections"),h=g.CommitCollection,i=g.BranchCollection,j=g.TagCollection,k=a("../util/eventBaton").EventBaton,l=a("../visuals").GitVisuals,m=f.View.extend({initialize:function(a){a=a||{},this.options=a,this.customEvents=e.clone(f.Events),this.containerElement=a.containerElement;var b=this,c=a.containerElement||$("#canvasHolder")[0];new Raphael(c,200,200,function(){var c=this;d.nextTick(function(){b.paperInitialize(c,a)})})},paperInitialize:function(b,c){this.treeString=c.treeString,this.paper=b;var f=a("../app");this.eventBaton=c.noKeyboardInput?new k({noInput:!0}):f.getEventBaton(),this.commitCollection=new h,this.branchCollection=new i,this.tagCollection=new j,this.gitVisuals=new l({commitCollection:this.commitCollection,branchCollection:this.branchCollection,tagCollection:this.tagCollection,paper:this.paper,noClick:this.options.noClick,isGoalVis:this.options.isGoalVis,smallCanvas:this.options.smallCanvas,visualization:this});var g=a("../git").GitEngine;this.gitEngine=new g({collection:this.commitCollection,branches:this.branchCollection,tags:this.tagCollection,gitVisuals:this.gitVisuals,eventBaton:this.eventBaton}),this.gitEngine.init(),this.gitVisuals.assignGitEngine(this.gitEngine),this.myResize(),$(window).on("resize",e.bind(function(){this.myResize()},this)),this.gitVisuals.drawTreeFirstTime(),this.treeString&&this.gitEngine.loadTreeFromString(this.treeString),this.options.zIndex&&this.setTreeIndex(this.options.zIndex),this.shown=!1,this.setTreeOpacity(0),d.nextTick(e.bind(this.fadeTreeIn,this)),this.customEvents.trigger("gitEngineReady"),this.customEvents.trigger("paperReady")},clearOrigin:function(){delete this.originVis},makeOrigin:function(a){return this.originVis=new m(e.extend({},this.options,{noKeyboardInput:!0,noClick:!0,treeString:a.treeString})),this.originVis.customEvents.on("paperReady",e.bind(function(){var a=$(this.paper.canvas).css("z-index");this.originVis.setTreeIndex(a)},this)),this.originVis},originToo:function(a,b){if(this.originVis){var c=e.bind(function(){this.originVis[a].apply(this.originVis,b)},this);return this.originVis.paper?(c(),void 0):(this.originVis.customEvents.on("paperReady",c),void 0)}},setTreeIndex:function(a){$(this.paper.canvas).css("z-index",a),this.originToo("setTreeIndex",arguments)},setTreeOpacity:function(a){0===a&&(this.shown=!1),$(this.paper.canvas).css("opacity",a),this.originToo("setTreeOpacity",arguments)},getAnimationTime:function(){return 300},fadeTreeIn:function(){this.shown=!0,this.paper&&($(this.paper.canvas).animate({opacity:1},this.getAnimationTime()),this.originToo("fadeTreeIn",arguments))},fadeTreeOut:function(){this.shown=!1,$(this.paper.canvas).animate({opacity:0},this.getAnimationTime()),this.originToo("fadeTreeOut",arguments)},hide:function(){this.fadeTreeOut(),setTimeout(e.bind(function(){$(this.paper.canvas).css("visibility","hidden")},this),this.getAnimationTime()),this.originToo("hide",arguments)},show:function(){$(this.paper.canvas).css("visibility","visible"),setTimeout(e.bind(this.fadeTreeIn,this),10),this.originToo("show",arguments)},showHarsh:function(){$(this.paper.canvas).css("visibility","visible"),this.setTreeOpacity(1),this.originToo("showHarsh",arguments)},resetFromThisTreeNow:function(a){this.treeString=a;var b=this.getOriginInTreeString(a);if(b){var c=this.gitEngine.printTree(b);this.originToo("resetFromThisTreeNow",[c])}},getOriginInTreeString:function(a){var b=JSON.parse(unescape(a));return b.originTree},reset:function(a){var b=a||this.treeString;if(this.setTreeOpacity(0),b?this.gitEngine.loadTreeFromString(b):this.gitEngine.defaultInit(),this.fadeTreeIn(),this.originVis)if(b){var c=this.getOriginInTreeString(b);this.originToo("reset",[JSON.stringify(c)])}else this.originToo("reset",arguments)},tearDown:function(a){a=a||{},this.gitEngine.tearDown(),this.gitVisuals.tearDown(),delete this.paper,this.originToo("tearDown",arguments)},die:function(){this.fadeTreeOut(),setTimeout(e.bind(function(){this.shown||this.tearDown({fromDie:!0})},this),this.getAnimationTime()),this.originToo("die",arguments)},myResize:function(){if(this.paper){var a=1,b=this.el,c=b.clientWidth-a,d=b.clientHeight-a;if(this.containerElement)$(this.paper.canvas).css({position:"absolute"});else{var e=b.offsetLeft,f=b.offsetTop;$(this.paper.canvas).css({position:"absolute",left:e+"px",top:f+"px"})}this.paper.setSize(c,d),this.gitVisuals.canvasResize(c,d)}}});c.Visualization=m},{"../app":11,"../git":20,"../models/collections":33,"../util":41,"../util/eventBaton":40,"../visuals":54,__browserify_process:4,backbone:1,underscore:10}],62:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C7","id":"master"},"bugWork":{"target":"C2","id":"bugWork"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C2"],"id":"C5"},"C6":{"parents":["C4","C5"],"id":"C6"},"C7":{"parents":["C6"],"id":"C7"}},"HEAD":{"target":"master","id":"HEAD"}}',solutionCommand:"git branch bugWork master^^2^",startTree:'{"branches":{"master":{"target":"C7","id":"master"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C2"],"id":"C5"},"C6":{"parents":["C4","C5"],"id":"C6"},"C7":{"parents":["C6"],"id":"C7"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{en_US:"Multiple parents",de_DE:"Mehrere Vorgänger",zh_CN:"多个父提交记录"},hint:{en_US:"Use `git branch bugWork` with a target commit to create the missing reference.",de_DE:"Nutze `git branch bugWork` mit einem Ziel-Commit um die fehlende Referenz zu erstellen.",zh_CN:"使用`git branch bugWork`加上一个目标提交记录来创建消失的引用。"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["### Specifying Parents","","Like the `~` modifier, the `^` modifier also accepts an optional number after it.","","Rather than specifying the number of generations to go back (what `~` takes), the modifier on `^` specifies which parent reference to follow from a merge commit. Remember that merge commits have multiple parents, so the path to choose is ambiguous.","",'Git will normally follow the "first" parent upwards from a merge commit, but specifying a number with `^` changes this default behavior.',"","Enough talking, let's see it in action.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Here we have a merge commit. If we checkout `master^` without the modifier, we will follow the first parent after the merge commit. ","","(*In our visuals, the first parent is positioned directly above the merge commit.*)"],afterMarkdowns:["Easy -- this is what we are all used to."],command:"git checkout master^",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Now let's try specifying the second parent instead..."],afterMarkdowns:["See? We followed the other parent upwards."],command:"git checkout master^2",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["The `^` and `~` modifiers can make moving around a commit tree very powerful:"],afterMarkdowns:["Lightning fast!"],command:"git checkout HEAD~; git checkout HEAD^2; git checkout HEAD~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Even crazier, these modifiers can be chained together! Check this out:"],afterMarkdowns:["The same movement as before, but all in one command."],command:"git checkout HEAD~^2~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"ModalAlert",options:{markdowns:["### Put it to practice","","To complete this level, create a new branch at the specified destination.","","Obviously it would be easy to specify the commit directly (with something like `C6`), but I challenge you to use the modifiers we talked about instead!"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["### Vorgänger ansteuern","","Wie der Operator `~` akzeptiert auch der Operator `^` eine optionale Anzahl.","","Anstatt der Anzahl von Schritten, die zurückgegangen werden soll (das ist das, was man bei `~` angibt), bezeichnet die Anzahl nach `^` welchem Vorgänger bei einem Merge-Commit gefolgt werden soll. Du erinnerst dich, dass ein Merge-Commit mehrere Vorgänger hat; es gilt also aus diesen auszuwählen.","",'Normalerweise folgt Git dem "ersten" Vorgänger des Merge-Commit, aber durch Angabe einer Zahl nach dem `^` lässt sich dieses Verhalten ändern.',"","Aber genug gequatscht, schauen wir's uns in Aktion an.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Hier sehen wir einen Merge-Commit. Wenn wir einen Checkout von `master^` ohne Zahl machen, wird Git auf den ersten Vorgänger des Commits zurückgehen. ","","*(In unserer Darstellung befindet sich der erste Vorgänger direkt über dem Merge-Commit.)*"],afterMarkdowns:["Simpel -- so kennen wir das."],command:"git checkout master^",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Jetzt versuchen wir mal stattdessen den zweiten Vorgänger anzugeben ..."],afterMarkdowns:["Gesehen? Wir gehen zu dem anderen Vorgänger zurück."],command:"git checkout master^2",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Die Operatoren `^` und `~` geben uns eine Menge Möglichkeiten für das Navigieren durch den Commit-Baum:"],afterMarkdowns:["Bämm!"],command:"git checkout HEAD~; git checkout HEAD^2; git checkout HEAD~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Noch abgefahrener: die beiden Operatoren können verkettet werden. Aufgepasst:"],afterMarkdowns:["Gleicher Ablauf wie zuvor, nur alles in einem Befehl."],command:"git checkout HEAD~^2~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"ModalAlert",options:{markdowns:["### Setzen wir's um","","Erstelle einen neuen Branch an dem angegebenen Ziel, um diesen Level abzuschließen.","","Es ist natürlich möglich den Commit einfach direkt anzugeben (also mit sowas wie `C6`), aber ich fordere dich heraus stattdessen die relativen Operatoren zu benutzen!"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["### 选择父提交","","和`~`修改符一样，`^`修改符之后也可以跟一个（可选的）数字。","","这不是用来指定向上返回几代（`~`的作用），`^`后的数字指定跟随合并提交记录的哪一个父提交。还记得一个合并提交有多个父提交吧，所有选择哪条路径不是那么清晰。","",'Git默认选择跟随合并提交的"第一个"父提交，使用`^`后跟一个数字来改变这一默认行为。',"","废话不多说，举个例子。",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["这里有一个合并提交。如果不加数字修改符直接切换到`master^`，会回到第一个父提交。","","(*在我们的图示中，第一个父提交是指合并提交正上方的那个父提交。*)"],afterMarkdowns:["OK--这恰好是我们想要的。"],command:"git checkout master^",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["现在来试试选择第二个父提交……"],afterMarkdowns:["看见了吧？我们回到了第二个父提交。"],command:"git checkout master^2",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["使用`^`和`~`可以自由在在提交树中移动："],afterMarkdowns:["快若闪电！"],command:"git checkout HEAD~; git checkout HEAD^2; git checkout HEAD~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["再疯狂点，这些修改符支持链式操作！试一下这个："],afterMarkdowns:["和前面的结果一样，但只用了一条命令。"],command:"git checkout HEAD~^2~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"ModalAlert",options:{markdowns:["### 实践一下","","要完成此关，在指定的目标位置创建一个新的分支。","","很明显可以简单的直接使用提交记录的hash值（比如`C6`），但我要求你使用刚刚讲到的相对引用修饰符！"]}}]}}}},{}],63:[function(a,b,c){c.levelSequences={intro:[a("./intro/commits").level,a("./intro/branching").level,a("./intro/merging").level,a("./intro/rebasing").level],rampup:[a("./rampup/detachedHead").level,a("./rampup/relativeRefs").level,a("./rampup/relativeRefs2").level,a("./rampup/reversingChanges").level],move:[a("./rampup/cherryPick").level,a("./rampup/interactiveRebase").level],mixed:[a("./mixed/grabbingOneCommit").level,a("./mixed/jugglingCommits").level,a("./mixed/jugglingCommits2").level,a("./mixed/tags").level,a("./mixed/describe").level],advanced:[a("./rebase/manyRebases").level,a("./advanced/multipleParents").level,a("./rebase/selectiveRebase").level],remote:[a("./remote/clone").level,a("./remote/remoteBranches").level,a("./remote/fetch").level,a("./remote/pull").level,a("./remote/fakeTeamwork").level,a("./remote/push").level,a("./remote/fetchRebase").level],remoteAdvanced:[a("./remote/pushManyFeatures").level,a("./remote/mergeManyFeatures").level,a("./remote/tracking").level,a("./remote/pushArgs").level,a("./remote/pushArgs2").level,a("./remote/fetchArgs").level,a("./remote/sourceNothing").level,a("./remote/pullArgs").level]};var d=c.sequenceInfo={intro:{displayName:{en_US:"Introduction Sequence",de_DE:"Einführung",ja:"まずはここから",fr_FR:"Séquence d'introduction",zh_CN:"基础篇",ko:"기본 명령어"},about:{en_US:"A nicely paced introduction to the majority of git commands",de_DE:"Eine gut abgestimmte Einführung in die wichtigsten Git-Befehle",ja:"gitの基本的なコマンド群をほどよいペースで学ぶ",fr_FR:"Une introduction en douceur à la majorité des commandes git",zh_CN:"循序渐进介绍git主要命令",ko:"브랜치 관련 주요 git 명령어를 깔끔하게 알려드립니다"}},rampup:{displayName:{en_US:"Ramping Up",de_DE:"Aufstieg",ja:"次のレベルに進もう",fr_FR:"Montée en puissance",zh_CN:"进阶篇"},about:{en_US:"The next serving of 100% git awesomes-ness. Hope you're hungry",de_DE:"Eine Portion Git-Wahnsinn zum Thema Navigation",ja:"更にgitの素晴らしさを堪能しよう",fr_FR:"Le prochain service git 100% excellence. J'espère que vous êtes affamés",zh_CN:"接下来是git的超赞特性。迫不及待了吧！"}},remote:{tab:"remote",displayName:{en_US:"Push & Pull -- Git Remotes!",de_DE:"Push & Pull -- entfernte Repositorys"},about:{en_US:"Time to share your 1's and 0's kids; coding just got social",de_DE:"Zeit Eure 1en und 0en zu teilen; Coding mit sozialer Komponente"}},remoteAdvanced:{tab:"remote",displayName:{en_US:"To Origin And Beyond -- Advanced Git Remotes!",de_DE:"Bis zum origin und noch weiter"},about:{en_US:"And you thought being a benevolent dictator would be fun...",de_DE:"Git Remotes für Fortgeschrittene"}},move:{displayName:{en_US:"Moving Work Around",de_DE:"Code Umherschieben",ja:"Rebaseをモノにする",fr_FR:"Maîtrise Rebase, Luke!",zh_CN:"精通Rebase！",ko:"리베이스 완전정복!"},about:{en_US:"Get comfortable with modifying the source tree",de_DE:"Gewöhn dich daran, den Git-Baum zu verändern",ja:"話題のrebaseってどんなものだろう？って人にオススメ",fr_FR:"Qu'est-ce que ce rebase dont tout le monde parle ? Découvrez-le !",ko:"그 좋다고들 말하는 rebase에 대해 알아봅시다!",zh_CN:"大家都在说的rebase究竟是神马？看看吧！"}},mixed:{displayName:{en_US:"A Mixed Bag",de_DE:"Ein Kessel Buntes",ja:"様々なtips",fr_FR:"Un assortiment",ko:"종합선물세트",zh_CN:"大杂烩？"},about:{en_US:"A mixed bag of Git techniques, tricks, and tips",de_DE:"Eine bunte Mischung von Techniken, Tipps und Tricks",ja:"gitを使う上での様々なtipsやテクニックなど",fr_FR:"Un assortiment de techniques et astuces pour utiliser Git",ko:"Git을 다루는 다양한 팁과 테크닉을 다양하게 알아봅니다",zh_CN:"Git技术，技巧与贴士杂烩"}},advanced:{displayName:{en_US:"Advanced Topics",de_DE:"Themen für Fortgeschrittene",fr_FR:"Sujets Avancés",zh_CN:"高级主题"},about:{en_US:"For the truly brave!",de_DE:"... die nie ein Mensch zuvor gesehen hat.",fr_FR:"Pour les plus courageux !",zh_CN:"只为真正的勇士！"}}};c.getTabForSequence=function(a){var b=d[a];return b.tab?b.tab:"main"}},{"./advanced/multipleParents":62,"./intro/branching":64,"./intro/commits":65,"./intro/merging":66,"./intro/rebasing":67,"./mixed/describe":68,"./mixed/grabbingOneCommit":69,"./mixed/jugglingCommits":70,"./mixed/jugglingCommits2":71,"./mixed/tags":72,"./rampup/cherryPick":73,"./rampup/detachedHead":74,"./rampup/interactiveRebase":75,"./rampup/relativeRefs":76,"./rampup/relativeRefs2":77,"./rampup/reversingChanges":78,"./rebase/manyRebases":79,"./rebase/selectiveRebase":80,"./remote/clone":81,"./remote/fakeTeamwork":82,"./remote/fetch":83,"./remote/fetchArgs":84,"./remote/fetchRebase":85,"./remote/mergeManyFeatures":86,"./remote/pull":87,"./remote/pullArgs":88,"./remote/push":89,"./remote/pushArgs":90,"./remote/pushArgs2":91,"./remote/pushManyFeatures":92,"./remote/remoteBranches":93,"./remote/sourceNothing":94,"./remote/tracking":95}],64:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C1","id":"master"},"bugFix":{"target":"C1","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"bugFix","id":"HEAD"}}',solutionCommand:"git branch bugFix;git checkout bugFix",name:{en_US:"Branching in Git",de_DE:"Branches in Git",ja:"Gitのブランチ",ko:"Git에서 브랜치 쓰기",fr_FR:"Gérer les branches avec Git",zh_CN:"建立Git分支"},hint:{en_US:'Make a new branch with "git branch [name]" and check it out with "git checkout [name]"',de_DE:'Lege mit "git branch <Name>" einen neuen Branch an und checke ihn mit "git checkout <Name> aus',ja:'ブランチの作成（"git branch [ブランチ名]"）と、チェックアウト（"git checkout [ブランチ名]"）',fr_FR:'Faites une nouvelle branche avec "git branch [nom]" positionnez-vous dans celle-ci avec "git checkout [nom]"',zh_CN:"用 'git branch [分支名]' 来创建分支，用 'git checkout [分支名]' 切换到分支",ko:'"git branch [브랜치명]"으로 새 브랜치를 만들고, "git checkout [브랜치명]"로 그 브랜치로 이동하세요'},disabledMap:{"git revert":!0},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Branches","","Branches in Git are incredibly lightweight as well. They are simply references to a specific commit -- nothing more. This is why many Git enthusiasts chant the mantra:","","```","branch early, and branch often","```","","Because there is no storage / memory overhead with making many branches, it's easier to logically divide up your work than have big beefy branches.","",'When we start mixing branches and commits, we will see how these two features combine. For now though, just remember that a branch essentially says "I want to include the work of this commit and all parent commits."']}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's see what branches look like in practice.","","Here we will create a new branch named `newImage`"],afterMarkdowns:["There, that's all there is to branching! The branch `newImage` now refers to commit `C1`"],command:"git branch newImage",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's try to put some work on this new branch. Hit the button below"],afterMarkdowns:["Oh no! The `master` branch moved but the `newImage` branch didn't! That's because we weren't \"on\" the new branch, which is why the asterisk (*) was on `master`"],command:"git commit",beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's tell git we want to checkout the branch with","","```","git checkout [name]","```","","This will put us on the new branch before committing our changes"],afterMarkdowns:["There we go! Our changes were recorded on the new branch"],command:"git checkout newImage; git commit",beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["Ok! You are all ready to get branching. Once this window closes,","make a new branch named `bugFix` and switch to that branch"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branches in Git","","Branches sind in Git extrem schlank. Sie sind einfach Verweise auf einen bestimmten Commit -- das ist alles. Es ist unter Git-Enthusiasten deshalb gängige Praxis, früh und oft Branches anzulegen.","","Da das Anlegen von Branches keinen Plattenplatz und Speicher verbraucht, liegt es nahe die Arbeit in kleine logische Häppchen aufzuteilen, anstatt mit wenigen großen, monolithischen Branches zu hantieren.","",'Wir werden sehen wie Commits und Branches zusammengehören sobald wir anfangen mit beiden zu arbeiten. Bis hierhin merk dir einfach, dass ein Branch im Prinzip bedeutet "ich möchte die Arbeit, die in diesem Commit und seinen Vorgändern steckt, sichern".']}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Schauen wir mal, wie Branches in der Praxis aussehen.","","Wir legen einen neuen Branch an und nennen ihn `issue`:"],afterMarkdowns:["Und das war's auch schon, mehr ist es nicht. Der Branch `issue` zeigt nun auf den Commit `C1`."],command:"git branch issue",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Lass uns mal ein wenig auf dem neuen Branch arbeiten. Machen wir einen Commit:"],afterMarkdowns:['Oi! Der Branch `master` hat sich verändert, aber der Branch `issue` nicht. Das liegt daran, dass wir nicht "auf" dem neuen Branch waren, weshalb das Sternchen `*` auch hinter `master` steht.'],command:"git commit",beforeCommand:"git branch issue"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Sagen wir Git also erst mal auf welchem Branch wir arbeiten wollen, und zwar mit","","```","git checkout <Name>","```","","Das wird uns auf den neuen Branch bringen bevor wir unsere Änderungen committen."],afterMarkdowns:["Und fertig! Unsere Änderungen wurden im neuen Branch gespeichert."],command:"git checkout issue; git commit",beforeCommand:"git branch issue"}},{type:"ModalAlert",options:{markdowns:["Cool! Jetzt bist du soweit, selbst Branches anzulegen. Wenn dieses Fenster geschlossen wurde, leg einen neuen Branch namens `bugFix` an und schalte auf diesen um."]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## Gitのブランチ","","Gitではコミットだけでなく、ブランチもまた信じられないほど軽量です。ブランチとは単に特定のコミットを指示したポインタにしか過ぎません。Gitの達人は決まってこう言うのは、そのためです：","","```","早めに、かつ頻繁にブランチを切りなさい","```","","どれほど多くのブランチを作ってもストレージやメモリを全然使わないので、ブランチを肥大化させるよりも論理的に分割していく方が簡単なのです。","","ブランチとコミットをあわせて使い始めると、これら2つのフィーチャがどのように連動して機能するかがわかるでしょう。ここではとりあえず、ブランチは基本的には「あるコミットとその親のコミットたちを含めた全てのコミット」のことを呼ぶと覚えておいてください。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["では実際にブランチがどのようなものかを見ていきましょう。","","`newImage`という名前の新しいブランチを切ってみることにします。"],afterMarkdowns:["以上。必要な手順はこれだけです。いま作成された`newImage`ブランチは`C1`コミットを指しています。"],command:"git branch newImage",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["この新しいブランチに何か変更を加えてみましょう。次のボタンを押してください。"],afterMarkdowns:["あれ？`newImage`ではなくて`master`ブランチが移動してしまいました。これは、私たちが`newImage`のブランチ上で作業していなかったためです。どのブランチで作業しているかは、アスタリスク(*)がついてるかどうかで分かります。"],command:"git commit",beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["今度は作業したいブランチ名をgitに伝えてみましょう。","","```","git checkout [ブランチ名]","```","","このようにして、コミットする前に新しいブランチへと作業ブランチを移動することができます。"],afterMarkdowns:["できましたね。今度は新しいブランチに対して変更を記録することができました。"],command:"git checkout newImage; git commit",beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["OK! もうどんなブランチでも切れますね。このウィンドウを閉じて、","`bugFix`という名前のブランチを作成し、そのブランチをチェックアウトしてみましょう。"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branches Git","","Les branches sous Git sont incroyablement légères aussi. Elles sont simplment des références un commit spécifique -- rien de plus. C'est pourquoi beaucoup d'enthousiastes répètent en cœur :","","```","n'attendez pas pour faire des branches, et faites souvent des branches","```","","Parce qu'il n'y a pas de surcoût (stockage/mémoire) associés aux branches, il est facile de diviser son travail en de nombreuses branches plutôt que d'avoir quelques grosses branches.","","Nous verrons comment les banches et les commits interagissent quand nous les utiliserons ensemble. Pour l'instant, souvenez-vous qu'une branche est un moyen d'exprimer \"Je veux inclure le contenu de ce commit et de tous les commits parents.\""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Regardons à quoi ressemblent les branches en pratique.","","Nous allons nous positionner (checkout) dans une nouvelle branche appellée `newImage`"],afterMarkdowns:["Et voilà, c'est tout ! La branche `newImage` se réfère désormais au commit `C1`"],command:"git branch newImage",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Travaillons mainenant dans cette branche. Appuyez sur le bouton ci-dessous."],afterMarkdowns:["Oh non! La branche `master` a bougé mais pas la branche `newImage` ! C'est parce aue nous n'étions pas  \"sur\" la nouvelle branche, comme indiqué par l'asterisque (*) sur `master`"],command:"git commit",beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Indiquons à git que nous voulons nous positionner sur la branche avec ","","```","git checkout [nom]","```","","Ceci nous positionne sur la nouvelle branche avant de faire un commit avec nos modifications"],afterMarkdowns:["C'est parti ! Nos modifications ont été enregistrées sur la nouvelle branche"],command:"git checkout newImage; git commit",beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["Ok! Vous êtes fin prêt pour faire des branches. Après la fermeture de cette fenêtre,","faites une nouvelle branche nommée `bugFix` et positionnez-vous sur cette branche"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Branches",""," Git 的分支非常轻量。它们只是简单地指向某个提交纪录——仅此而已。所以许多Git爱好者会念叨：","","```","早点建分支！经常建分支！","```","","创建分支没有储存或内存上的开销，所以按逻辑分解工作比维护单一的代码树要简单。","","同时使用分支和提交时，我们会看到两者如何配合。现在，只要记住使用分支其实就是在说：“我想包含本次提交及所有的父提交记录。”"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["举个例子看看分支究竟是什么。","","这里，我们切换到到名为`newImage`的新分支。"],command:"git branch newImage",afterMarkdowns:["看，这就是建立分支所需的操作啦！`newImage`分支现在指向提交记录`C1`。"],beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["现在让我们修改一下新分支。点击下面的按钮。"],command:"git commit",afterMarkdowns:["啊摔！`master`分支前进了，但`newImage`分支没有哇！这是因为我们没有“在”这个新分支上，这也是为什么星号（*）只在 `master` 上。"],beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["使用如下命令告诉git我们想要切换到新的分支","","```","git checkout [name]","```","","这可以让我们在提交修改之前切换到新的分支。"],command:"git checkout newImage; git commit",afterMarkdowns:["好的嘞！新的分支已经记录了我们的修改。"],beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["好啦，你已经准备好使用分支了。当前窗口关闭后，","创建一个叫 `bugFix` 的新分支，然后切换过去。"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git 브랜치","","깃의 브랜치도 놀랍도록 가볍습니다. 브랜치는 특정 커밋에 대한 참조(reference)에 지나지 않습니다. 이런 사실 때문에 수많은 Git 애찬론자들이 자주 이렇게 말하곤 합니다:","","```","브랜치를 서둘러서, 그리고 자주 만드세요","```","","브랜치를 많이 만들어도 메모리나 디스크 공간에 부담이 되지 않기 때문에, 여러분의 작업을 커다른 브랜치로 만들기 보다, 작은 단위로 잘게 나누는 것이 좋습니다.","",'브랜치와 커밋을 같이 쓸 때, 어떻게 두 기능이 조화를 이루는지 알아보겠습니다. 하지만 우선은, 단순히 브랜치를 "하나의 커밋과 그 부모 커밋들을 포함하는 작업 내역"이라고 기억하시면 됩니다.']}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["브랜치가 어떤 것인지 연습해보죠.","","`newImage`라는 브랜치를 살펴보겠습니다."],afterMarkdowns:["저 그림에 브랜치의 모든 것이 담겨있습니다! 브랜치 `newImage`가 커밋 `C1`를 가리킵니다"],command:"git branch newImage",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["이 새로운 브랜치에 약간의 작업을 더해봅시다. 아래 버튼을 눌러주세요"],afterMarkdowns:["앗! `master` 브랜치가 움직이고, `newImage` 브랜치는 이동하지 않았네요! 그건 우리가 새 브랜치 위에 있지 않았었기 때문입니다. 별표(*)가 `master`에 있었던 것이죠."],command:"git commit",beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["아래의 명령으로 새 브랜치로 이동해 봅시다.","","```","git checkout [브랜치명]","```","","이렇게 하면 변경분을 커밋하기 전에 새 브랜치로 이동하게 됩니다."],afterMarkdowns:["이거죠! 이제 우리의 변경이 새 브랜치에 기록되었습니다!"],command:"git checkout newImage; git commit",beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["좋아요! 이제 직접 브랜치 작업을 연습해봅시다. 이 창을 닫고,","`bugFix`라는 새 브랜치를 만드시고, 그 브랜치로 이동해보세요"]}}]}}}},{}],65:[function(a,b,c){c.level={name:{en_US:"Introduction to Git Commits",de_DE:"Einführung in Git Commits",fr_FR:"Introduction aux commits avec Git",ja:"Gitのコミット",ko:"Git 커밋 소개",zh_CN:"Git Commits简介"},goalTreeString:'{"branches":{"master":{"target":"C3","id":"master"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"}},"HEAD":{"target":"master","id":"HEAD"}}',solutionCommand:"git commit;git commit",startTree:'{"branches":{"master":{"target":"C1","id":"master"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"}}',hint:{en_US:"Just type in 'git commit' twice to finish!",de_DE:"Gib einfach zweimal 'git commit' ein um den Level abzuschließen",fr_FR:"Il suffit de saisir 'git commit' deux fois pour réussir !",zh_CN:"敲两次 'git commit' 就好啦！",ja:"'git commit'コマンドを2回打てば完成!",ko:"'git commit'이라고 두 번 치세요!"},disabledMap:{"git revert":!0},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Commits","A commit in a git repository records a snapshot of all the files in your directory. It's like a giant copy and paste, but even better!","",'Git wants to keep commits as lightweight as possible though, so it doesn\'t just blindly copy the entire directory every time you commit. It can (when possible) compress a commit as a set of changes, or a "delta", from one version of the repository to the next.',"","Git also maintains a history of which commits were made when. That's why most commits have ancestor commits above them -- we designate this with arrows in our visualization. Maintaining history is great for everyone working on the project!","","It's a lot to take in, but for now you can think of commits as snapshots of the project. Commits are very lightweight and switching between them is wicked fast!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's see what this looks like in practice. On the right we have a visualization of a (small) git repository. There are two commits right now -- the first initial commit, `C0`, and one commit after that `C1` that might have some meaningful changes.","","Hit the button below to make a new commit"],afterMarkdowns:["There we go! Awesome. We just made changes to the repository and saved them as a commit. The commit we just made has a parent, `C1`, which references which commit it was based off of."],command:"git commit",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Go ahead and try it out on your own! After this window closes, make two commits to complete the level"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Commits","Ein Commit in ein Git-Repository speichert einen Abbildung aller Dateien in deinem Projektverzeichnis. Es ist wie ein riesiges Kopieren und Einfügen, nur besser.","","Allerdings will Git die Commits so schlank wie möglich halten, also kopiert es nicht einfach stur das ganze Verzeichnis jedes Mal wenn du committest. Es kann (wenn möglich) Commits als Menge von Änderungen zusammenpacken, von einer Version des Repositorys zur nächsten.","","Außerdem führt Git ein Protokoll darüber welche Commits wann gemacht wurden, und welcher auf welchen folgt. Deshalb werden die Commits hier mit ihrem Vorgänger über sich gezeigt -- wir verwenden Pfeile zur Darstellung der Beziehung. Dieses Protokoll zu haben ist eine tolle Sache für jeden, der an einem Projekt arbeitet.","","Das war jetzt eine Menge Neues, aber vorerst kannst du dir Commits einfach als Abbildungen des Projekts vorstellen. Commits sind sehr ressourcenschonend, und zwischen ihnen wechseln geht superschnell!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Mal sehen wie das in der Praxis ist. Rechts sehen wir ein (kleines) Git-Repository. Es gibt akutell zwei Commits -- den initialen, `C0`, und den danach, `C1`, der irgendwelche Änderungen enthält.","","Klick die Schaltfläche unten um einen neuen Commit zu erzeugen:"],afterMarkdowns:["Fertig. Klasse! Wir haben gerade Änderungen gemacht und als Commit im Repository gespeichert. Der Commit, den wir gerade gemacht haben, hat den Vorgänger `C1`; der verweist wiederum auf den Commit, auf dem er basiert: `C0`."],command:"git commit",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Probier das committen gleich mal aus! Mach zwei Commits um den Level abzuschließen."]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## Gitのコミット","コミットによって、ディレクトリ中の全てのファイルのスナップショットを記録します。巨大なコピー＆ペーストのようなものですが、実はそれよりずっと良いものです。","","Gitではコミットを可能な限り軽量に保つために、コミット毎にフォルダ全体をコピーしません。実際にはGitは、コミットを直前のバージョンから一つ先のバージョンへの「変更の固まり」あるいは「差分」として記録します。後で出てきますが、ほとんどのコミットが親を持っているのはそういう理由からです。","","リポジトリをcloneする時には、内部動作としてはコミットの差分をたどって全ての変更を取得しています。cloneした時に以下のような表示が出るのは：","","`resolving deltas`（訳：差分を解決中）","","このためです。","","もっと説明したいところですが、しばらくはコミットをスナップショットのようなものだと考えてください。コミットは非常に軽量であり、コミット間の移動も非常に高速です。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["これがどういうことか、動きを見ていきましょう。図には（小さな）gitリポジトリが描かれています。コミットが2つあります ― `C0`という名前の初回のコミットがあり、`C1`という名前の次のコミットが続きます。これは何か意味のある変更かもしれません。","","下のボタンを押下して新しいコミットを作ってみましょう。"],afterMarkdowns:["できました! 良いですね。いまリポジトリに新しい変更が加えられ、1つのコミットとして保存されました。作成したコミットには親がいて、このコミットの出発点となった`C1`を指しています。"],command:"git commit",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["実際に手を動かしてみましょう。このウィンドウを閉じたら、試しに2回コミットをしてみましょう。"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Commits Git","Un commit dans un dépôt (repository) git enregistre une image (snapshot) de tous les fichiers du repertoire. Comme un Copier-Coller géant, mais en bien mieux !","","Git fait en sorte que les commits soient aussi légers que possible donc il ne recopie pas tous le répertoire à chaque commit. En fait, git n'enregistre que l'ensemble des changments (\"delta\") depuis la version précédante du dépôt. C'est pour cette raison que la plupart des commits ont un commit parent -- ainsi que nous le verrons plus tard.","",'Pour cloner un dépôt, il faut décompresser ("résoudre") tous ces deltas. C\'est la raison pour laquelle la commande écrit :',"","`resolving deltas`","","lorsque l'on clone un dépôt.","","C'est beaucoup à absorber, mais pour l'instant vous pouvez considérer les commits comme des snapshots du projet. Les commits sont très légers et passer de l'un à l'autre est très rapide !"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Voyons à quoi cela ressemble en pratique. Sur la droite, on peut visualiser un (petit) dépôt git. Il y a pour l'instant deux commits -- le premier commit initial, `C0`, et un commit suivant `C1` qui aurait des changements significatifs.","","Appuyez sur le bouton ci-dessous pour faire un nouveau commit"],afterMarkdowns:["C'est parti ! Super. Nous venons de faire des modifications sur le dépôt et de saugevarder celles-ci dans un commit. Ce commit que nous venons de faire a un parent, `C1`, qui référence le commit sur lequel il est basé."],command:"git commit",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Allez-y et essayez par vous-même ! Après la fermeture de cettefenêtre, faites deux commits pour terminer ce niveau."]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git 커밋","커밋은 Git 저장소에 여러분의 디렉토리에 있는 모든 파일에 대한 스냅샷을 기록하는 것입니다. 디렉토리 전체에 대한 복사해 붙이기와 비슷하지만 훨씬 유용합니다!","",'Git은 커밋을 가능한한 가볍게 유지하고자 해서, 커밋할 때마다 디렉토리 전체를 복사하는 일은 하지 않습니다. 각 커밋은 저장소의 이전 버전과 다음 버전의 변경내역("delta"라고도 함)을 저장합니다. 그래서 대부분의 커밋이 그 커밋 위에 부모 커밋을 가리키고 있게 되는 것입니다. -- 곧 그림으로 된 화면에서 살펴보게 될 것입니다.',"","저장소를 복제(clone)하려면, 그 모든 변경분(delta)를 풀어내야하는데, 그 때문에 명령행 결과로 아래와 같이 보게됩니다. ","","`resolving deltas`","","알아야할 것이 꽤 많습니다만, 일단은 커밋을 프로젝트의 각각의 스냅샷들로 생각하시는 걸로 충분합니다. 커밋은 매우 가볍고 커밋 사이의 전환도 매우 빠르다는 것을 기억해주세요!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["연습할 때 어떻게 보이는지 확인해보죠. 오른쪽 화면에 git 저장소를 그림으로 표현해 놓았습니다. 현재 두번 커밋한 상태입니다 -- 첫번째 커밋으로 `C0`, 그 다음으로 `C1`이라는 어떤 의미있는 변화가 있는 커밋이 있습니다.","","아래 버튼을 눌러 새로운 커밋을 만들어보세요"],afterMarkdowns:["이렇게 보입니다! 멋지죠. 우리는 방금 저장소 내용을 변경해서 한번의 커밋으로 저장했습니다. 방금 만든 커밋은 부모는 `C1`이고, 어떤 커밋을 기반으로 변경된 것인지를 가리킵니다."],command:"git commit",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["계속해서 직접 한번 해보세요! 이 창을 닫고, 커밋을 두 번 하면 다음 레벨로 넘어갑니다"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Commits","git仓库中的一次提交（commit）记录目录下所有文件的快照。感觉像是大量的复制和粘贴，但 git 做的不只这么简单！","",'Git 希望提交记录尽可能地轻量，所以每次进行提交时，它不会简单地复制整个目录。实际上它把每次提交记录保存为从代码库的一个版本到下一个版本的变化集，或者说一个"增量（delta）"。所以，大部分提交记录都有一个父提交（parent commit）-- 我们会很快演示这一点。',"","克隆（clone）代码库时，需要解包（unpack）或者“解析（resolve）”所有的差异。所以在克隆代码库时，可能会看见如下命令行输出：","","`resolving deltas`","","要学的东西有很多，但现在你可以把提交记录看作是项目的快照。提交记录非常轻量且可以快速切换！"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["在实践中学习commit。右边是一个（小）git代码库的图示。当前有两个提交记录—— 初始提交`C0`和其后可能包含有用修改的提交`C1`。","","点击下面的按钮生成新的提交记录。"],command:"git commit",afterMarkdowns:["看！碉堡吧！我们修改了代码，并保存为一次提交记录。刚刚做的提交`C2`有一个父提交（parent）`C1`，代表此次修改的基础。"],beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["接下来你可以随便测试。当前窗口关闭后，完成两次提交就可以过关！"]}}]}}}
},{}],66:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C4","id":"master"},"bugFix":{"target":"C2","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3","C2"],"id":"C4"}},"HEAD":{"target":"master","id":"HEAD"}}',solutionCommand:"git checkout -b bugFix;git commit;git checkout master;git commit;git merge bugFix",name:{en_US:"Merging in Git",de_DE:"Mergen in git",fr_FR:"Faire des 'merge' (fusions de branches) avec Git",ko:"Git에서 브랜치 합치기(Merge)",ja:"ブランチとマージ",zh_CN:"分支与合并"},hint:{en_US:"Remember to commit in the order specified (bugFix before master)",de_DE:"Denk dran in der angegebenen Reihenfolge zu committen (erst bugFix, dann master)",ja:"指示された順番でコミットすること（masterの前にbugFixで）",fr_FR:"Pensez à faire des commits dans l'ordre indiqué (bugFix avant master)",zh_CN:"记住按指定的顺序提交（bugFix先于master）",ko:"말씀드린 순서대로 커밋해주세요 (bugFix에 먼저 커밋하고 master에 커밋)"},disabledMap:{"git revert":!0},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branches and Merging","","Great! We now know how to commit and branch. Now we need to learn some kind of way of combining the work from two different branches together. This will allow us to branch off, develop a new feature, and then combine it back in.","",'The first method to combine work that we will examine is `git merge`. Merging in Git creates a special commit that has two unique parents. A commit with two parents essentially means "I want to include all the work from this parent over here and this one over here, *and* the set of all their parents."',"","It's easier with visuals, let's check it out in the next view"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Here we have two branches; each has one commit that's unique. This means that neither branch includes the entire set of \"work\" in the repository that we have done. Let's fix that with merge.","","We will `merge` the branch `bugFix` into `master`"],afterMarkdowns:["Woah! See that? First of all, `master` now points to a commit that has two parents. If you follow the arrows up the commit tree from `master`, you will hit every commit along the way to the root. This means that `master` contains all the work in the repository now.","","Also, see how the colors of the commits changed? To help with learning, I have included some color coordination. Each branch has a unique color. Each commit turns a color that is the blended combination of all the branches that contain that commit.","","So here we see that the `master` branch color is blended into all the commits, but the `bugFix` color is not. Let's fix that..."],command:"git merge bugFix",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's merge `master` into `bugFix`:"],afterMarkdowns:["Since `bugFix` was an ancestor of `master`, git didn't have to do any work; it simply just moved `bugFix` to the same commit `master` was attached to.","","Now all the commits are the same color, which means each branch contains all the work in the repository! Woohoo!"],command:"git checkout bugFix; git merge master",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["To complete this level, do the following steps:","","* Make a new branch called `bugFix`","* Checkout the `bugFix` branch with `git checkout bugFix`","* Commit once","* Go back to `master` with `git checkout`","* Commit another time","* Merge the branch `bugFix` into `master` with `git merge`","",'*Remember, you can always re-display this dialog with "help level"!*']}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branches und Mergen","","Super! Wir wissen jetzt, wie man committet und einen Branch anlegt. Jetzt müssen wir nur noch rauskriegen, wie man die Arbeit, die in verschiedenen Branches steckt, zusammenführen kann. Dann können wir einen neuen Branch erstellen, darin ein neues Feature entwickeln, und das dann in den ursprünglichen Zweig integrieren.","",'Die einfachste Methode, mit der man Branches zusammenführen kann, ist `git merge`. Das Mergen erzeugt in git einen speziellen Commit, der zwei Vorgänger hat. Ein solcher Commit bedeutet im Prinzip "ich möchte alle Arbeit von dem Vorgänger hier und dem dort *und* allen ihren jeweiligen Vorgängern miteinander kombinieren".',"","Grafisch dargestellt ist es einfacher zu verstehen, lass es uns mal ansehen"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Hier haben wir zwei Branches; jeder besteht jeweils aus einem eigenen Commit. Das bedeutet, dass keiner der beiden Branches alle Inhalte des gesamten Repositorys kennt. Das werden wir mit einem Merge ändern.","","Wir werden den Branch `bugFix` in `master` integrieren"],afterMarkdowns:["Wow! Hast du das gesehen? Zunächst mal zeigt `master` jetzt auf einen Commit mit zwei Vorgängern. Wenn du den beiden Pfeilen immer weiter folgst, kommst du an jedem Commit im Repository vorbei. Das heißt `master` enthält jetzt alles, was es im Repository gibt.","","Siehst du außerdem wie sich die Farben der Commits verändert haben? Um die Vorgänge zu verdeutlichen hab ich etwas Farbe ins Spiel gebracht. Jeder Branch hat seine eindeutige Farbe. Jeder Merge Commit bekommt als Farbe eine Mischung aus den Farben seiner Vorgänger.","","Wir sehen also, dass die Farbe des Branch `master` in alle Commits gemischt wurde, die von `bugFix` aber nicht. Ändern wir das ..."],command:"git merge bugFix",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Mergen wir `master` in `bugFix`:"],afterMarkdowns:["Da `bugFix` ein Vorgänger von `master` war, musste git hier kaum etwas tun; es verschiebt `bugFix` einfach auf den Commit, auf den auch `master` zeigt.","","Jetzt haben alle Commits dieselbe Farbe, das heißt jeder Branch enthält die Informationen des gesamten Repositorys! Juhu!"],command:"git checkout bugFix; git merge master",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["Führe folgendes aus, um diesen Level zu schaffen:","","* Lege einen neuen Branch `bugFix` an","* Checke `bugFix` aus mittels `git checkout bugFix`","* Mach einen Commit","* Geh mit `git checkout` zum `master` zurück","* Mach noch einen Commit","* Merge den Branch `bugFix` in `master` mit `git merge`","","*Denk dran, du kannst diese Meldung mit dem Befehl `help level` so oft anzeigen, wie du willst!*"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## ブランチとマージ","","いい調子ですね。これまでにコミットとブランチについて学びました。そろそろ2つのブランチを1つにまとめるやり方について見ていきましょう。これができれば新しいフィーチャの開発のために新しいブランチを切って、開発が終わったら変更を元のブランチへ統合することができるようになります。","","はじめに紹介するのは、`git merge`を使ったマージのやり方です。mergeコマンドによって、2つの独立した親を持つ特別なコミットを作ることができます。2つの親を持つコミットが持つ意味とは、「全く別々の場所にいるこの親とその親（*かつ*、それらの親の祖先全て）が持つ全ての変更を含んでいますよ」ということです。","","見てみた方が早いので、次の画面で確認してみましょう。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["それぞれ別のコミットを指している2つのブランチがあります。変更が別々のブランチに分散していて統合されていないケースです。これをマージで1つにまとめてみましょう。","","`bugFix`ブランチを`master`ブランチにマージしてみます。"],afterMarkdowns:["わあ。見ましたか？まず初めに、`master`ブランチが2つのコミットを親に持つ新しいコミットを指してますね。`master`から親をたどっていくと、最も古いコミットにたどり着くまでに全てのコミットを含んでいる様が確認できます。これで、全ての変更を含む`master`が完成しました。","","色がどう変わったかにも注目して下さい。学習を助けるために、ブランチ毎に色をつけています。それぞれのブランチは自分の色を持っていて、どのブランチから派生して出てくるか次第でコミットごとの色が決まります。","","今回のコミットには`master`ブランチの色が使われました。しかし`bugFix`ブランチの色がまだ変わってないようなので、これを変えてみましょう。"],command:"git merge bugFix",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["`master`ブランチを`bugFix`ブランチにマージしてみます。"],afterMarkdowns:["`bugFix`ブランチは`master`ブランチの派生元だったので、gitは実際大したことはしていません：`bugFix`ブランチを指していたポインタを`master`が指していたコミットへと移動させただけです。","","これで全てのコミットが同じ色になりました。つまり、リポジトリの中の全ての変更をそれぞれのブランチが持ったことになります。やったね！"],command:"git checkout bugFix; git merge master",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["以下の作業で理解度の確認をしてみましょう。 steps:","","* `bugFix`という名前で新しいブランチを切る","* `git checkout bugFix`コマンドで`bugFix`ブランチをチェックアウトする","* 一回だけコミット","* `git checkout`で`master`へ戻る","* もう1回コミットする","* `git merge`コマンドを使って、`bugFix`ブランチを`master`ブランチへとマージする","",'*注："help level"コマンドでこのヘルプにいつでも戻ってこれます*']}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branches et Merges","","Super! Nous savons désormais comment faire des commits et de branches. Maintenant nous devons apprendre comment combiner ensemble les contenus de deux branches différentes. Ceci nous permettra de créer une nouvelle branche, développer une nouvelle fonctionnalité sur cette dernière, puis intégrer cette fonctionnalité en combinant le contenu de cette branche de développement à la branche d'origine(master par exemple).","","La première méthode que nous alons voir pour combiner le conenu de deux branches est `git merge`. Faire un 'merge' en git Git crée un commit spécial qui a deux parents. Un commit avec deux parents indique en susbtance \"Je veux inclure le contenu de ce parent et le conenu de cet autre parent, *et* l'ensemble de leurs parents.\"","","C'est plus facile en visualisant, regardons dans la vue suivante"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Here we have two branches; each has one commit that's unique. This means that neither branch includes the entire set of \"work\" in the repository that we have done. Let's fix that with merge.","","We will `merge` the branch `bugFix` into `master`"],afterMarkdowns:["Woah! See that? First of all, `master` now points to a commit that has two parents. If you follow the arrows upstream from `master`, you will hit every commit along the way to the root. This means that `master` contains all the work in the repository now.","","Also, see how the colors of the commits changed? To help with learning, I have included some color coordination. Each branch has a unique color. Each commit turns a color that is the blended combination of all the branches that contain that commit.","","So here we see that the `master` branch color is blended into all the commits, but the `bugFix` color is not. Let's fix that..."],command:"git merge bugFix",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Faisons un merge  de `master` dans `bugFix`:"],afterMarkdowns:["Puisque `bugFix` était un descendant de `master`, git n'avait aucun travail à effectuer; il a simplement déplacé `bugFix` au même commit auquel `master` est attaché.","","Maintenant tous les commits sont de la même couleur, ce qui indique que chaque branche contient tout le contenu du dépôt ! Woohoo!"],command:"git checkout bugFix; git merge master",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["Pour accomplir ce niveau, effectuez les opérations suivantes :","","* Faites une nouvelle branche appelée `bugFix`","* Positionnez-vous sur la branche `bugFix` avec `git checkout bugFix`","* Faites un commit","* Retournez sur la branche `master` (commande `git checkout`)","* Faites un nouveau commit","* Fusionnez la branche `bugFix` dans `master` avec `git merge`","",'*Rappelez-vous que vous pouvez à tout moment réafficher ces indications avec "help level"!*']}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branches and Merging","","Great! 我们已经知道怎么提交和使用分支了。接下来要学的一招是如何合并两个不同分支的工作。这让我们可以新建一个分支，在其上开发新功能，然后合并回主线。","","`git merge`是我们要学习的合并工作的第一个方法。合并产生一个特殊的提交记录，它包含两个唯一父提交。有两个父提交的提交记录本质上是：“我想把这两个父提交本身及它们的父提交集合都包含进来。”","","有图有真相，看看下面的图示就明白了。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["当前有两个分支：各有一个唯一的提交。这意味着没有一个分支包含我们对代码库的所有修改。让我们合并这两个分支来解决这个问题。","","我们要把 `bugFix` 合并到 `master` "],command:"git merge bugFix",afterMarkdowns:["哇！看见木有？首先，`master` 现在指向一个拥有两个父提交的提交记录。假如从 `master` 开始沿着箭头向上游走，在到达起点的路上会经过所有的提交记录。这说明有 `master` 包含了对代码库的所有修改。","","还有，看见各个提交记录的颜色变化了吗？为了帮助学习，我使用了颜色混合。每个分支都有特定的颜色。每个提交记录都变成了含有此提交的所有分支的混合色。","","所以，`master` 分支的颜色被混入到所有的提交记录，但 `bugFix` 没有。接下来就改一下这里吧。"],beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["让我们把 `master` 分支合并到 `bugFix` 吧。"],command:"git checkout bugFix; git merge master",afterMarkdowns:["因为 `bugFix` 分支在 `master` 分支的下游，git什么都不用做，只是简单地把`bugfix`分支移动到`master`指向的提交记录。","","现在所有的提交记录的颜色都是一样的啦，这表明每一个分支都包含了代码库的所有修改！走起！"],beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["想完成此关，执行收下操作：","","* 创建新分支 `bugFix` ","* 用 `git checkout bugFix` 切换到 `bugFix`分支","* 提交一次","* 用 `git checkout` 切换回 `master` ","* 再提交一次","* 用 `git merge` 合并 `bugFix`分支进 `master`","",'*记住，总是可以用 "help level" 命令来重新显示这个对话框！*']}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## 브랜치와 합치기(Merge)","","좋습니다! 지금까지 커밋하고 브랜치를 만드는 방법을 알아봤습니다. 이제 두 별도의 브랜치를 합치는 몇가지 방법을 알아볼 차례입니다. 이제부터 배우는 방법으로 브랜치를 따고, 새 기능을 개발 한 다음 합칠 수 있게 될 것입니다.","",'처음으로 살펴볼 방법은 `git merge`입니다. Git의 합치기(merge)는 두 개의 부모(parent)를 가리키는 특별한 커밋을 만들어 냅니다. 두개의 부모가 있는 커밋이라는 것은 "한 부모의 모든 작업내역과 나머지 부모의 모든 작업, *그리고* 그 두 부모의 모든 부모들의 작업내역을 포함한다"라는 의미가 있습니다. ',"","그림으로 보는게 이해하기 쉬워요. 다음 화면을 봅시다."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["여기에 브랜치가 두 개 있습니다. 각 브랜치에 독립된 커밋이 하나씩 있구요. 그 말은 이 저장소에 지금까지 작업한 내역이 나뉘어 담겨 있다는 얘기입니다. 두 브랜치를 합쳐서(merge) 이 문제를 해결해 볼까요?","","`bugFix` 브랜치를 `master` 브랜치에 합쳐(merge) 보겠습니다."],afterMarkdowns:["보셨어요? 우선, `master`가 두 부모가 있는 커밋을 가리키고 있습니다. ","","또, 커밋들의 색이 바뀐 것을 눈치 채셨나요? 이해를 돕기위해 색상으로 구분해 표현했습니다. 각 브랜치는 그 브랜치만의 색상으로 그렸습니다. 브랜치가 합쳐지는 커밋의 경우에는, 그 브랜치들의 색을 조합한 색상으로 표시 했습니다.","","그런식으로 여기에 `bugFix`브랜치 쪽을 제외한 나머지 커밋만 `master` 브랜치의 색으로 칠해져 있습니다. 이걸 고쳐보죠..."],command:"git merge bugFix",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["이제 `master` 브랜치에 `bugFix`를 합쳐(merge) 봅시다:"],afterMarkdowns:["`bugFix`가 `master`의 부모쪽에 있었기 때문에, git이 별다른 일을 할 필요가 없었습니다; 간단히 `bugFix`를 `master`가 붙어 있는 커밋으로 이동시켰을 뿐입니다.","","짜잔! 이제 모든 커밋의 색이 같아졌고, 이는 두 브랜치가 모두 저장소의 모든 작업 내역을 포함하고 있다는 뜻입니다."],command:"git checkout bugFix; git merge master",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["아래 작업을 해서 이 레벨을 통과하세요:","","* `bugFix`라는 새 브랜치를 만듭니다","* `git checkout bugFix`를 입력해 `bugFix` 브랜치로 이동(checkout)합니다.","* 커밋 한 번 하세요","* `git checkout` 명령어를 이용해 `master`브랜치로 돌아갑니다","* 커밋 또 하세요","* `git merge` 명령어로 `bugFix`브랜치를 `master`에 합쳐 넣습니다.","",'*아 그리고, "help level" 명령어로 이 안내창을 다시 볼 수 있다는 것을 기억해 두세요!*']}}]}}}},{}],67:[function(a,b,c){c.level={goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C3%22%2C%22id%22%3A%22master%22%7D%2C%22bugFix%22%3A%7B%22target%22%3A%22C2%27%22%2C%22id%22%3A%22bugFix%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C2%27%22%3A%7B%22parents%22%3A%5B%22C3%22%5D%2C%22id%22%3A%22C2%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22bugFix%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git checkout -b bugFix;git commit;git checkout master;git commit;git checkout bugFix;git rebase master",name:{en_US:"Rebase Introduction",de_DE:"Einführung in Rebase",ja:"Rebaseの解説",fr_FR:"Introduction à rebase",ko:"리베이스(rebase)의 기본",zh_CN:"Rebase简介"},hint:{en_US:"Make sure you commit from bugFix first",de_DE:"Geh vor dem committen sicher, dass du auf bugFix arbeitest",ja:"初めにbugFixを指した状態でコミットする",fr_FR:"Assurez-vous de bien faire votre en premier votre commit sur bugFix",ko:"bugFix 브랜치에서 먼저 커밋하세요",zh_CN:"确保你先在 bugFix 分支进行提交"},disabledMap:{"git revert":!0},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Rebase","",'The second way of combining work between branches is *rebasing.* Rebasing essentially takes a set of commits, "copies" them, and plops them down somewhere else.',"","While this sounds confusing, the advantage of rebasing is that it can be used to make a nice linear sequence of commits. The commit log / history of the repository will be a lot cleaner if only rebasing is allowed.","","Let's see it in action..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Here we have two branches yet again; note that the bugFix branch is currently selected (note the asterisk)","","We would like to move our work from bugFix directly onto the work from master. That way it would look like these two features were developed sequentially, when in reality they were developed in parallel.","","Let's do that with the `git rebase` command"],afterMarkdowns:["Awesome! Now the work from our bugFix branch is right on top of master and we have a nice linear sequence of commits.","",'Note that the commit C3 still exists somewhere (it has a faded appearance in the tree), and C3\' is the "copy" that we rebased onto master.',"","The only problem is that master hasn't been updated either, let's do that now..."],command:"git rebase master",beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Now we are checked out on the `master` branch. Let's go ahead and rebase onto `bugFix`..."],afterMarkdowns:["There! Since `master` was an ancestor of `bugFix`, git simply moved the `master` branch reference forward in history."],command:"git rebase bugFix",beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["To complete this level, do the following","","* Checkout a new branch named `bugFix`","* Commit once","* Go back to master and commit again","* Check out bugFix again and rebase onto master","","Good luck!"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Rebase","",'Der zweite Weg um Inhalte aus verschiedenen Branches zu kombinieren ist `git rebase`. Rebasen nimmt im Prinzip eine Menge von Commits, "kopiert" sie und packt sie auf etwas anderes drauf.',"","Auch wenn das erst mal komisch klingt liegt der Vorteil von Rebase darin, dass man es benutzen kann um hübsch lineare Abfolgen von Commits zu erhalten. Das Commit-Protokoll des Repositorys wird durch Rebase eine ganze Ecke einfacher aussehen, weil Merge Commits vermieden werden.","","Schauen wir's uns mal in Aktion an ..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Hier haben wir wieder zwei Branches; wie du siehst ist `bugFix` aktuell ausgewählt (sieht man am `*`).","","Wir würden jetzt gerne unsere Arbeit aus `bugFix` direkt auf den `master` packen. Das Ergebnis wäre, dass alle aktuellen Änderungen in `master` auch im Branch `bugFix` sind.","","Das machen wir mit dem Befehl `git rebase`:"],afterMarkdowns:["Hammer! Was wir in `bugFix` gemacht haben ist jetzt oben auf `master` draufgepackt und wir haben eine schön lineare Abfolge von Commits bekommen.","",'Commit `C3` existiert immer noch irgendwo (deswegen ist er blaß dargestellt) und `C3\'` ist die "Kopie" die wir auf den `master` gepackt haben.',"","Aber `master` ist jetzt nicht aktualisiert worden, lass uns das gerade noch nachholen ..."],command:"git rebase master",beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Jetzt sind wir im `master`. Lass uns den mal auf `bugFix` rebasen ..."],afterMarkdowns:["So! Da `master` ein Vorgänger von `bugFix` war konnte Git hier einfach den Bezeichner `master` auf denselben Commit schieben, auf den auch `bugFix` zeigt."],command:"git rebase bugFix",beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["Um dieses Level abzuschließen musst du folgendes tun:","","* Einen neuen Branch namens `bugFix` auschecken","* Einen Commit machen","* Zurück zum `master` wechseln und noch einmal committen","* `bugFix` auschecken und auf den `master` rebasen","","Viel Erfolg!"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Rebase","","ブランチを一つにまとめる方法として前回はマージを紹介しましたが、今回紹介するリベースを使うこともできます。リベースの動作は、マージするコミットのコピーをとって、どこかにストンと落とすというイメージです。","","ピンと来ないかもしれませんが、リベースのメリットは一本の連続したシーケンシャルなコミットに整形できることです。リベースだけ使っていると、コミットのログや履歴が非常にクリーンな状態に保たれます。","","早速実際にどう動くのかを見てみましょう。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["前回と同様の2つのブランチを考えます：仮にいまbugFixブランチをチェックアウトしているとします。（アスタリスクつきのもの）","","bugFixに入ってる作業内容をそのまま直接masterブランチ上の内容に移動したいとします。こうすることで、実際には並行して開発された2つの別々のブランチ上のフィーチャを、あたかも1本のブランチ上でシーケンシャルに開発されていたかのように見せることができます。","","`git rebase`コマンドでそれをやってみましょう。"],afterMarkdowns:["できた！これでbugFixブランチの作業内容はmasterブランチのすぐ先に移動したので、見た目が一本になってスッキリしました。","","気を付けてほしいのは、C3コミットはどこかに残ってるということ（ツリーの中で半透明にしてあります）、そしてC3'は（C3との接続が切れているC3の）コピーがmasterブランチ上に作られているということです。","","一つ問題が残ってて、masterブランチがまだ最新化されていませんね。ちょっと直してみましょう。。"],command:"git rebase master",beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["masterブランチはチェックアウトしてあります。この状態からmasterブランチを`bugFix`へとリベースしてみましょう。"],afterMarkdowns:["できた！`master`は`bugFix`の直前のコミットだったので、gitは単純に`master`ブランチのポインタを前に進めただけでした。"],command:"git rebase bugFix",beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["以下の作業で理解度の確認をしてみましょう。","","* `bugFix`という名前の新しいブランチをチェックアウトする","* 一回だけコミット","* masterブランチに戻ってもう1回コミット","* bugFixをもう1回チェックアウトして、master上にリベース","","幸運を祈る！"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Rebase","",'La seconde façon de combiner les contenus de deux branches est *rebase*. Rebase prend un enselble de commits, les "recopie", et les ajoute en bout de chaine à un autre endroit.',"","Bien que cela puisse sembler compliqué, l'avantage de rebase est de permettre d'obtenir une simple séquence linéeire de commits. Les logs/l'historique du dépôt seront bien plus propres si seul rebase est autorisé (plutôt que merge).","","Voyons rebase en action…"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ici nous avons encore une fois deux branches; notez que nous sommes sur la branche bugFix (cf. l'asterisque)","","Nous voudrions transferer notre travail sur la branche 'bugFix' directement sur le travail dans 'master'. Ainsi on aurait l'impression que ces deux travaux ont été développés séquentiellement alors qu'en réalité ils ont été réalisés en parallèle.","","Faisons cela avec la commande `git rebase`"],afterMarkdowns:["Super! Désormais, le travail de la branche 'bugFix' est juste en haut de la branche 'master' et non avons une belle séquence linéaire de commits.","","Notez que le commit C3 existe toujours quelquepart (il est en grisé sur l'arbre), et C3' est la  \"copie\" que nous avons créée sur master avec rebase.","","Le seul problème est que master n'a pas été mis à jour, faisons cela maintenant…"],command:"git rebase master",beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Nous sommes désormais positionnés sur la branche `master`. Continuons en faisant le rebase sur `bugFix`…","Et voilà ! Puisque `master` était un ascendant de `bugFix`, git a simplement déplacé la référence de la branche `master` en avant dans le temps."],command:"git rebase bugFix",beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["Pour acomplir ce niveau, faites les opérations suivantes","","* Positionnez-vous (checkout) sur une nouvelle branche nommée `bugFix`","* Faites un commit","* Retournez sur master et faites un nouveau commit","* Positionnez-vous à nouveau sur bugFix et faites un rebase sur master","","Bonne chance !"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Rebase","",'*rebasing*是在分支之间合并工作的第二种方法。Rebasing就是取出一系列的提交记录，"复制"它们，然后把在别的某个地方放下来。',"","虽然听上去难以理解，rebasing 的优势是可以创造更线性的提交历史。假如只允许使用rebasing，代码库的提交日志/历史会更好看。","","让我们亲身体会下……"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["这里，还是有两个分支；注意当前分支是 bugFix（看那颗星）","","我们想要把 bugfix 里面的工作直接移到 master 分支上。使用这个方法，两个分支的功能看起来像是按顺序开发，实际上它们是平行开发的。","","用 `git rebase`实现此目标"],command:"git rebase master",afterMarkdowns:["碉堡吧，现在 bugFix 分支上的工作在 master 的最前端，同时我们也得到了一个更线性的提交序列。","","注意，提交记录 C3 仍然存在（阴影的那货就是你了，还看什么看），而我们已经将 C3 复制到了master。","","现在唯一的问题是 master 分支还没有更新……下面就来更新它吧"],beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["现在，切换到 `master` 分支。接下来就把它 rebase 到 `bugFix` 吧……"],command:"git rebase bugFix",afterMarkdowns:["完成！因为 `master` 是 `bugFix` 的下游，所以 git 只把 `master` 分支的记录前移到 `bugFix` 上。"],beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["想完成此关，执行以下操作：","","* 新建`bugFix`分支","* 提交一次","* 切换回 master 分支再提交一次","* 再次切换到 bugFix 分支，rebase 到 master 上","","祝你好运啦！"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git 리베이스(Rebase)","","브랜치끼리의 작업을 접목하는 두번째 방법은 *리베이스(rebase)*입니다. 리베이스는 기본적으로 커밋들을 모아서 복사한 뒤, 다른 곳에 떨궈 놓는 것입니다.","","조금 어려게 느껴질 수 있지만, 리베이스를 하면 커밋들의 흐름을 보기 좋게 한 줄로 만들 수 있다는 장점이 있습니다. 리베이스를 쓰면 저장소의 커밋 로그와 이력이 한결 깨끗해집니다.","","어떻게 동작하는지 살펴볼까요..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["여기 또 브랜치 두 개가 있습니다; bugFix브랜치가 현재 선택됐다는 점 눈여겨 보세요 (별표 표시)","","bugFix 브랜치에서의 작업을 master 브랜치 위로 직접 옮겨 놓으려고 합니다. 그렇게 하면, 실제로는 두 기능을 따로따로 개발했지만, 마치 순서대로 개발한 것처럼 보이게 됩니다.","","`git rebase` 명령어로 함께 해보죠."],afterMarkdowns:["오! 이제 bugFix 브랜치의 작업 내용이 master의 바로 위에 깔끔한 한 줄의 커밋으로 보이게 됐습니다.","","C3 커밋은 어딘가에 아직 남아있고(그림에서 흐려짐), C3'는 master 위에 올려 놓은 복사본입니다.","","master가 아직 그대로라는 문제가 남아있는데요, 바로 해결해보죠..."],command:"git rebase master",beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["우리는 지금 `master` 브랜치를 선택한 상태입니다. `bugFix` 브랜치쪽으로 리베이스 해보겠습니다..."],afterMarkdowns:["보세요! `master`가 `bugFix`의 부모쪽에 있었기 때문에, 단순히 그 브랜치를 더 앞쪽의 커밋을 가리키게 이동하는 것이 전부입니다."],command:"git rebase bugFix",beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["이하 작업을 하면 이번 레벨을 통과합니다","","* `bugFix`라는 새 브랜치를 만들어 선택하세요","* 커밋 한 번 합니다","* master로 돌아가서 또 커밋합니다","* bugFix를 다시 선택하고 master에 리베이스 하세요","","화이팅!"]}}]}}}},{}],68:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C2","id":"master","remoteTrackingBranchID":null},"side":{"target":"C4","id":"side","remoteTrackingBranchID":null},"bugFix":{"target":"C7","id":"bugFix","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C3"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"},"C7":{"parents":["C6"],"id":"C7"}},"tags":{"v0":{"target":"C0","id":"v0","type":"tag"},"v1":{"target":"C3","id":"v1","type":"tag"}},"HEAD":{"target":"bugFix","id":"HEAD"}}',solutionCommand:"git commit ",startTree:'{"branches":{"master":{"target":"C2","id":"master","remoteTrackingBranchID":null},"side":{"target":"C4","id":"side","remoteTrackingBranchID":null},"bugFix":{"target":"C6","id":"bugFix","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C3"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"}},"tags":{"v0":{"target":"C0","id":"v0","type":"tag"},"v1":{"target":"C3","id":"v1","type":"tag"}},"HEAD":{"target":"bugFix","id":"HEAD"}}',name:{en_US:"Git Describe",de_DE:"Git Describe"},hint:{en_US:"Just commit once on bugFix when you're ready to move on",de_DE:"Committe nur einmal auf bugFix, wenn du soweit bist"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["### Git Describe","",'Because tags serve as such great "anchors" in the codebase, git has a command to *describe* where you are relative to the closest "anchor" (aka tag). And that command is called `git describe`!',"","Git describe can help you get your bearings after you've moved many commits backwards or forwards in history; this can happen after you've completed a git bisect (a debugging search) or when sitting down at a coworkers computer who just got back from vacation."]}},{type:"ModalAlert",options:{markdowns:["Git describe takes the form of:","","`git describe <ref>`","","Where `<ref>` is anything git can resolve into a commit. If you don't specify a ref, git just uses where you're checked out right now (`HEAD`).","","The output of the command looks like:","","`<tag>_<numCommits>_g<hash>`","","Where `tag` is the closest ancestor tag in history, `numCommits` is how many commits away that tag is, and `<hash>` is the hash of the commit being described."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's look at a quick example. For this tree below:"],afterMarkdowns:["The command `git describe master` would output:","","`v1_2_gC2`","","Whereas `git describe side` would output:","","`v2_1_gC4`"],command:"git tag v2 C3",beforeCommand:"git commit; go -b side HEAD~1; gc; gc; git tag v1 C0"}},{type:"ModalAlert",options:{markdowns:["That's pretty much all there is to git describe! Try describing a few of the locations in this level to get a feel for the command.","","Once you're ready, just go ahead and commit once to finish the level. We're giving you a freebie :P"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["### Git Describe","",'Weil Tags so super als "Anker" im Repository dienen können bietet Git einen Befehl um zu *beschreiben* wo du dich relativ zum nächsten "Anker" (also Tag) befindest. Und der heißt `git describe`.',"","Er hilft dir dabei, dir einen Überblick zu verschaffen nachdem du viele Commits im Log zurück- oder vorgegangen bist; das kann vorkommen nachdem du ein `git bisect` (eine Fehlersuche) abgeschlossen hast oder wenn du dich an den Rechner eines Kollegen setzt, der gerade aus dem Urlaub gekommen ist."]}},{type:"ModalAlert",options:{markdowns:["Der Befehl ist folgendermaßen aufgebaut:","","`git describe <Ref-Name>`","","Dabei ist `<Ref-Name>` jeder beliebige Name, der einem Commit zugeordnet ist (Branch, Tag etc). Wenn du keinen angibst benutzt Git `HEAD`, also den aktuellen Checkout.","","Die Befehlsausgabe sieht so aus:","","`<Tag-Name>_<Anzahl Commits>_g<Hash>`","","`<Tag-Name>` ist dabei der nächstliegende Tag in den Vorgänger-Commits, `<Anzahl Commits>` zeigt an, wieviele Commits dieses Tag entfernt ist und `<Hash>` ist das SHA des Commits, auf den das Tag zeigt."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Schauen wir uns das schnell an einem Beispiel an. Für den folgenden Baum:"],afterMarkdowns:["Der Befehl `git describe master` würde folgendes ausgeben:","","`v1_2_gC2`","","Wohingegen `git describe side` dies ausgeben würde:","","`v2_1_gC4`"],command:"git tag v2 C3",beforeCommand:"git commit; go -b side HEAD~1; gc; gc; git tag v1 C0"}},{type:"ModalAlert",options:{markdowns:["Das ist so ziemlich alles, was es über `git describe` zu wissen gibt. Versuch ein paar Orte in diesem Level damit auszugeben, um ein Gefühl dafür zu bekommen.","","Sobald du fertig bist, mach einfach einen Commit um den Level abzuschließen. Der geht auf's Haus. :P"]}}]}}}
},{}],69:[function(a,b,c){c.level={compareOnlyMasterHashAgnosticWithAsserts:!0,goalAsserts:{master:[function(a){return a.C4>a.C1}]},disabledMap:{"git revert":!0},goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C4%27%22%2C%22id%22%3A%22master%22%7D%2C%22debug%22%3A%7B%22target%22%3A%22C2%22%2C%22id%22%3A%22debug%22%7D%2C%22printf%22%3A%7B%22target%22%3A%22C3%22%2C%22id%22%3A%22printf%22%7D%2C%22bugFix%22%3A%7B%22target%22%3A%22C4%27%22%2C%22id%22%3A%22bugFix%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C4%22%3A%7B%22parents%22%3A%5B%22C3%22%5D%2C%22id%22%3A%22C4%22%7D%2C%22C4%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C4%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git checkout master;git cherry-pick C4",startTree:'{"branches":{"master":{"target":"C1","id":"master"},"debug":{"target":"C2","id":"debug"},"printf":{"target":"C3","id":"printf"},"bugFix":{"target":"C4","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"}},"HEAD":{"target":"bugFix","id":"HEAD"}}',name:{ko:"딱 한개의 커밋만 가져오기",en_US:"Grabbing Just 1 Commit",de_DE:"Einen Commit pflücken",ja:"Grabbing Just 1 Commit",zh_CN:"只取一个提交"},hint:{en_US:"Remember, interactive rebase or cherry-pick is your friend here",de_DE:"Vergiss nicht: hier kommst du mit interaktivem Rebase oder Cherry-Picking weiter",ja:"このレベルではインタラクティブモードのrebaseやcherry-pickがクリアのカギです",ko:"대화식 리베이스(rebase -i)나 or 체리픽(cherry-pick)을 사용하세요",zh_CN:"记住，交互式 rebase 或者 cherry-pick 会很有帮助"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Locally stacked commits","","Here's a development situation that often happens: I'm trying to track down a bug but it is quite elusive. In order to aid in my detective work, I put in a few debug commands and a few print statements.","","All of these debugging / print statements are in their own branches. Finally I track down the bug, fix it, and rejoice!","","Only problem is that I now need to get my `bugFix` back into the `master` branch. If I simply fast-forwarded `master`, then `master` would get all my debug statements which is undesirable. There has to be another way..."]}},{type:"ModalAlert",options:{markdowns:["We need to tell git to copy only one of the commits over. This is just like the levels earlier on moving work around -- we can use the same commands:","","* `git rebase -i`","* `git cherry-pick`","","To achieve this goal."]}},{type:"ModalAlert",options:{markdowns:["This is a later level so we will leave it up to you to decide which command you want to use, but in order to complete the level, make sure `master` receives the commit that `bugFix` references."]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Lokale Commit-Haufen","","Folgende Situation habe ich beim Entwickeln des öfteren: ich bin auf der Suche nach einem Bug, aber er ist echt schwer zu finden. Um ihm auf die Spur zu kommen schreibe ich mehrere Debug-Kommandos und print-Befehle in den Code.","","Die committe ich auch immer wieder, je weiter die Suche mich trägt; natürlich in einem lokalen Branch. Schließlich finde ich den Bug, fixe ihn und freue mich!","","Einziges Problem ist, dass ich diesen `bugFix` jetzt zurück in den `master` kriegen muss. Wenn ich einfach den `master` vorspule oder meinen Branch hinein merge, bekäme der `master` auch die ganzen Debug-Befehle, was nicht gewünscht ist. Das muss anders gehen ..."]}},{type:"ModalAlert",options:{markdowns:["Wir müssten Git sagen können, dass es nur einen Commit herüber kopieren soll. Das ist genauso wie die Level vorhin zum Code-Verschieben. Wir können dieselben Befehle benutzen:","","* `git rebase -i`","* `git cherry-pick`",""]}},{type:"ModalAlert",options:{markdowns:["Da dies ein späterer Level ist überlasse ich es dir zu entscheiden, welchen Befehl du benutzen willst. Aber um da Level zu schaffen musst du irgendwie sicherstellen, dass `maste` den Commit bekommt, auf den `bugFix` zeigt."]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## ローカルに積み上がったコミット","","実際の開発ではこういうケースがよくあります：「バグの原因調査を試みているがバグの再現性がかなり低い。調査の補助のために、いくつかのデバッグ用の命令やprint文を差し込んでいる。」","","これらのデバッグ用のコードはバグ修正用のブランチにコミットされています。そしてついにバグの原因を突き止めて、修正した！やった！","","あとは`bugFix`ブランチを`master`ブランチに統合できればOK。そこで単純に`master`をfast-forwardすればよいかというと、それでは`master`ブランチの中にデバッグ用のコードも混入してしまいます。"]}},{type:"ModalAlert",options:{markdowns:["ここでGitの魔法が力を発揮します。解決のためにはいくつかの方法がありますが、最も素直な解決方法は2つあって：","","* `git rebase -i`","* `git cherry-pick`","","インタラクティブモードの（`-i`オプションつきの）rebaseによって、保持したいコミットと破棄したいコミットを選り分けることができます。コミットの順序を変更することも可能です。この方法は、一部の変更をどこかへやってしまいたい時に便利です。","","もう一方のcherry-pickを使うと、持っていきたいコミットを選んで`HEAD`の先にストンと落とすことができます。"]}},{type:"ModalAlert",options:{markdowns:["後半の章ですのでどう解決するかをもう自分で考えることができると思います。このレベルをクリアするためには、`bugFix`が持っているコミットを`master`ブランチが受け取る必要がある点には注意してください。"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 本地栈式提交 (Locally stacked commits)","","设想一下一个经常发生的场景：我在追踪一个有点棘手的 bug，为了更好地排查，我添加了一些调试命令和打印语句。","","所有的这些调试和打印语句都只在它们自己的分支里。最终我终于找到这个 bug，揪出来 fix 掉，然后撒花庆祝！","","现在唯一的问题就是要把我在 `bugFix` 分支里的工作合并回 `master` 分支。我可以简单地把 `master` 分支快进（fast-forward），但这样的话 `master` 分支就会包含我这些调试语句了。"]}},{type:"ModalAlert",options:{markdowns:["现在就是 Git 大显神通的时候啦。解决这个问题的方法不止一个，但最直接的两个方法是：","","* `git rebase -i`","* `git cherry-pick`","","交互（`-i`）衍合允许你选择哪些提交是要被保留，哪些要被舍弃。它允许你将提交重新排序。假如你要舍弃一些工作，这个会帮上很大的忙。","","Cherry-picking 能让你选择单独一个提交并且把它放到 `HEAD` 的最前端。"]}},{type:"ModalAlert",options:{markdowns:["本关是可选关卡，玩不玩随便你。但是如果你坚持要刷，确保 `master` 分支能拿到 `bugFix` 分支的相关提交（references）。"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## 로컬에 쌓인 커밋들","","개발중에 종종 이런 상황이 생깁니다: 잘 띄지 않는 버그를 찾아서 해결하려고, 어떤 부분의 문제인지를 찾기 위해 디버그용 코드와 화면에 정보를 프린트하는 코드 몇 줄 넣습니다. ","","디버깅용 코드나 프린트 명령은 그 브랜치에 들어있습니다. 마침내 버그를 찾아서 고쳤고, 원래 작업하는 브랜치에 합치면 됩니다!","","이제 `bugFix`브랜치의 내용을 `master`에 합쳐 넣으려 하지만, 한 가지 문제가 있습니다. 그냥 간단히 `master`브랜치를 최신 커밋으로 이동시킨다면(fast-forward) 그 불필요한 디버그용 코드들도 함께 들어가 버린다는 문제죠."]}},{type:"ModalAlert",options:{markdowns:["여기에서 Git의 마법이 드러납니다. 이 문제를 해결하는 여러가지 방법이 있습니다만, 가장 간단한 두가지 방법 아래와 같습니다:","","* `git rebase -i`","* `git cherry-pick`","","대화형 (-i 옵션) 리베이스(rebase)로는 어떤 커밋을 취하거나 버릴지를 선택할 수 있습니다. 또 커밋의 순서를 바꿀 수도 있습니다. 이 커맨드로 어떤 작업의 일부만 골라내기에 유용합니다.","","체리픽(cherry-pick)은 개별 커밋을 골라서 `HEAD`위에 떨어뜨릴 수 있습니다."]}},{type:"ModalAlert",options:{markdowns:["이번 레벨을 통과하기 위해 어떤 방법을 쓰시든 자유입니다만, `master`브랜치가 `bugFix` 브랜치의 커밋을 일부 가져오게 해주세요."]}}]}}}},{}],70:[function(a,b,c){c.level={disabledMap:{"git cherry-pick":!0,"git revert":!0},compareOnlyMasterHashAgnosticWithAsserts:!0,goalAsserts:{master:[function(a){return a.C2>a.C3},function(a){return a.C2>a.C1}]},goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C3%27%27%22%2C%22id%22%3A%22master%22%7D%2C%22newImage%22%3A%7B%22target%22%3A%22C2%22%2C%22id%22%3A%22newImage%22%7D%2C%22caption%22%3A%7B%22target%22%3A%22C3%27%27%22%2C%22id%22%3A%22caption%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%27%22%7D%2C%22C2%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C2%27%22%7D%2C%22C2%27%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C2%27%27%22%7D%2C%22C2%27%27%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%27%27%27%22%7D%2C%22C3%27%27%22%3A%7B%22parents%22%3A%5B%22C2%27%27%27%22%5D%2C%22id%22%3A%22C3%27%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git rebase -i HEAD~2;git commit --amend;git rebase -i HEAD~2;git rebase caption master",startTree:'{"branches":{"master":{"target":"C1","id":"master"},"newImage":{"target":"C2","id":"newImage"},"caption":{"target":"C3","id":"caption"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"}},"HEAD":{"target":"caption","id":"HEAD"}}',name:{ko:"커밋들 갖고 놀기",en_US:"Juggling Commits",de_DE:"Jonglieren mit Commits",ja:"Juggling Commits",zh_CN:"提交变换戏法"},hint:{en_US:"The first command is git rebase -i HEAD~2",de_DE:"Der erste Befehl ist git rebase -i HEAD~2",ja:"最初に打つコマンドはgit rebase -i HEAD~2",ko:"첫번째 명령은 git rebase -i HEAD~2 입니다",zh_CN:"第一个命令是 'git rebase -i HEAD~2'"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Juggling Commits","","Here's another situation that happens quite commonly. You have some changes (`newImage`) and another set of changes (`caption`) that are related, so they are stacked on top of each other in your repository (aka one after another).","","The tricky thing is that sometimes you need to make a small modification to an earlier commit. In this case, design wants us to change the dimensions of `newImage` slightly, even though that commit is way back in our history!!"]}},{type:"ModalAlert",options:{markdowns:["We will overcome this difficulty by doing the following:","","* We will re-order the commits so the one we want to change is on top with `git rebase -i`","* We will `commit --amend` to make the slight modification","* Then we will re-order the commits back to how they were previously with `git rebase -i`","* Finally, we will move master to this updated part of the tree to finish the level (via the method of your choosing)","","There are many ways to accomplish this overall goal (I see you eye-ing cherry-pick), and we will see more of them later, but for now let's focus on this technique."]}},{type:"ModalAlert",options:{markdowns:["Lastly, pay attention to the goal state here -- since we move the commits twice, they both get an apostrophe appended. One more apostrophe is added for the commit we amend, which gives us the final form of the tree ","","That being said, I can compare levels now based on structure and relative apostrophe differences. As long as your tree's `master` branch has the same structure and relative apostrophe differences, I'll give full credit"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Jonglieren mit Commits","","Eine weitere häufig vorkommende Situation: du hast einige Änderungen in `newImage` und weitere Änderungen in `caption`. Die Änderungen hängen voneineander ab, das heißt in diesem Fall `caption` ist ein Nachfolger von `newImage`.","","Nun kann es vorkommen, dass du einen früheren Commit verändern willst. In unserem Fall will die Design-Abteilung, dass die Abmessungen in `newImage` leicht verändert werden, obwohl das mitten in unserer History liegt!"]}},{type:"ModalAlert",options:{markdowns:["Um das zu schaffen gehen wir wie folgt vor:","","* Wir sortieren die Commits mit `git rebase -i` so um, dass der, den wir ändern wollen, ganz oben liegt.","* Wir verändern den Commit mit `git commit --amend`.","* Dann sortieren wir die Commit mit einem erneuten `git rebase -i` wieder in die alte Reihenfolge.","* Schließlich aktualisieren wir den `master` auf das Ende unseres fertigen Baums, um diesen Level abzuschließen.","","Es gibt sehr viele Wege um das Endziel dieses Levels zu erreichen (ich sehe, du schielst auf `cherry-pick`) und wir werden uns später noch andere ansehen. Aber für's erste lass uns diese Methode ausprobieren."]}},{type:"ModalAlert",options:{markdowns:["Beachte den geschilderten Zielzustand. Da wir die Commits zweimal umsortieren bekommen sie jedesmal ein Apostroph hinzugefügt (weil sie jedesmal kopiert werden). Ein weiteres Apostroph entsteht durch den `commit --amend`.","","Zuguterletzt noch eine Bemerkung: ich kann Level nun auf Struktur und Apostroph-Differenz prüfen. So lange wie dein `master` am Ende dieselbe Strukutr und Apostroph-Differenz aufweist wie der Ziel-`master`, ist der Level bestanden."]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## Commitsをやりくりする","","開発中に頻繁に起こるケースをもう1つ考えます。ある変更（`newImage`）とまた別の変更（`caption`）があって、それらに依存関係があるとします。この一連の変更が一列に積み重なっているとします。","","ここでトリッキーなのは、以前のコミットに対して微修正をかけなければならないケースがあるということです。今回の教材でも、過去のコミットであるにも関わらず`newImage`ブランチに僅かな修正を加えるような設計の修正が入ったとしましょう。"]}},{type:"ModalAlert",options:{markdowns:["この困難な状況を、以下の手順で克服することを考えます：","","* `git rebase -i`を使って順番を変更する。これで、変更をかけたいコミットを一番先頭に持ってくる。","* `commit --amend`コマンドで僅かな変更を行う","* `git rebase -i`コマンドを再度使って、先頭に持ってきていたコミットを元に戻す","* 最後に、レベルクリアのためにmasterブランチを先頭に持ってくる","","クリアのための方法はいくつもありますが（cherry-pickを使うこともできます）、別の回答はまた後程の章で見ることにんして、今回は上記の方法でやってみることにしましょう。"]}},{type:"ModalAlert",options:{markdowns:["最後に、ゴール時点での状態に気を付けてください。今回2回ほどコミットを動かしますから、コミットへのポインタにはアポストロフィ（'）が追加されます。commit --amendコマンドの実行でできたコミットには更にもう1つのアポストロフィが追加されます。 "]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 提交变换戏法","","下面这种情况也是经常出现的。例如你之前已经在 `newImage` 分支上做了一些提交，然后又在 `caption` 分支上做了一些相关的提交，因此它们看起来是一个连一个的（stacked on top of each other in your repository）。","","有点棘手的就是有时候你又想往先前的提交里做些小改动。呐，现在就是设计师想要我们去轻微改变下 `newImage` 的内容（change the dimensions slightly），尽管那个提交是很久很久以前的了。"]}},{type:"ModalAlert",options:{markdowns:["为了实现他的愿望，我们可以按照下面的方法来做：","","* 先用 `git rebase -i` 将提交重新排序，然后把我们想要修改的提交挪到最前","* 然后用 `commit --amend` 来进行一些小修改","* 接着再用 `git rebase -i` 来将他们按最开始的顺序重新排好","* 最后我们把 master 移到修改的最前端（用你自己喜欢的方法），就大功告成啦！","","当然还有许多方法可以完成这个任务（我知道你在看 cherry-pick 啦），之后我们会多点关注这些技巧啦，但现在暂时只专注上面这种方法。"]}},{type:"ModalAlert",options:{markdowns:["啊最后还要提醒你一下最终的形式 —— 因为我们把这个提交移动了两次，所以会分别产生一个省略提交（both get an apostrophe appended）。还有一个省略提交是因为我们为了实现最终效果去修改提交而添加的。"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## 커밋들 갖고 놀기","","이번에도 꽤 자주 발생하는 상황입니다. `newImage`와 `caption` 브랜치에 각각의 변경내역이 있고 서로 약간 관련이 있어서, 저장소에 차례로 쌓여있는 상황입니다.","","때로는 이전 커밋의 내용을 살짝 바꿔야하는 골치아픈 상황에 빠지게 됩니다. 이번에는 디자인 쪽에서 우리의 작업이력(history)에서는 이미 한참 전의 커밋 내용에 있는 `newImage`의 크기를 살짝 바꿔달라는 요청이 들어왔습니다."]}},{type:"ModalAlert",options:{markdowns:["이 문제를 다음과 같이 풀어봅시다:","","* `git rebase -i` 명령으로 우리가 바꿀 커밋을 가장 최근 순서로 바꾸어 놓습니다","* `commit --amend` 명령으로 커밋 내용을 정정합니다","* 다시 `git rebase -i` 명령으로 이 전의 커밋 순서대로 되돌려 놓습니다","* 마지막으로, master를 지금 트리가 변경된 부분으로 이동합니다. (편하신 방법으로 하세요)","","이 목표를 달성하기 위해서는 많은 방법이 있는데요(체리픽을 고민중이시죠?), 체리픽은 나중에 더 살펴보기로 하고, 우선은 위의 방법으로 해결해보세요."]}},{type:"ModalAlert",options:{markdowns:["최종적으로, 목표 결과를 눈여겨 보세요 -- 우리가 커밋을 두 번 옮겼기 때문에, 두 커밋 모두 따옴표 표시가 붙어있습니다. 정정한(amend) 커밋은 따옴표가 추가로 하나 더 붙어있습니다."]}}]}}}},{}],71:[function(a,b,c){c.level={goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C3%27%22%2C%22id%22%3A%22master%22%7D%2C%22newImage%22%3A%7B%22target%22%3A%22C2%22%2C%22id%22%3A%22newImage%22%7D%2C%22caption%22%3A%7B%22target%22%3A%22C3%22%2C%22id%22%3A%22caption%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C2%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%27%22%7D%2C%22C2%27%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%27%27%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C2%27%27%22%5D%2C%22id%22%3A%22C3%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git checkout master;git cherry-pick C2;git commit --amend;git cherry-pick C3",disabledMap:{"git revert":!0},startTree:'{"branches":{"master":{"target":"C1","id":"master"},"newImage":{"target":"C2","id":"newImage"},"caption":{"target":"C3","id":"caption"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"}},"HEAD":{"target":"caption","id":"HEAD"}}',compareOnlyMasterHashAgnosticWithAsserts:!0,goalAsserts:{master:[function(a){return a.C2>a.C3},function(a){return a.C2>a.C1}]},name:{ko:"커밋 갖고 놀기 #2",en_US:"Juggling Commits #2",de_DE:"Jonglieren mit Commits Teil 2",ja:"コミットをやりくりする その2",zh_CN:"提交交换戏法 #2"},hint:{en_US:"Don't forget to forward master to the updated changes!",de_DE:"Vergiss nicht den master auf die aktuelle Version vorzuspulen",ja:"masterのポインタを先に進めることを忘れずに！",ko:"master를 변경 완료한 커밋으로 이동(forward)시키는 것을 잊지 마세요!",zh_CN:"别忘记了将 master 快进到最新的更新上！"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Juggling Commits #2","","*If you haven't completed Juggling Commits #1 (the previous level), please do so before continuing*","","As you saw in the last level, we used `rebase -i` to reorder the commits. Once the commit we wanted to change was on top, we could easily --amend it and re-order back to our preferred order.","","The only issue here is that there is a lot of reordering going on, which can introduce rebase conflicts. Let's look at another method with `git cherry-pick`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Remember that git cherry-pick will plop down a commit from anywhere in the tree onto HEAD (as long as that commit isn't an ancestor of HEAD).","","Here's a small refresher demo:"],afterMarkdowns:["Nice! Let's move on"],command:"git cherry-pick C2",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:["So in this level, let's accomplish the same objective of amending `C2` once but avoid using `rebase -i`. I'll leave it up to you to figure it out! :D","","Remember, the exact number of apostrophe's (') on the commit are not important, only the relative differences. For example, I will give credit to a tree that matches the goal tree but has one extra apostrophe everywhere"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Jonglieren mit Commits Teil 2","",'Du solltest "Jonglieren mit Commits" (den vorherigen Level) bestanden haben, bevor du dich an diesem hier versuchst.',"","Wie du im letzten Level gesehen hast haben wir `git rebase -i` genutzt, um die Commits neu anzuordnen. Sobald der Commit, den wir ändern wollte, ganz oben war, konnten wir das auch einfach mit `git commit --amend` tun. Danach haben wir die alte Reihenfolge wiederhergestellt.","","Das einzige Problem ist hier, dass da eine Menge Umsortieren stattfindet, was zu Rebase-Konflikten führen kann. Schauen wir uns also eine Methode mit `git cherry-pick` an."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Wie du dich erinnerst macht `git cherry-pick` eine Kopie des angegebenen Commits und fügt sie an `HEAD` an (es sei denn der Commit ist ein Vorgänger von `HEAD`).","","Hier eine kleine Demo zur Erinnerung:"],afterMarkdowns:["Schick! Und weiter geht's."],command:"git cherry-pick C2",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:["In diesem Level geht es also auch um das Ziel den Commit `C2` zu modifizieren, aber ohne `git rebase -i` zu benutzen. Ich überlass es dir herauszufinden, wie das gehen soll. :D","","Nicht vergessen, die genaue Anzahl von Kopien (d.h. Apostrophs) ist nicht ausschlaggebend, nur die Differenz. Der Level ist zum Beispiel auch gelöst, wenn dein fertiger Baum dieselbe Struktur wie der Ziel-Baum hat, aber *überall* ein Apostroph mehr aufweist."]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## コミットをやりくりする その2","","*注意 この一つ前のレベル「コミットをやりくりする」をクリアしていない人は、まずそちらの問題をクリアしてきてください*","","前回見てきたように、コミット順序の変更のために、私たちは`rebase -i`コマンドを利用しました。ツリーの先頭に変更対象のコミットがあれば、--amendオプションを使うことで容易に変更を書きかえて、元の順序に戻すことができます。","","この場合に心配なことが一つだけあって、それは複数回の順序の変更が行われるので、rebaseのコンフリクト（衝突）が起こりうることです。こういうケースへの対策として、`git cherry-pick`を使った別の解決法について考えてみましょう。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["git cherry-pickを使うと、ツリーの中から複数のコミットを選んで、HEADの下に新しく作ることができましたね。","","簡単なデモを見てみましょう："],afterMarkdowns:["できました！次へ進みましょう"],command:"git cherry-pick C2",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:["このレベルでは、`C2`をamendすることで前回と同じ目的を達成しましょう。但し`rebase -i`は使わずにクリアしてください。どんな方法で進めるかはあなたにおまかせします！:D"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 提交变换戏法 #2","","*假如你还没有完成提交变换戏法 #1（前一关），这关不让玩哦！*","","如你在上一关所见，我们使用 `rebase -i` 来重排那些提交。只要把我们想要的提交挪到最顶端，我们就可以很容易地改变它，然后把它们重新排成我们想要的顺序。","","但唯一的问题就是这样做就要排很多次，有可能造成衍合冲突（rebase conflicts）。下面就看看用另外一种方法 `git cherry-pick` 是怎么做的吧。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["要在心理牢记 cherry-pick 可以从提交树的任何地方拿一个提交来放在 HEAD 上（尽管那个提交不在上游）。","","下面是一个小小的演示："],command:"git cherry-pick C2",afterMarkdowns:["好滴咧，我们继续"],beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:["那么这关呢，和上一关一样要改变提交 `C2`，但你要避免使用 `rebase -i`。自己想想要怎么解决吧，骚年！ :D"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## 커밋 갖고 놀기 #2","","*만약 이전 레벨의 커밋 갖고 놀기 #1을 풀지 않으셨다면, 계속하기에 앞서서 꼭 풀어보세요*","","이전 레벨에서 보셨듯이 `rebase -i` 명령으로 커밋의 순서를 바꿀 수 있습니다. 정정할 커밋이 바로 직전(top)에 있으면 간단히 --amend로 수정할 수 있고, 그리고 나서 다시 원하는 순서로 되돌려 놓으면 됩니다.","","이번에 한가지 문제는 순서를 꽤 많이 바꿔야한다는 점인데요, 그러다가 리베이스중에 충돌이 날 수 있습니다. 이번에는 다른 방법인 `git cherry-pick`으로 해결해 봅시다."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["git cherry-pick으로 HEAD에다 어떤 커밋이든 떨어 뜨려 놓을 수 있다고 알려드린것 기억나세요? (단, 그 커밋이 현재 가리키고 있는 커밋이 아니어야합니다)","","간단한 데모로 다시 알려드리겠습니다:"],afterMarkdowns:["좋아요! 계속할게요"],command:"git cherry-pick C2",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:["그럼 이번 레벨에서는 아까와 마찬가지로 `C2` 커밋의 내용을 정정하되, `rebase -i`를 쓰지 말고 해보세요. ^.~"]}}]}}}},{}],72:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C5","id":"master","remoteTrackingBranchID":null},"side":{"target":"C3","id":"side","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C4":{"parents":["C1"],"id":"C4"},"C5":{"parents":["C2","C4"],"id":"C5"}},"tags":{"v1":{"target":"C2","id":"v1","type":"tag"},"v0":{"target":"C1","id":"v0","type":"tag"}},"HEAD":{"target":"C2","id":"HEAD"}}',solutionCommand:"git tag v1 side~1;git tag v0 master~2;git checkout v1",startTree:'{"branches":{"master":{"target":"C5","id":"master","remoteTrackingBranchID":null},"side":{"target":"C3","id":"side","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C4":{"parents":["C1"],"id":"C4"},"C5":{"parents":["C2","C4"],"id":"C5"}},"tags":{},"HEAD":{"target":"master","id":"HEAD"}}',name:{en_US:"Git Tags",de_DE:"Git Tags"},hint:{en_US:"you can either check out the commit directly or simply checkout the tag!",de_DE:"Du kannst den Checkout entweder direkt auf den Commit oder das Tag machen."},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Tags","","As you have learned from previous lessons, branches are easy to move around and often refer to different commits as work is completed on them. Branches are easily mutated, often temporary, and always changing.","","If that's the case, you may be wondering if there's a way to *permanently* mark historical points in your project's history. For things like major releases and big merges, is there any way to mark these commits with something more permanent than a branch?",""]}},{type:"ModalAlert",options:{markdowns:['You bet there is! Git tags support this exact use case -- they (somewhat) permanently mark certain commits as "milestones" that you can then reference like a branch.',"",'More importantly though, they never move as more commits are created. You can\'t "check out" a tag and then complete work on that tag -- tags exist as anchors in the commit tree that designate certain spots.',"","Let's see what tags look like in practice."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's try making a tag at `C1` which is our version 1 prototype"],afterMarkdowns:["There! Quite easy. We named the tag `v1` and referenced the commit `C1` explicitly. If you leave the commit off, git will just use whatever `HEAD` is at"],command:"git tag v1 C1",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["For this level just create the tags in the goal visualization and then check `v1` out. Notice how you go into detached `HEAD` state -- this is because you can't commit directly onto the `v1` tag.","","In the next level we'll examine a more interesting use case for tags."]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Tags","","Wie du aus den vorhergehenden Levels weißt sind Branches einfach durch die Gegend zu schieben und zeigen of auf verschiedene Commits, während die Arbeit in ihnen fortschreitet. Ein Branch wird oft verändert, manchmal nur temporär, und ist ständig in Bewegung.","","Da das so ist fragst du dich vielleicht, ob es nicht eine Möglichkeit gibt, eine bestimmte Stelle in deiner Projekt-History *permanent* zu kennzeichnen. Kann man nicht zum Beispiel für große Releases und Meilensteine nicht einen Commit mit etwas festerem kennzeichnen, als mit einem Branch-Namen?",""]}},{type:"ModalAlert",options:{markdowns:["Aber klar! In Git gibt es genau zu diesem Zweck Tags -- sie kennzeichnen einen Commit (ziemlich) permanent als Meilenstein oder ähnliches, und man kann sie ansprechen wie Branch-Namen.","","Noch viel wichtiger, Tags verändern nicht ihre Position wenn man Commits hinzufügt. Du kannst ein Tag nicht in diesem Sinne auschecken und dann Modifikationen darauf committen. Tags sind Anker im Commit-Baum, die bestimmte Stellen anzeigen.","","Lass uns anschauen wie Tags in der Praxis funktionieren."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Lass uns ein Tag bei `C1` anlegen und damit die Version 1 unseres Prototyps markieren."],afterMarkdowns:["Peng! Ziemlich einfach. Wir haben das Tag `v1` genannt und lassen es auf `C1` zeigen. Wenn du den Commit weglässt wir das Tag für den Commit erzeugt, auf den `HEAD` zeigt."],command:"git tag v1 C1",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:['Um diesen Level zu schaffen, erstelle einfach die Tags wie sie in der Zielbeschreibung stehen und mach dann einen Checkout auf `v1`. Beachte wie du dabei in den "Detached HEAD" Zustand gehst -- das liegt daran, dass du keine Commits direkt auf das `v1` Tag machen kannst.',"","Im nächsten Level schauen wir uns dann interessantere Anwendungsfälle für Tags an."]}}]}}}},{}],73:[function(a,b,c){c.level={goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C7%27%22%2C%22id%22%3A%22master%22%7D%2C%22bugFix%22%3A%7B%22target%22%3A%22C3%22%2C%22id%22%3A%22bugFix%22%7D%2C%22side%22%3A%7B%22target%22%3A%22C5%22%2C%22id%22%3A%22side%22%7D%2C%22another%22%3A%7B%22target%22%3A%22C7%22%2C%22id%22%3A%22another%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C4%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C4%22%7D%2C%22C5%22%3A%7B%22parents%22%3A%5B%22C4%22%5D%2C%22id%22%3A%22C5%22%7D%2C%22C6%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C6%22%7D%2C%22C7%22%3A%7B%22parents%22%3A%5B%22C6%22%5D%2C%22id%22%3A%22C7%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%27%22%7D%2C%22C4%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C4%27%22%7D%2C%22C7%27%22%3A%7B%22parents%22%3A%5B%22C4%27%22%5D%2C%22id%22%3A%22C7%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git cherry-pick C3 C4 C7",compareOnlyMasterHashAgnostic:!0,disabledMap:{"git rebase":!0},startTree:'{"branches":{"master":{"target":"C1","id":"master"},"bugFix":{"target":"C3","id":"bugFix"},"side":{"target":"C5","id":"side"},"another":{"target":"C7","id":"another"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C4":{"parents":["C1"],"id":"C4"},"C5":{"parents":["C4"],"id":"C5"},"C6":{"parents":["C1"],"id":"C6"},"C7":{"parents":["C6"],"id":"C7"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{en_US:"Cherry-pick Intro",de_DE:"Einführung Cherry-picking"},hint:{en_US:"git cherry-pick followed by commit names!",de_DE:"git cherry-pick gefolgt von Commit-Namen."},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Moving Work Around","","So far we've covered the basics of git -- committing, branching, and moving around in the source tree. Just these concepts are enough to leverage 90% of the power of git repositories and cover the main needs of developers.","",'That remaining 10%, however, can be quite useful during complex workflows (or when you\'ve gotten yourself into a bind). The next concept we\'re going to cover is "moving work around" -- in other words, its a way for developers to say "I want this work here and that work here" in precise, eloquent, flexible ways.',"","This may seem like a lot, but it's a simple concept."]}},{type:"ModalAlert",options:{markdowns:["## Git Cherry-pick","","The first command in this series is called `git cherry-pick`. It takes on the following form:","","* `git cherry-pick <Commit1> <Commit2> <...>`","","It's a very straightforward way of saying that you would like to copy a series of commits below your current location (`HEAD`). I personally love `cherry-pick` because there is very little magic involved and it's easy to understand.","","Let's see a demo!",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Here's a repository where we have some work in branch `side` that we want to copy to `master`. This could be accomplished through a rebase (which we have already learned), but let's see how cherry-pick performs."],afterMarkdowns:["That's it! We wanted commits `C2` and `C4` and git plopped them down right below us. Simple as that!"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["To complete this level, simply copy some work from the three branches shown into master. You can see which commits we want by looking at the goal visualization.",""]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Inhalte verschieben","","Bis jetzt haben wir uns die Grundlagen von Git angeschaut -- comitten, verzweigen und sich im Commit-Baum bewegen. Nur damit lässt sich schon 90% der Macht von Git-Repositories nutzen und die meisten Anforderungen von Entwicklern erfüllen.","",'Die übrigen 10% jedoch können in komplexeren Abläufen sehr hilfreich sein (oder wenn man sich in eine schwierige Lage manövriert hat). Das nächste was wir uns anschauen, ist, Inhalte durch den Commit-Baum zu schieben. Es gibt dem Entwickler die Möglichkeit in präziser, eloquenter Manier zu sagen "Ich will diese Inhalte hier und diese dort haben".',"","Das klingt vielleicht nach einer Menge, aber es ist sehr einfach."]}},{type:"ModalAlert",options:{markdowns:["## git cherry-pick","","Der erste Befehl in dieser Serie ist `git cherry-pick`. Er sieht so aus:","","* `git cherry-pick <Commit1> <Commit2> <...>`","","Er ist eine einfache Möglichkeit um auszudrücken, dass du eine Folge von Commits unter deinen aktuellen Checkout (also `HEAD`) hängen möchtest. Ich persönlich liebe `cherry-pick`, weil es wenig Magic enthält und einfach zu verstehen ist.","","Schauen wir's uns mal an.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Hier haben wir ein Repository mit einigem Zeugs im Branch `side`, das wir in den Branch `master` kopieren wollen. Das könnten wir mit einem Rebase machen (wie bereits gesehen), aber schauen wir mal wie das mit `cherry-pick` geht."],afterMarkdowns:["Das war's! Wir wollten die commits `C2` und `C4` und Git hat die einfach unter unseren aktuellen Checkout kopiert. So einfach ist das."],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["Um diesen Level zu schaffen musst du einfach nur einige Commits aus den drei gezeigten Branches in den `master` kopieren. Der Zielbaum zeigt dir, welche.",""]}}]}}}
},{}],74:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C2","id":"master"},"bugFix":{"target":"C4","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"}},"HEAD":{"target":"C4","id":"HEAD"}}',solutionCommand:"git checkout C4",startTree:'{"branches":{"master":{"target":"C2","id":"master"},"bugFix":{"target":"C4","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{en_US:"Detach yo' HEAD",de_DE:"Den Kopf abtrennen",zh_CN:"分离HEAD"},hint:{en_US:"Use the label (hash) on the commit for help!",de_DE:"Benutze den Bezeichner (den Hash) des Commits.",zh_CN:"使用提交记录上的标签(hash)来求助！"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Moving around in Git","","Before we get to some of the more advanced features of Git, it's important to understand different ways to move through the commit tree that represents your project.","","Once you're comfortable moving around, your powers with other git commands will be amplified!","","","","",""]}},{type:"ModalAlert",options:{markdowns:["## HEAD","","First we have to talk about \"HEAD\". HEAD is the symbolic name for the currently checked out commit -- it's essentially what commit you're working on top of.","","HEAD always points to the most recent commit which is reflected in the working tree. Most git commands which make changes to the working tree will start by changing HEAD.","","Normally HEAD points to a branch name (like bugFix). When you commit, the status of bugFix is altered and this change is visible through HEAD."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's see this in action. Here we will reveal HEAD before and after a commit."],afterMarkdowns:["See! HEAD was hiding underneath our `master` branch all along."],command:"git checkout C1; git checkout master; git commit; git checkout C2",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["### Detaching HEAD","","Detaching HEAD just means attaching it to a commit instead of a branch. This is what it looks like beforehand:","","HEAD -> master -> C1",""],afterMarkdowns:["And now it's","","HEAD -> C1"],command:"git checkout C1",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["To complete this level, let's detach HEAD from `bugFix` and attach it to the commit instead.","","Specify this commit by its hash. The hash for each commit is displayed on the circle that represents the commit."]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Navigation durch Git","","Bevor wir uns einige fortgeschrittene Konzepte in Git ansehen ist es wichtig, verschiedene Wege zum Navigieren durch den Commit-Baum, der das Projekt enthält, zu kennen.","","Sobald du das drauf hast, vergrößern sich deine Möglichkeiten in allen anderen Git-Befehlen.","","","","",""]}},{type:"ModalAlert",options:{markdowns:["## HEAD","","Erst mal müssen wir über `HEAD` reden. `HEAD` ist ein Alias für den Commit, der gerade ausgecheckt ist -- es ist im Prinzip der Commit, an den du deinen nächsten Commit hängst.","","`HEAD` zeigt immer auf den neuesten Commit. Die meisten Git-Befehle, die den Baum verändern, fangen damit an dass sie `HEAD` verschieben.","","Normalerweise zeigt `HEAD` auf einen Branch-Namen (z.B. `bugFix`). Wenn du einen Commit machst, wird `bugFix` auf diesen Commit geschoben, und `HEAD` (da es auf `bugFix` zeigt) automatisch auch."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Schauen wir uns das mal in Aktion an. Wir werden hier `HEAD` vor und nach dem Commit anzeigen."],afterMarkdowns:["Siehst du? `HEAD` war die ganze Zeit unter `master` versteckt."],command:"git checkout C1; git checkout master; git commit; git checkout C2",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["### HEAD abkoppeln","",'`HEAD` abzukoppeln bedeutet, es direkt an einen bestimmten Commit zu hängen, anstatt an einen Branch. Wir gelangen dadurch in den "detached HEAD state". So sieht\'s vorher aus:',"","`HEAD` -> `master` -> `C1`",""],afterMarkdowns:["Und jetzt:","","`HEAD` -> `C1`"],command:"git checkout C1",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Um diesen Level abzuschließen, lass uns mal `HEAD` von `bugFix` abkoppeln und an den Commit hängen.","","Gib den Commit mit seinem Hash an. Der Hash jedes Commits steht in dem Kreis, der den Commit darstellt."]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 在Git中前后移动","","在接触Git的更多高级主题之前，我们先学习用不同的方法在代表你的项目的提交记录树上前后移动。","","一旦能够熟练地在Git中前进后退，你使用其他git命令的威力也会被放大！","","","","",""]}},{type:"ModalAlert",options:{markdowns:["## HEAD","",'我们首先看一下"HEAD". HEAD是当前提交记录的符号名称 -- 其实就是你正在其基础进行工作的提交记录。',"","HEAD总是指向最近一次提交记录，表现为当前工作树。大多数修改工作树的git命令都开始于改变HEAD指向。","","HEAD通常指向分支名（比如bugFix）。你提交时，改变了bugFix的状态，这一变化通过HEAD变得可见。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["在实例中看一下。我们将会观察提交前后HEAD的位置。"],afterMarkdowns:["看! HEAD一直藏在`master`分支后面。"],command:"git checkout C1; git checkout master; git commit; git checkout C2",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["### 分离 HEAD","","分离HEAD就是让其指向一个提交记录而不是分支名。这是命令执行之前的样子： ","","HEAD -> master -> C1",""],afterMarkdowns:["现在变成了","","HEAD -> C1"],command:"git checkout C1",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["想完成此关，从`bugFix`分离出HEAD并让其指向一个提交记录。","","通过hash值指定提交记录。每个提交记录的hash值显示在代表提交记录的圆圈中。"]}}]}}}},{}],75:[function(a,b,c){c.level={goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C4%27%22%2C%22id%22%3A%22master%22%7D%2C%22overHere%22%3A%7B%22target%22%3A%22C1%22%2C%22id%22%3A%22overHere%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C4%22%3A%7B%22parents%22%3A%5B%22C3%22%5D%2C%22id%22%3A%22C4%22%7D%2C%22C5%22%3A%7B%22parents%22%3A%5B%22C4%22%5D%2C%22id%22%3A%22C5%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%27%22%7D%2C%22C5%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C5%27%22%7D%2C%22C4%27%22%3A%7B%22parents%22%3A%5B%22C5%27%22%5D%2C%22id%22%3A%22C4%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git rebase -i overHere",compareOnlyMasterHashAgnostic:!0,disabledMap:{"git cherry-pick":!0},startTree:'{"branches":{"master":{"target":"C5","id":"master"},"overHere":{"target":"C1","id":"overHere"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C4"],"id":"C5"}},"HEAD":{"target":"master","id":"HEAD"}}',hint:{en_US:"you can use either branches or relative refs (HEAD~) to specify the rebase target",de_DE:"Du kannst entweder Branches oder relative Ref-Angaben (z.B. HEAD~) benutzen, um das Ziel des Rebase anzugeben."},name:{en_US:"Interactive Rebase Intro",de_DE:"Einführung Interactive Rebase"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Interactive Rebase","","Git cherry-pick is great when you know which commits you want (_and_ you know their corresponding hashes) -- it's hard to beat the simplicity it provides.","","But what about the situation where you don't know what commits you want? Thankfully git has you covered there as well! We can use interactive rebasing for this -- it's the best way to review a series of commits you're about to rebase.","","Let's dive into the details..."]}},{type:"ModalAlert",options:{markdowns:["All interactive rebase means is using the `rebase` command with the `-i` option.","","If you include this option, git will open up a UI to show you which commits are about to be copied below the target of the rebase. It also shows their commit hashes and messages, which is great for getting a bearing on what's what.","",'For "real" git, the UI window means opening up a file in a text editor like `vim`. For our purposes, I\'ve built a small dialog window that behaves the same way.']}},{type:"ModalAlert",options:{markdowns:["When the interactive rebase dialog opens, you have the ability to do 3 things:","","* You can reorder commits simply by changing their order in the UI (in our window this means dragging and dropping with the mouse).","* You can choose to completely omit some commits. This is designated by `pick` -- toggling `pick` off means you want to drop the commit.","* Lastly, you can squash commits. Unfortunately our levels don't support this for a few logistical reasons, so I\"ll skip over the details of this. Long story short though -- it allows you to combine commits.","","Great! Lets see an example"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["When you hit the button, an interactive rebase window will appear. Reorder some commits around (or feel free to unpick some) and see the result!"],afterMarkdowns:["Boom! Git copied down commits in the exact same way you specified through the UI"],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["To finish this level, do an interactive rebase and achieve the order shown in the goal visualization. Remember you can always `undo` or `reset` to fix mistakes :D"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Interaktiver Rebase","","Cherry-pick ist großartig wenn du genau weißt, welche Commits du willst (_und_ ihre jeweiligen Hashes kennst) -- es ist dann schwer an Einfachheit zu überbieten.","","Aber wie sieht es aus, wenn du die Commits nicht genau kennst, die du brauchst? Zum Glück bietet Git auch dafür eine Lösung an. Das können wir mit interaktivem Rebase machen -- die beste Art sich eine Serie von Commits in einem Rebase genau anzusehen.","","Schauen wir uns die Details an ..."]}},{type:"ModalAlert",options:{markdowns:["Interaktives Rebase bedeutet einfach nur, dass man dem `rebase` Befehl die Option `-i` hinzufügt.","","Wenn du das machst, zeigt Git dir jeden einzelnen Commit, der durch den Rebase kopiert werden würde. Es zeigt dir die Hashes und Kommentare, was gut ist um einen Überblick zu bekommen.","","In echtem Git besteht dieser Dialog daraus, die Commits in einem Text-Editor angezeigt zu bekommen. Für unsere Zwecke hab ich ein kleines Dialog-Fenster gebaut, dass sich ähnlich verhält."]}},{type:"ModalAlert",options:{markdowns:["Wenn sich der Dialog für den interaktiven Rebase öffnet, kannst du drei Dinge tun:","","* Du kannst die Reihenfolge der Commits durch Ziehen und Ablegen ändern.","* Du kannst Git sagen, einen Commit beim Rebase zu ignorieren -- im Dialog durch die Schaltfläche `pick` dargestellt.","* Außerdem kannst du Commit zusammenfassen (squash). Leider wird das hier nicht unterstützt, aber in echtem Git fasst es Commits zu einem zusammen.","","Super! Schauen wir uns ein Beispiel an."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Wenn du die Schaltfläche anklickst wird sich der Rebase-Dialog öffnen. Veränder die Reihenfolge der Commits oder klick bei einigen auf `pick` und schau dir das Ergebnis an."],afterMarkdowns:["Bämm! Git hat die Commits genau so kopiert, wie du es ausgewählt hast."],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Um dieses Level zu schaffen mach einen interaktiven Rebase, um genau doie Reihenfolge zu erzeugen die im Ziel-Baum angezeigt wird. Denk daran, dass du jederzeit mit `undo` oder `reset` Fehler rückgängig machen kannst. :D"]}}]}}}},{}],76:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C2","id":"master"},"bugFix":{"target":"C4","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"}},"HEAD":{"target":"C3","id":"HEAD"}}',solutionCommand:"git checkout bugFix^",startTree:'{"branches":{"master":{"target":"C2","id":"master"},"bugFix":{"target":"C4","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{en_US:"Relative Refs (^)",de_DE:"Relative Referenzen (^)",zh_CN:"相对引用(^)"},hint:{en_US:"Remember the Caret (^) operator!",de_DE:"Denk an den Dach-Operator (^)!",zh_CN:"记住插入(^)操作符!"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Relative Refs","","Moving around in Git by specifying commit hashes can get a bit tedious. In the real world you won't have a nice commit tree visualization next to your terminal, so you'll have to use `git log` to see hashes.","","Furthermore, hashes are usually a lot longer in the real Git world as well. For instance, the hash of the commit that introduced the previous level is `fed2da64c0efc5293610bdd892f82a58e8cbc5d8`. Doesn't exactly roll off the tongue...","","The upside is that Git is smart about hashes. It only requires you to specify enough characters of the hash until it uniquely identifies the commit. So I can type `fed2` instead of the long string above."]}},{type:"ModalAlert",options:{markdowns:["Like I said, specifying commits by their hash isn't the most convenient thing ever, which is why Git has relative refs. They are awesome!","","With relative refs, you can start somewhere memorable (like the branch `bugFix` or `HEAD`) and work from there.","","Relative commits are powerful, but we will introduce two simple ones here:","","* Moving upwards one commit at a time with `^`","* Moving upwards a number of times with `~<num>`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's look at the Caret (^) operator first. Each time you append that to a ref name, you are telling Git to find the parent of the specified commit.","",'So saying `master^` is equivalent to "the first parent of `master`".',"","`master^^` is the grandparent (second-generation ancestor) of `master`","","Let's check out the commit above master here"],afterMarkdowns:["Boom! Done. Way easier than typing the commit hash"],command:"git checkout master^",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["You can also reference `HEAD` as a relative ref. Let's use that a couple of times to move upwards in the commit tree"],afterMarkdowns:["Easy! We can travel backwards in time with `HEAD^`"],command:"git checkout C3; git checkout HEAD^; git checkout HEAD^; git checkout HEAD^",beforeCommand:"git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["To complete this level, check out the parent commit of `bugFix`. This will detach `HEAD`.","","You can specify the hash if you want, but try using relative refs instead!"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Relative Referenzen","","Es kann etwas mühselig werden, sich in einem Commit-Baum mittels Angabe der Hashes zu bewegen. Im echten Leben hat man normalerweise keine hübsche Visualisierung des Baumes neben seinem Terminal, also benutzt man `git log` um die Hashes zu sehen.","","Außerdem sind die echten Hashes sehr viel länger und nicht fortlaufend nummeriert. Beispielsweise heißt der Hash, mit dem ich den letzten Level committet habe, in echt `fed2da64c0efc5293610bdd892f82a58e8cbc5d8`. Nicht gerade einprägsam ...","","Zum Glück ist Git intelligent wenn es um die Hashes geht. Du musst nur soviele Zeichen eines Hashes angeben, bis der Hash eindeutig ist. Ich kann also `fed2` eingeben anstatt die komplette Zeichenkette tippen zu müssen."]}},{type:"ModalAlert",options:{markdowns:["Wie ich schon sagte: Commits über ihren Hash zu referenzieren ist nicht gerade der bequemste Weg. Weshalb es in Git relative Referenzen gibt. Welche super sind!","","Mit relativen Referenzen kann man bei einem leicht zu merkenden Bezeichner anfangen (zum Beispiel dem Branch-Namen `bugFix` oder der Referenz `HEAD`) und sich von dort vorarbeiten.","","Relative Referenzierung von Commits kann komplex sein, aber wir starten mit zwei einfachen Beispielen:","","* Geh einen Commit zurück mit `^`","* Geh eine bestimmte Anzahl von Commits zurück mit `~<Anzahl>`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Schauen wir uns zuerst den Dach-Operator (`^`) an. Jedes mal wenn du ihn hinter einen Referenz-Namen setzt, sagst du Git damit, dass es zum Vorgänger des angegebenen Commits gehen soll.","",'Das heißt `master^` ist gleichbedeutend mit "direkter Vorgänder des Commits, auf den `master` zeigt".',"","`master^^` ist also der Vorgänger des Vorgängers von `master`.","","Wir checken jetzt mal den Commit vor `master` aus:"],afterMarkdowns:["Bämm! Fertig. Einfacher, als den Commit-Hash zu tippen (oder zu kopieren)."],command:"git checkout master^",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Du kannst auch `HEAD` als Basis für relative Referenzen benutzen. Lass uns das ein paar Mal verwenden, um uns im Commit-Baum nach oben zu bewegen."],afterMarkdowns:["Das war einfach. Wir reisen mit `HEAD^` in der Zeit zurück."],command:"git checkout C3; git checkout HEAD^; git checkout HEAD^; git checkout HEAD^",beforeCommand:"git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Um dieses Level abzuschließen musst du den direkten Vorgänger von `bugFix` auschecken. Dadurch wirst du `HEAD` von `bugFix` abkoppeln.","","Du kannst natürlich den Hash angeben, aber versuch doch relative Referenzen zu benutzen!"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 相对引用","","用指定提交记录hash值的方式在Git中移动会变得比较乏味。在现实中，你不会有漂亮的可视化的提交记录树放在终端旁边，所以你不得不用`git log`来查看hasn值。","","另外，hash值在真实的Git环境中也会更长。举个例子，前一关的介绍中的提交记录的hash值是`fed2da64c0efc5293610bdd892f82a58e8cbc5d8`。不要把舌头闪了...","","好的一面是，Git对hash的处理很智能。你只需要提供能够唯一标识提交记录的前几个字符即可。所以，我可以仅输入`fed2`而不是上面的一长串字符。"]}},{type:"ModalAlert",options:{markdowns:["我说过，通过hash指定提交记录不是很方便，所以Git引入了相对引用。这个就很牛掰了!","","使用相对引用，你可以从一个易于记忆的地方（比如分支名`bugFix`或`HEAD`）开始工作。","","相对引用非常给力，这里我介绍两个简单的用法：","","* 使用`^`向上移动1个提交记录","* 使用`~<num>`向上移动多个提交记录"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["首先看看插入(^)操作符。把插入符跟在引用名后面，表示让Git寻找指定提交记录的父提交。","",'所以`master^`相当于"`master`的父提交"。',"","`master^^`是`master`的父父提交（上上代祖先）","","切换到master的父提交"],afterMarkdowns:["唰！搞定。这种方式比输入提交记录的hash值简单多了！"],command:"git checkout master^",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["你也可以`HEAD`把用作相对引用。以下命令使用`HEAD`在提交树中向上移动几次。"],afterMarkdowns:["简单！我们可以一直使用`HEAD^`向上移动。"],command:"git checkout C3; git checkout HEAD^; git checkout HEAD^; git checkout HEAD^",beforeCommand:"git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["要完成此关，切换到`bugFix`的父提交。这会分离出`HEAD`.","","如果你愿意的话，使用hash值也可以过关，但为何不试试使用相对引用呢？"]}}]}}}},{}],77:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C6","id":"master"},"bugFix":{"target":"C0","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2"],"id":"C4"},"C5":{"parents":["C3"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"}},"HEAD":{"target":"C1","id":"HEAD"}}',solutionCommand:"git branch -f master C6;git checkout HEAD~1;git branch -f bugFix HEAD~1",startTree:'{"branches":{"master":{"target":"C4","id":"master"},"bugFix":{"target":"C5","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2"],"id":"C4"},"C5":{"parents":["C3"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"}},"HEAD":{"target":"C2","id":"HEAD"}}',hint:{en_US:"You'll need to use at least one direct reference (hash) to complete this level",de_DE:"Du musst mindestens einen Hash benutzen, um dieses Level zu schaffen",zh_CN:"这一关至少要用到一次直接引用(hash)"},name:{en_US:"Relative Refs #2 (~)",de_DE:"Relative Referenzen #2 (~)",zh_CN:"相对引用2(~)"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:['### The "~" operator',"","Say you want to move a lot of levels up in the commit tree. It might be tedious to type `^` several times, so Git also has the tilde (~) operator.","","","The tilde operator (optionally) takes in a trailing number that specifies the number of parents you would like to ascend. Let's see it in action"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's specify a number of commits back with `~`."],afterMarkdowns:["Boom! So concise -- relative refs are great."],command:"git checkout HEAD~4",beforeCommand:"git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["### Branch forcing","","You're an expert on relative refs now, so let's actually *use* them for something.","","One of the most common ways I use relative refs is to move branches around. You can directly reassign a branch to a commit with the `-f` option. So something like:","","`git branch -f master HEAD~3`","","Moves (by force) the master branch to three parents behind HEAD."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's see that previous command in action"],afterMarkdowns:["There we go! Relative refs gave us a concise way to refer to `C1` and branch forcing (`-f`) gave us a way to quickly move a branch to that location"],command:"git branch -f master HEAD~3",beforeCommand:"git commit; git commit; git commit; git checkout -b bugFix"}},{type:"ModalAlert",options:{markdowns:["Now that you have seen relative refs and branch forcing in combination, lets use them to solve the next level.","","To complete this level, move `HEAD`, `master`, and `bugFix` to their goal destinations shown."]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:['### Der "~"-Operator',"","Nehem wir an du willst viele Schritte im Commit-Baum zurückgehen. Dann wird es schnell mühsam immer wieder `^` einzugeben; deswegen gibt es in Git den Tilde-Operator `~`.","","Der Tilde-Operator akzeptiert optional eine Zahl, mit der du angeben kannst vieviele Vorgänger zu zurückgehen willst. Keine Anzahl anzugeben bewirkt dasselbe wie `~1`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Geben wir mit `~` an wiviele Commits wir zurückgehen wollen"],afterMarkdowns:["Peng! So einfach -- relative Referenzen sind super."],command:"git checkout HEAD~4",beforeCommand:"git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["### Erzwungene Branches","","Du bist jetzt Experte in Sachen relative Referenzen, also lass sie uns mal richtig einsetzen.","","Das Verschieben von Branches ist einer der häufigsten Anwendungsfälle dafür. Du kannst einen Branchnamen direkt auf einen bestimmten Commit setzen (_ohne_ ihne vorher ausgecheckt haben zu müssen!) indem du den Parameter `-f` benutzt. So in etwa:","","`git branch -f master HEAD~3`","","Das bewegt (erzwungenermaßen) den `master` auf den Commit drei Vorgänger vor `HEAD`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Schauen wir uns das mal in Aktion an:"],afterMarkdowns:["Das war's schon! Relative Referenzen ermüglichen es uns den Commit `C1` sehr einfach anzugeben und `git branch -f` ermöglicht es uns, den Branch sehr schnell auf diesen Commit zu setzen."],command:"git branch -f master HEAD~3",beforeCommand:"git commit; git commit; git commit; git checkout -b bugFix"}},{type:"ModalAlert",options:{markdowns:["Jetzt wo du relative Referenzen und erzwungenes Branching in Kombination gesehen hast können wir damit den nächsten Level bewältigen.","","Bewege `HEAD`, `master` und `bugFix` an die jeweils angegebenen Positionen, um diesen Level abzuschließen."]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:['### The "~" operator',"","假设需要在提交树中向上移动很多步。使用多个`^`非常无聊，所以Git也引入了波浪(~)操作符。","","","波浪操作符后面可以（可选地）跟一个数字，指定向上移动多少次。看个例子"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["使用`~`一次后退多步."],afterMarkdowns:["唰！如此简洁--相对引用就是好啊！"],command:"git checkout HEAD~4",beforeCommand:"git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["### Branch forcing","","你现在是相对引用的高手了，现在*用*他来实际做点事情。","","我使用相对引用最多的就是移动分支。你可以使用`-f`选项把直接让分支指向另一个提交。举个例子:","","`git branch -f master HEAD~3`","","（强制）移动master指向HEAD的第3级父提交。"]}},{type:"ModalAlert",options:{markdowns:["要完成此关，移动`HEAD`，`master`和`bugFix`到目标所示的位置。"]}}]}}}},{}],78:[function(a,b,c){c.level={goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C1%22%2C%22id%22%3A%22master%22%7D%2C%22pushed%22%3A%7B%22target%22%3A%22C2%27%22%2C%22id%22%3A%22pushed%22%7D%2C%22local%22%3A%7B%22target%22%3A%22C1%22%2C%22id%22%3A%22local%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C2%27%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C2%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22pushed%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git reset HEAD~1;git checkout pushed;git revert HEAD",compareOnlyBranches:!0,startTree:'{"branches":{"master":{"target":"C1","id":"master"},"pushed":{"target":"C2","id":"pushed"},"local":{"target":"C3","id":"local"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"}},"HEAD":{"target":"local","id":"HEAD"}}',name:{en_US:"Reversing Changes in Git",de_DE:"Änderungen in Git rückgängig machen",ja:"変更を元に戻す",fr_FR:"Annuler des changements avec Git",ko:"Git에서 작업 되돌리기",zh_CN:"在Git中撤销更改"},hint:{en_US:"Notice that revert and reset take different arguments.",de_DE:"Beachte, dass revert und reset unterschiedliche Argumente benötigen",fr_FR:"",zh_CN:"注意revert和reset使用不同的参数。",ko:"",ja:""},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Reversing Changes in Git","","There are many ways to reverse changes in Git. And just like committing, reversing changes in Git has both a low-level component (staging individual files or chunks) and a high-level component (how the changes are actually reversed). Our application will focus on the latter.","","There are two primary ways to undo changes in Git -- one is using `git reset` and the other is using `git revert`. We will look at each of these in the next dialog",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Reset","",'`git reset` reverts changes by moving a branch reference backwards in time to an older commit. In this sense you can think of it as "rewriting history;" `git reset` will move a branch backwards as if the commit had never been made in the first place.',"","Let's see what that looks like:"],afterMarkdowns:["Nice! Git simply moved the master branch reference back to `C1`; now our local repository is in a state as if `C2` had never happened"],command:"git reset HEAD~1",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Revert","",'While reseting works great for local branches on your own machine, its method of "rewriting history" doesn\'t work for remote branches that others are using.',"","In order to reverse changes and *share* those reversed changes with others, we need to use `git revert`. Let's see it in action"],afterMarkdowns:["Weird, a new commit plopped down below the commit we wanted to reverse. That's because this new commit `C2'` introduces *changes* -- it just happens to introduce changes that exactly reverses the commit of `C2`.","","With reverting, you can push out your changes to share with others."],command:"git revert HEAD",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["To complete this level, reverse the two most recent commits on both `local` and `pushed`.","","Keep in mind that `pushed` is a remote branch and `local` is a local branch -- that should help you choose your methods."]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Änderungen in Git rückgängig machen","","Es gibt viele Möglichkeiten, Änderungen in Git zurückzunehmen. Und ebenso wie das Committen hat auch das rückgängig Machen eine Basis-Komponente (Dateien und Inhalte vormerken) und einen übergeordneten Aspekt (wie die Änderungen tatsächlich zurückgenommen werden). Diese Applikation beschäftigt sich wiederum mit den übergeordneten Vorgängen.","","Es gibt grundsätzlich zwei Arten in Git etwas rückgängig zu machen -- einerseits `git reset` und andererseit `git revert`. Wir schauen uns beide mal an.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Reset","",'`git reset` nimm Änderungen zurück, indem es eine Branch-Referenz auf einen anderen Commit setzt. Es ist ein bisschen (aber nicht wirklich) wie "Geschichte umschreiben"; `git reset` bewegt einen Branch auf einen anderen Commit, als hätte er nie anders ausgesehen.',"","Schauen wir, wie das aussieht:"],afterMarkdowns:["Schick! Git hat den `master` einfach auf `C1` gesetzt; unser lokales Repository sieht nun so aus, als hätte `C2` nie stattgefunden."],command:"git reset HEAD~1",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Revert","",'Obwohl `git reset` super im lokalen Kontext funktioniert, ist der Ansatz vom "Umschreiben" der Commit-Geschichte nicht geeignet für Branches, die auf einem Server liegen und auch von anderen benutzt werden.',"","Um Änderungen rückgängig zu machen und das mit anderen zu *teilen* müssen wir `git revert` benutzen. Schauen wir uns das in Aktion an."],afterMarkdowns:["Komisch, es ist ein neuer Commit entstanden. Das liegt daran, dass `C2'` genau die *Änderungen* enthält, die die Änderungen aus `C2` aufheben.","","Durch Reverten kannst du das Zurücknehmen von Änderungen mit anderen teilen."],command:"git revert HEAD",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["Um diesen Level abzuschließen musst du sowohl auf `local` also auch auf `pushed` jeweils die zwei letzten Commits zurücknehmen.","","Vergiss nicht, dass `pushed` auch auf einem Server liegt und `local` ein rein lokaler Branch ist -- das sollte dir helfen, die richtige Methode zu wählen."]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## 変更を元に戻す","","Gitでは変更を元に戻す方法がたくさんあります。コミットと同じように、低レベルな動作（ファイル別だったりファイルの中の一部だったり）も高レベルな動作（変更のまとまりのキャンセル）もできます。このアプリケーションでは後者の方法について紹介します。","","基本的なアンドゥの方法が2つあります - 一つは`git reset`を使う方法で、もう1つは`git revert`を使う方法です。次のダイアログで一つ一つを見ていきます。",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Reset","","`git reset`はブランチのポインタを後方に移動することで変更のキャンセルを実現します。履歴を上書きするような動作だと思うと良いでしょうか：`git reset`はそもそも前のコミットなんかなかったかのように、ブランチのポインタを元に戻してくれます。","","どういう感じか見てみましょう。"],afterMarkdowns:["いいですね！Gitは単純にmasterブランチへのポインタを`C1`へ戻しました。これでこのローカルリポジトリにはまるで`C2`なんて無かったかのように変更をキャンセルできました。"],command:"git reset HEAD~1",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Revert","","自分のマシン上のブランチではさっきの`git reset`でうまくいきましたが、この「履歴を上書きする」手段は、他の人も使っているリモートにあるリポジトリに対しては使うことができません。","","変更を巻き戻して他の人とそれを共有するためには、`git revert`を使う必要があります。今度はこれを見てみましょう。"],afterMarkdowns:["あれ、おかしいな。巻き戻したいと思ってたコミットの下に新しいコミットが出来上がってしまったみたいです。なぜか。これは、この新しい`C2'`コミットは`C2`へ戻すのに必要な内容を確かに変更して巻き戻していたのです。","","こんな風にして、巻き戻した内容を他人と共有するためにはrevertを使います。"],command:"git revert HEAD",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["この章の仕上げに、`local`と`pushed`の両方の直近のコミットを巻き戻してみましょう。","","`pushed`はリモートのブランチで、`local`はローカルであることに注意。正しくコマンドを使い分けましょう。"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Annuler des changements avec Git","","Il y a de nombreuses façons d'annuler des changement avec Git. De même que pour les commits, annuler des changements avec Git a à la fois un aspect bas-niveau (gestion dans le 'staging' des fichiers et morceaux de fichiers) et un aspect de plus haut niveau 9comment les changements sont effectivement annulés). Nous allons nous intéresser à ce dernier point.","","Il y a principalement deux façons d'annuler des changements avec Git -- l'une est `git reset` et l'autre est `git revert`. Nous allons maintenant voir chacune de ces façons",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Reset","","`git reset` annule des changements en déplaçant la référence en arrière dans le temps sur un commit plus ancien. En ce sens, on peut considérer cela comme une façon de \"réécrire l'histoire\"; `git reset` fait remonter une branche en arrière comme si le(s) commit(s) n'avait jamais eu lieu.","","Regardons à quoi cela ressemble :"],afterMarkdowns:["Bravo ! Git a simplement déplacé la référence de la branche master en la faisant revenir sur `C1`; désormais notre dépôt est dans le même état que si `C2` n'avait jamais eu lieu"],command:"git reset HEAD~1",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Revert","","Bien que le reset marche parfaitement pour les branches locales sur notre propre machine, cette façon de \"réécrire l'histoire\" ne marche pas avec les banches distantes (remote) que d'autres personnes utilisent.","","Pour pouvoir annuler des changements et *partager* ces annulations avec d'autres, nous devons utiliser `git revert`. Regardons comment cela fonctionne"],afterMarkdowns:["Étrangement, un nouveau commit est appaaru en bas sous le commit que nous voulions annuler. C'est parce que ce nouveau commit `C2'` introduit des *modifications* -- celles qui correspondent justement à l'annulation de celles du commit `C2`.","","Avec revert, vous pouvez diffuser (push) vos modifications et les partager avec tout le monde."],command:"git revert HEAD",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["Pour accomplir ce niveau, annulez les deux derniers commits à la fois sur `local` et sur `pushed`.","","Ayez à l'esprit que `pushed` est une branche distante et `local` est une branche locale -- cela devrait vous guider dans le choix de la méthode à employer."]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 撤销 Git 里面的变动","","在 Git 里撤销修改的方法很多。和 commit 一样，在 Git 里撤销变动同时具有底层部分（暂存一些独立的文件或者片段）和高层部分（具体到变动是究竟怎么被撤销的）。我们这个应用主要关注后者。","","在 Git 里主要用两种方法来撤销变动 —— 一种是 `git reset`，另外一种是 `git revert`。让我们在下一个窗口逐一了解它们。",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Reset","",'`git reset`把分支记录回退到上一个提交记录来实现撤销改动。你可以认为这是在"重写历史"。`git reset`往回移动分支，原来指向的提交记录好像重来没有提交过一样。',"","让我们看看具体的操作："],command:"git reset HEAD~1",afterMarkdowns:["Nice!Git把master分支的指向简单地移回到`C1`；现在我们的本地代码库处于没有提交过`C2`的状态了。"],beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Revert","","虽然在你的本地分支中使用`git reset`很方便，但是这种“改写历史”的方法对别人的远端分支是无效的哦！","","为了撤销更改并*传播*给别人，我们需要使用`git revert`。举个例子"],command:"git revert HEAD",afterMarkdowns:["怪哉！在我们要撤销的提交记录后面居然多了一个新提交！这是因为新提交记录`C2'`引入了*更改*——刚好是用来撤销 `C2` 这个提交的。","","借助 revert，现在可以把你的更改传递给别人啦。"],beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["要完成此关，分别撤销`local`分支和`pushed`分支上的最近一次提交。","","记住 `pushed` 是一个远程分支，`local` 是一个本地分支 —— 有了这么明显的提示应该知道用哪种方法了吧？"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git에서 작업 되돌리기","","Git에는 작업한 것을 되돌리는 여러가지 방법이 있습니다. 변경내역을 되돌리는 것도 커밋과 마찬가지로 낮은 수준의 일(개별 파일이나 묶음을 스테이징 하는 것)과 높은 수준의 일(실제 변경이 복구되는 방법)이 있는데요, 여기서는 후자에 집중해 알려드릴게요.","","Git에서 변경한 내용을 되돌리는 방법은 크게 두가지가 있습니다 -- 하나는 `git reset`을 쓰는거고, 다른 하나는 `git revert`를 사용하는 것입니다. 다음 화면에서 하나씩 알아보겠습니다.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git 리셋(reset)","",'`git reset`은 브랜치로 하여금 예전의 커밋을 가리키도록 이동시키는 방식으로 변경 내용을 되돌립니다. 이런 관점에서 "히스토리를 고쳐쓴다"라고 말할 수 있습니다. 즉, `git reset`은 마치 애초에 커밋하지 않은 것처럼 예전 커밋으로 브랜치를 옮기는 것입니다.',"","어떤 그림인지 한번 보죠:"],afterMarkdowns:["그림에서처럼 master 브랜치가 가리키던 커밋을 `C1`로 다시 옮겼습니다; 이러면 로컬 저장소에는 마치 `C2`커밋이 아예 없었던 것과 마찬가지 상태가 됩니다."],command:"git reset HEAD~1",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git 리버트(revert)","",'각자의 컴퓨터에서 작업하는 로컬 브랜치의 경우 리셋(reset)을 잘 쓸 수 있습니다만, "히스토리를 고쳐쓴다"는 점 때문에 다른 사람이 작업하는 리모트 브랜치에는 쓸 수 없습니다.',"","변경분을 되돌리고, 이 되돌린 내용을 다른 사람들과 *공유하기* 위해서는, `git revert`를 써야합니다. 예제로 살펴볼게요."],afterMarkdowns:["어색하게도, 우리가 되돌리려고한 커밋의 아래에 새로운 커밋이 생겼습니다. `C2`라는 새로운 커밋에 *변경내용*이 기록되는데요, 이 변경내역이 정확히 `C2` 커밋 내용의 반대되는 내용입니다.","","리버트를 하면 다른 사람들에게도 변경 내역을 밀어(push) 보낼 수 있습니다."],command:"git revert HEAD",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["이 레벨을 통과하려면, `local` 브랜치와 `pushed` 브랜치에 있는 최근 두 번의 커밋을 되돌려 보세요.","","`pushed`는 리모트 브랜치이고, `local`은 로컬 브랜치임을 신경쓰셔서 작업하세요 -- 어떤 방법을 선택하실지 떠오르시죠?"]}}]}}}
},{}],79:[function(a,b,c){c.level={compareOnlyMasterHashAgnostic:!0,disabledMap:{"git revert":!0,"git cherry-pick":!0},goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C7%27%22%2C%22id%22%3A%22master%22%7D%2C%22bugFix%22%3A%7B%22target%22%3A%22C3%27%22%2C%22id%22%3A%22bugFix%22%7D%2C%22side%22%3A%7B%22target%22%3A%22C6%27%22%2C%22id%22%3A%22side%22%7D%2C%22another%22%3A%7B%22target%22%3A%22C7%27%22%2C%22id%22%3A%22another%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C4%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C4%22%7D%2C%22C5%22%3A%7B%22parents%22%3A%5B%22C4%22%5D%2C%22id%22%3A%22C5%22%7D%2C%22C6%22%3A%7B%22parents%22%3A%5B%22C5%22%5D%2C%22id%22%3A%22C6%22%7D%2C%22C7%22%3A%7B%22parents%22%3A%5B%22C5%22%5D%2C%22id%22%3A%22C7%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%27%22%7D%2C%22C4%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C4%27%22%7D%2C%22C5%27%22%3A%7B%22parents%22%3A%5B%22C4%27%22%5D%2C%22id%22%3A%22C5%27%22%7D%2C%22C6%27%22%3A%7B%22parents%22%3A%5B%22C5%27%22%5D%2C%22id%22%3A%22C6%27%22%7D%2C%22C7%27%22%3A%7B%22parents%22%3A%5B%22C6%27%22%5D%2C%22id%22%3A%22C7%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git rebase master bugFix;git rebase bugFix side;git rebase side another;git rebase another master",startTree:'{"branches":{"master":{"target":"C2","id":"master"},"bugFix":{"target":"C3","id":"bugFix"},"side":{"target":"C6","id":"side"},"another":{"target":"C7","id":"another"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C0"],"id":"C4"},"C5":{"parents":["C4"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"},"C7":{"parents":["C5"],"id":"C7"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{en_US:"Rebasing over 9000 times",de_DE:"10000 Rebases unter dem `HEAD`",ko:"9천번이 넘는 리베이스",ja:"Rebasing over 9000 times",zh_CN:"N次Rebase"},hint:{en_US:"Remember, the most efficient way might be to only update master at the end...",de_DE:"Nicht vergessen: die effizienteste Möglichkeit könnte sein, schließlich einfach nur den master zu aktualisieren ...",ja:"最も効率的なやり方はmasterを最後に更新するだけかもしれない・・・",ko:"아마도 master를 마지막에 업데이트하는 것이 가장 효율적인 방법일 것입니다...",zh_CN:"记住，最后更新master分支可能是最高效的方法。"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["### Rebasing Multiple Branches","","Man, we have a lot of branches going on here! Let's rebase all the work from these branches onto master.","","Upper management is making this a bit trickier though -- they want the commits to all be in sequential order. So this means that our final tree should have `C7'` at the bottom, `C6'` above that, etc etc, etc all in order.","","If you mess up along the way, feel free to use `reset` to start over again. Be sure to check out our solution and see if you can do it in fewer commands!"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["### Mehrere Branches rebasen","","Wow, wir haben hier ja eine Menge Branches! Lass uns mal die ganze Arbeit, die in diesen Branches steckt, auf den `master` packen, um sie auf Stand zu bringen.","","Die Führungsetage macht die Sache allerdings etwas trickreicher -- die möchten, dass alle Commits in aufsteigender Reihenfolge geordnet sind. Das heißt unser fertiger Baum sollte `C7` ganz unten haben, darüber `C6` und so weiter und so fort.","","Upper management is making this a bit trickier though -- they want the commits to all be in sequential order. So this means that our final tree should have `C7'` at the bottom, `C6'` above that, etc etc, etc all in order.","Wenn du irgendwo einen Fehler machst, benutz ruhig `reset` um wieder von vorne anzufangen oder `undo` um einen Schrit zurückzugehen. Schau dir die Lösung an und versuch es in weniger Schritten hinzubekommen, als die."]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["### 複数のブランチをリベースする","","さあ、いくつものブランチが出てきます。このブランチたち全てをmasterブランチにリベースしましょう。","","おエライさん方が今回の仕事を少しトリッキーにしてくれました ― コミットはすべて一列のシーケンシャルな状態にしてほしいそうです。つまり私たちが作るリポジトリの最終的なツリーの状態は、`C7'`が最後に来て、`C6'`がその一つ上に来て、、と順に積み重なるイメージです。","","試行錯誤してツリーが汚くなってきたら、`reset`コマンドを使ってツリーの状態を初期化してください。模範解答をチェックして、それよりも簡単なコマンドで済ませられるかどうか、を考えるのも忘れずに！"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["### 多分支衍合","","呐，现在我们有很多分支啦！让我们rebase这些分支的工作到 master 分支上吧。","","但是你的头头找了点麻烦 —— 他们希望得到有序的提交历史，也就是我们最终的结果是 `C7'` 在最底部，`C6'` 在它上面，以此类推。","","假如你搞砸了，没所谓的（虽然我不会告诉你用 `reset` 可以重新开始）。记得看看我们提供的答案，看你能否使用更少的命令完成任务！"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["### 여러 브랜치를 리베이스(rebase)하기 ","","음, 여기 꽤 여러개의 브랜치가 있습니다! 이 브랜치들의 모든 작업내역을 master에 리베이스 해볼까요?","","윗선에서 일을 복잡하게 만드네요 -- 그 분들이 이 모든 커밋들을 순서에 맞게 정렬하라고 합니다. 그럼 결국 우리의 최종 목표 트리는 제일 아래에 `C7'` 커밋, 그 위에 `C6'` 커밋, 또 그 위에 순서대로 보여합니다.","","만일 작업중에 내용이 꼬인다면, `reset`이라고 쳐서 처음부터 다시 시작할 수 있습니다. 모범 답안을 확인해 보시고, 혹시 더 적은 수의 커맨드로 해결할 수 있는지 알아보세요!"]}}]}}}},{}],80:[function(a,b,c){c.level={compareAllBranchesHashAgnostic:!0,disabledMap:{"git revert":!0},goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C5%22%2C%22id%22%3A%22master%22%7D%2C%22one%22%3A%7B%22target%22%3A%22C2%27%22%2C%22id%22%3A%22one%22%7D%2C%22two%22%3A%7B%22target%22%3A%22C2%27%27%22%2C%22id%22%3A%22two%22%7D%2C%22three%22%3A%7B%22target%22%3A%22C2%22%2C%22id%22%3A%22three%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C4%22%3A%7B%22parents%22%3A%5B%22C3%22%5D%2C%22id%22%3A%22C4%22%7D%2C%22C5%22%3A%7B%22parents%22%3A%5B%22C4%22%5D%2C%22id%22%3A%22C5%22%7D%2C%22C4%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C4%27%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C4%27%22%5D%2C%22id%22%3A%22C3%27%22%7D%2C%22C2%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C2%27%22%7D%2C%22C5%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C5%27%22%7D%2C%22C4%27%27%22%3A%7B%22parents%22%3A%5B%22C5%27%22%5D%2C%22id%22%3A%22C4%27%27%22%7D%2C%22C3%27%27%22%3A%7B%22parents%22%3A%5B%22C4%27%27%22%5D%2C%22id%22%3A%22C3%27%27%22%7D%2C%22C2%27%27%22%3A%7B%22parents%22%3A%5B%22C3%27%27%22%5D%2C%22id%22%3A%22C2%27%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22two%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git checkout one; git cherry-pick C4 C3 C2; git checkout two; git cherry-pick C5 C4 C3 C2; git branch -f three C2",startTree:'{"branches":{"master":{"target":"C5","id":"master"},"one":{"target":"C1","id":"one"},"two":{"target":"C1","id":"two"},"three":{"target":"C1","id":"three"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C4"],"id":"C5"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{ko:"브랜치 스파게티",en_US:"Branch Spaghetti",de_DE:"Branch-Spaghetti",ja:"ブランチスパゲッティ",zh_CN:"分支浆糊"},hint:{en_US:"Make sure to do everything in the proper order! Branch one first, then two, then three",de_DE:"Stelle sicher, dass du alles in der richtigen Reihenfolge machst! Branche erst one, dann two, dann three.",ja:"全て正しい順番で処理すること！oneが最初で、次がtwo、最後にthreeを片付ける。",ko:"이 문제를 해결하는 방법은 여러가지가 있습니다! 체리픽(cherry-pick)이 가장 쉽지만 오래걸리는 방법이고, 리베이스(rebase -i)가 빠른 방법입니다",zh_CN:"确保你是按照正确的顺序来操作！先操作分支 `one`, 然后 `two`, 最后才是 `three`"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branch Spaghetti","","WOAHHHhhh Nelly! We have quite the goal to reach in this level.","","Here we have `master` that is a few commits ahead of branches `one` `two` and `three`. For whatever reason, we need to update these three other branches with modified versions of the last few commits on master.","","Branch `one` needs a re-ordering and a deletion of `C5`. `two` needs pure reordering, and `three` only needs one commit!","","We will let you figure out how to solve this one -- make sure to check out our solution afterwards with `show solution`. "]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branch-Spaghetti","","Puh! Wir haben ein ganz schön schweres Ziel für dieses Level.","","Wir haben hier einen `master`, der ein paar Commits weiter ist als die Branche `one`, `two` und `three`. Aus welchem Grund auch immer müssen wir diese drei anderen Branches mit modifizierten Versionen der paar letzten Commits von `master` aktualisieren.","","Branch `one` benötigt eine Umsortierung und `C5` muss gelöscht werden. `two` muss nur umsortiert werden und `three` braucht nur einen Commit!","","Ich lass dich diese Aufgabe selbst lösen -- schau dir hinterher auf jeden Fall die Lösung mit `show solution` an."]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## ブランチスパゲッティ","","なんということでしょう。今回のレベルクリアのために、やることがたくさんあります。","","いま`master`が指しているコミットの数個前のコミットに、ブランチ`one`、`two`それから`three`があります。何か事情があって、これらの3つのブランチをmasterが指している最新の状態に更新したいケースを考えます。","","ブランチ`one`に対しては、順序の変更と`C5`の削除が必要です。`two`では順序の変更のみ、`three`に対しては1回だけコミットすればOKです。","","`show solution`コマンドで模範解答を確認できますから、こちらも利用してください。 "]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branch Spaghetti","","哇塞大神！这关我们要来点不同的！","","现在我们的 `master` 分支是比 `one` `two` 和 `three` 要多几个提交。出于某种原因，我们需要把其他三个分支更新到 master 分支上新近的几个不同提交上。（update these three other brances with modified versions of the last few commits on master）","","分支 `one` 需要重新排序和撤销， `two` 需要完全重排，而 `three` 只需要提交一次。","","慢慢摸索会找到答案的 —— 你完事记得用 `show solution` 看看我们的答案哦。"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## 브랜치 스파게티","","음, 이번에는 만만치 않습니다!","","여기 `master` 브랜치의 몇 번 이전 커밋에 `one`, `two`,`three` 총 3개의 브랜치가 있습니다. 어떤 이유인지는 몰라도, master의 최근 커밋 몇 개를 나머지 세 개의 브랜치에 반영하려고 합니다.","","`one` 브랜치는 순서를 바꾸고 `C5`커밋을 삭제하고, `two`브랜치는 순서만 바꾸며, `three`브랜치는 하나의 커밋만 가져옵시다!","","자유롭게 이 문제를 풀어보시고 나서 `show solution`명령어로 모범 답안을 확인해보세요."]}}]}}}},{}],81:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":"o/master"},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"}}}',solutionCommand:"git clone",name:{en_US:"Clone Intro",de_DE:"Clone Einführung"},hint:{en_US:"Just git clone!",de_DE:"Einfach git clone ausführen!"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Remotes","","Remote repositories aren't actually that complicated. In today's world of cloud computing it's easy to think that there's a lot of magic behind git remotes, but they are actually just copies of your repository on another computer. You can typically talk to this other computer through the Internet, which allows you to transfer commits back and forth.","","That being said, remote repositories have a bunch of great properties:","","- First and foremost, remotes serve as a great backup! Local git repositories have the ability to restore files to a previous state (as you know), but all that information is stored locally. By having copies of your git repository on other computers, you can lose all your local data and still pick up where you left off.","","- More importantly, remotes make coding social! Now that a copy of your project is hosted elsewhere, your friends can contribute to your project (or pull in your latest changes) very easily.","","It's become very popular to use websites that visualize activity around remote repos (like [Github](https://github.com/) or [Phabricator](http://phabricator.org/)), but remote repositories _always_ serve as the underlying backbone for these tools. So it's important to understand them!"]}},{type:"ModalAlert",options:{markdowns:["## Our Command to create remotes","","Up until this point, Learn Git Branching has focused on teaching the basics of _local_ repository work (branching, merging, rebasing, etc). However now that we want to learn about remote repository work, we need a command to set up the environment for those lessons. `git clone` will be that command","","Technically, `git clone` in the real world is the command you'll use to create _local_ copies of remote repositories (from github for example). We use this command a bit differently in Learn Git Branching though -- `git clone` actually makes a remote repository out of your local one. Sure it's technically the opposite meaning of the real command, but it helps build the connection between cloning and remote repository work, so let's just run with it for now.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Lets start slow and just look at what a remote repository looks like (in our visualization).",""],afterMarkdowns:["There it is! Now we have a remote repository of our project. It looks pretty similar except for some visual changes to make the distinction apparent -- in later levels you'll get to see how we share work across these repositories."],command:"git clone",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["To finish this level, simply `git clone` your existing repository. The real learning will come in following lessons."]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Remotes","","Entfernte Repositorys sind nicht weiter kompliziert. In dieser Welt des Cloud Computings könnte man vielleicht glauben, dass hinter entfernten Git-Repositorys eine Menge Magie steckt, aber es sind einfach nur Kopien eines Repositorys auf einem anderen Rechner. Du kannst mit diesem Rechner typischerweise über das Internet kommunizieren, was es dir ermöglicht Commits hin und her zu schicken.","","Nichts desto weniger haben entfernte Repositorys eine Menge toller Eigenschaften:","","- Vor allem: sie sind ein super Backup! Lokale Git-Repositorys können deine Arbeitskopie ein jeden beliebigen früheren Zustand versetzen (wie du ja weißt), aber all diese Informationen liegen eben bei dir lokal. Wenn es Kopien von deinem Repository auf anderen Rechnern gibt, kannst du ruhig all deine Daten verlieren und trotzdem genau da weitermachen, wo du aufgehört hast.","","- Noch wichtiger: Remotes geben dem Entwickeln eine soziale Komponente! Wenn eine Kopie deines Projekts woanders liegt können deine Freunde sehr einfach etwas zu dem Projekt beitragen (oder sich deine neuesten Änderungen holen).","","Websites, die die Aktivitäten um diese entfernten Repositorys darstellen (wie [Github](https://github.com/) oder [Phabricator](http://phabricator.org/)) erfreuen sich zunehmender Beliebtheit, aber entfernte Repositorys sind _immer_ das Rückgrat für diese Werkzeuge. Deshalb ist es wichtig, sie zu verstehen."]}},{type:"ModalAlert",options:{markdowns:["## Der Befehl um ein Remote zu erstellen","","Bis jetzt hat sich Learn Git Branching darauf konzentriert, die Grundlagen der _lokalen_ Arbeit mit Repositorys zu vermitteln (Branche anlegen, zusammenführen, Rebasen etc). Jetzt wollen wir allerdings lernen mit entfernten Repositorys zu arbeiten und brauchen für die Level eine entsprechende Umgebung. Die schaffen wir mit `git clone`.","",'In der Realität ist `git clone` eigentlich der Befehl, mit dem du eine _lokale_ Kopie eines _entfernten_ Repositorys erstellst (das zum Beispiel auf Github liegt). Wir benutzen diesen Befehl in Learn Git Branching allerdings ein wenig anders -- hier macht `git clone` tatsächlich eine Kopie von deinem lokalen Repository auf einem "entfernten Server". Klar, das ist eigentlich genau das Gegenteil von dem was der echte Befehl macht, aber es hilft den Zusammenhang zwischen Cloning und der Arbeit mit entfernten Repositorys herzustellen, also machen wir\'s einfach so.',""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Fangen wir langsam an und schauen nur wie ein entferntes Repository in unserer Darstellung aussieht.",""],afterMarkdowns:["Da ist es! Jetzt haben wir ein entferntes Repository unseres Projektes. Es sieht so aus wie das lokale, nur mit ein paar Änderungen in der Darstellung -- in späteren Leveln wirst du sehen, wie man Änderungen zwischen den Repositorys austauschen kann."],command:"git clone",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Um diesen Level abzuschließen führ einfach `git clone` auf deinem bestehenden Repository aus. Alles weitere kommt in den nächsten Leveln."]}}]}}}},{}],82:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C5","id":"master","remoteTrackingBranchID":"o/master","localBranchesThatTrackThis":null},"o/master":{"target":"C3","id":"o/master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":["master"]}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C4":{"parents":["C1"],"id":"C4"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C5":{"parents":["C3","C4"],"id":"C5"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C3","id":"master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"}},"HEAD":{"target":"master","id":"HEAD"}}}',solutionCommand:"git clone;git fakeTeamwork 2;git commit ;git pull",startTree:'{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{en_US:"Faking Teamwork",de_DE:"Teamarbeit simulieren"},hint:{en_US:"remember you can specify the number of commits to fake",de_DE:"Nicht vergessen, du kannst angeben wieviele Commits simuliert werden sollen."},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Simulating collaboration","","So here is the tricky thing -- for some of these upcoming lessons, we need to teach you how to pull down changes that were introduced in the remote.","",'That means we need to essentially "pretend" that the remote was updated by one of your coworkers / friends / collaborators, sometimes on a specific branch or a certain number of commits.',"","In order to do this, we introduced the aptly-named command `git fakeTeamwork`! It's pretty self explanatory, let's see a demo..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["The default behavior of `fakeTeamwork` is to simply plop down a commit on master"],afterMarkdowns:["There we go -- the remote was updated with a new commit, and we haven't downloaded that commit yet because we haven't run `git fetch`."],command:"git fakeTeamwork",beforeCommand:"git clone"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["You can also specify the number of commits or the branch by appending them to the command"],afterMarkdowns:["With one command we simulated a teammate pushing three commits to the `foo` branch on our remote"],command:"git fakeTeamwork foo 3",beforeCommand:"git branch foo; git clone"}},{type:"ModalAlert",options:{markdowns:["The upcoming levels are going to be pretty difficult, so we're asking more of you for this level.","","Go ahead and make a remote (with `git clone`), fake some changes on that remote, commit yourself, and then pull down those changes. It's like a few lessons in one!"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Zusammenarbeit simulieren","","Hier ist das Problem -- für einige der folgenden Level müssen wir lernen, wie man Änderungen vom entfernten Server holt.","",'Das heißt wir müssen im Grunde "so tun" also ob der Server von einem Kollegen / Freund / Mitarbeiter aktualisiert worden wäre, manchmal ein bestimmter Branch oder eine bestimmte Anzahl von Commits.',"","Um das zu tun führen wir den passend benannten Befehl `git fakeTeamwork` ein! Er ist ziemlich selbsterklärend, schauen wir uns ihn an ..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Das normale Verhalten von `fakeTeamwork` ist es, einen Commit auf den entfernten `master` zu machen."],afterMarkdowns:["Da haben wir's -- der Server ist mit einem neuen Commit aktualisiert worden und wir haben ihn noch nicht lokal, weil wir nicht `git fetch` oder `git pull` ausgeführt haben."],command:"git fakeTeamwork",beforeCommand:"git clone"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Du kannst auch angeben wieviele Commits oder auf welchem Branch sie gemacht werden sollen, indem du das an den Befehl anhängst."],afterMarkdowns:["Mit einem Befehlt haben wir simuliert, dass ein Kollege drei Commits auf den  Branch `foo` gepackt hat."],command:"git fakeTeamwork foo 3",beforeCommand:"git branch foo; git clone"}},{type:"ModalAlert",options:{markdowns:["Die kommenden Level werden recht anspruchsvoll, daher verlangen wir auch in diesem Level schon etwas mehr.","","Leg los und erstelle ein Remote (mit `git clone`), simuliere ein paar Änderungen auf dem Server, committe lokal und dann zieh dir die Änderungen vom Server. Das ist wie mehrere Level in einem!"]}}]}}}},{}],83:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C2","id":"master"},"bugFix":{"target":"C3","id":"bugFix"},"o/master":{"target":"C5","id":"o/master"},"o/bugFix":{"target":"C7","id":"o/bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2"],"id":"C4"},"C6":{"parents":["C3"],"id":"C6"},"C5":{"parents":["C4"],"id":"C5"},"C7":{"parents":["C6"],"id":"C7"}},"HEAD":{"target":"bugFix","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C5","id":"master"},"bugFix":{"target":"C7","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2"],"id":"C4"},"C5":{"parents":["C4"],"id":"C5"},"C6":{"parents":["C3"],"id":"C6"},"C7":{"parents":["C6"],"id":"C7"}},"HEAD":{"target":"bugFix","id":"HEAD"}}}',solutionCommand:"git fetch",startTree:'{"branches":{"master":{"target":"C2","id":"master"},"bugFix":{"target":"C3","id":"bugFix"},"o/master":{"target":"C2","id":"o/master"},"o/bugFix":{"target":"C3","id":"o/bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"}},"HEAD":{"target":"bugFix","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C5","id":"master"},"bugFix":{"target":"C7","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2"],"id":"C4"},"C5":{"parents":["C4"],"id":"C5"},"C6":{"parents":["C3"],"id":"C6"},"C7":{"parents":["C6"],"id":"C7"}},"HEAD":{"target":"bugFix","id":"HEAD"}}}',name:{en_US:"Git Fetchin'",de_DE:"Git Fetch"},hint:{en_US:"just run git fetch!",de_DE:"Einfach git fetch ausführen!"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Fetch","","Working with git remotes really just boils down to transferring data _to_ and _from_ other repositories. As long as we can send commits back and forth, we can share any type of update that is tracked by git (and thus share work, new files, new ideas, love letters, etc etc).","","In this lesson we will learn how to fetch data _from_ a remote repository -- the command for this is conveniently named `git fetch`.","","You'll notice that as we update our representation of the remote repository, our _remote_ branches will update to reflect that new representation. This ties into the previous lesson on remote branches"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Before getting into the details of `git fetch`, let's see it in action! Here we have a remote repository that contains two commits that our local repository does not have."],afterMarkdowns:["There we go! Commits `C2` and `C3` were downloaded to our local repository, and our remote branch `o/master` was updated to reflect this."],command:"git fetch",beforeCommand:"git clone; git fakeTeamwork 2"}},{type:"ModalAlert",options:{markdowns:["### What fetch does","","`git fetch` performs two main steps, and two main steps only. It:","","* downloads the commits that the remote has but are missing from our local repository, and...","* updates where our remote branches point (for instance, `o/master`)","","`git fetch` essentially it brings our _local_ representation of the remote repository into synchronization with what the _actual_ remote repository looks like (right now).","","If you remember from the previous lesson, we said that remote branches reflect the state of the remote repositories _since_ you last talked to those remotes. `git fetch` is the way you talk to these remotes! Hopefully the connection between remote branches and `git fetch` is apparent now","","`git fetch` usually talks to the remote repository through the Internet (via a protocol like `http://` or `git://`).",""]}},{type:"ModalAlert",options:{markdowns:["### What fetch doesn't do","","`git fetch`, however, does not change anything about _your_ local state. It will not update your `master` branch or change anything about how your filesystem looks right now.","","This is important to understand because a lot of developers think that running `git fetch` will make their local work reflect the state of the remote. It may download all the necessary data to do that, but it does _not_ actually change any of your local files. We will learn commands in later lessons to do just that :D","","So at the end of the day, you can think of running `git fetch` as a download step."]}},{type:"ModalAlert",options:{markdowns:["To finish the level, simply `git fetch` and download all the commits!"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Fetch","","In Git mit entfernten Repositorys zu arbeiten lässt sich wirklich auf das Hin- und Zurückübertragen von Daten reduzieren. Solange wir Commits hin und her schicken können, können wir jede Art Update teilen, das von Git getrackt wird (und somit Arbeit, neue Dateien, neue Ideen, Liebesbriefe etc. teilen).","","In diesem Level werden wir lernen, wie man Daten _von_ einem entfernten Repository holt -- der entsprechende Befehl heißt praktischerweise `git fetch`.","","Dir wird auffallen, dass mit der Aktualisierung unserer Darstellung des entfernten Repositorys die _Remote_ Branches auf den neuesten Stand gebracht werden. Das passt zum vorherigen Level über Remote Branches."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Bevor wir uns die Einzelheiten von `git fetch` ansehen wollen wir es mal in Aktion sehen. Wir haben hier ein entferntes Repository, das zwei Commits hat die in unserem lokalen Repository fehlen."],afterMarkdowns:["Das war's! Die Commits `C2` und `C3` wurden zu unserem Repository heruntergeladen und unser Remote Branch `o/master` wurde aktualisiert."],command:"git fetch",beforeCommand:"git clone; git fakeTeamwork 2"}},{type:"ModalAlert",options:{markdowns:["### Was Fetch tut","","`git fetch` führt genau zwei Schritte aus:","","* Es lädt die Commits herunter, die im lokalen Repository fehlen, und ...","* aktualisiert die Remote Branches wo nötig (zum Beispiel, `o/master`).","","`git fetch` synchronisiert im Prinzip unsere _lokale_ Abbildung des entfernten Repositorys mit dem wie das entfernte Repository _tatsächlich_ aussieht (in diesem Moment).","","Wie du dich vielleicht erinnerst, haben wir im letzten Level gesagt, dass die Remote Branches den Zustand der Branches auf dem entfernten Repository darstellen _seit_ du das letzte Mal dieses Repository angesprochen hast. `git fetch` ist die Methode mit der du das Repository ansprichst! Der Zusammenhang zwischen Remote Branches und `git fetch` ist damit hoffentlich klar.","","`git fetch` kommuniziert mit dem entfernten Repository in der Regel über das Internet (über ein Protokoll wie `http://` oder `git://`).",""]}},{type:"ModalAlert",options:{markdowns:["### Was Fetch nicht tut","","`git fetch` ändert allerdings überhaupt nichts an _deinen_ lokalen Branches. Es aktualisiert nicht deinen `master` oder ändert irgendetwas an deinem Checkout.","","Das ist wichtig zu wissen, denn eine Menge Entwickler glauben, wenn sie `git fetch` ausführen würden ihre lokalen Branches auf den Stand des entfernten Repositorys gebracht. Es lädt zwar alle Daten herunter, damit man diese Aktualisierung durchführen kann, aber es ändert _nichts_ an deinen lokalen Branches. Wir werden in späteren Level Befehle genau dafür kennenlernen. :D","","Am Ende des Tages kannst du dir `git fetch` also als den Donwload-Schritt vorstellen."]}},{type:"ModalAlert",options:{markdowns:["Um diesen Level zu schaffen musst du einfach nur `git fetch` ausführen, um alle Commits herunterzuladen!"]}}]}}}},{}],84:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C6","id":"master","remoteTrackingBranchID":"o/master"},"foo":{"target":"C7","id":"foo","remoteTrackingBranchID":"o/foo"},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null},"o/foo":{"target":"C1","id":"o/foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C5":{"parents":["C1"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"},"C7":{"parents":["C3","C6"],"id":"C7"}},"HEAD":{"target":"foo","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C4","id":"master","remoteTrackingBranchID":null},"foo":{"target":"C6","id":"foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C1"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"}},"HEAD":{"target":"foo","id":"HEAD"}}}',solutionCommand:"git fetch origin master~1:foo;git fetch origin foo:master;git checkout foo;git merge master",startTree:'{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":"o/master"},"foo":{"target":"C1","id":"foo","remoteTrackingBranchID":"o/foo"},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null},"o/foo":{"target":"C1","id":"o/foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"C1","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C4","id":"master","remoteTrackingBranchID":null},"foo":{"target":"C6","id":"foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C1"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"}},"HEAD":{"target":"foo","id":"HEAD"}}}',name:{en_US:"Fetch arguments",de_DE:"Optionen für Fetch"},hint:{en_US:'Pay attention how the commit ids may have swapped! You can read slides again with "help level"',de_DE:'Beachte wie die Commit IDs getauscht wurden! Du kannst den Einführungsdialog mit "help level" erneut anzeigen'},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git fetch arguments","","So we've just learned all about git push arguments, this cool `<place>` parameter, and even colon refspecs (`<source>:<destination>`). Can we use all this knowledge for `git fetch` as well?","","You betcha! The arguments for `git fetch` are actually *very, very* similar to those for `git push`. It's the same type of concepts but just applied in the opposite direction (since now you are downloading commits rather than uploading).","","Let's go over the concepts one at a time..."]}},{type:"ModalAlert",options:{markdowns:["### The `<place>` parameter","","If you specify a place with git fetch like in the following command:","","`git fetch origin foo`","","Git will go to the `foo` branch on the remote, grab all the commits that aren't present locally, and then plop them down onto the `o/foo` branch locally.","","Let's see this in action (just as a refresher)"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["By specifying a place..."],afterMarkdowns:["We download only the commits from `foo` and place them on `o/foo`"],command:"git fetch origin foo",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"ModalAlert",options:{markdowns:["You might be wondering -- why did git plop those commits onto the `o/foo` remote branch rather than just plopping them onto my local `foo` branch? I thought the `<place>` parameter is a place that exists both locally and on the remote?","","Well git makes a special exception in this case because you might have work on the `foo` branch that you don't want to mess up!! This ties into the earlier lesson on `git fetch` -- it doesn't update your local non-remote branches, it only downloads the commits (so you can inspect / merge them later).",""]}},{type:"ModalAlert",options:{markdowns:['"Well in that case, what happens if I explicitly define both the source and destination with `<source>:<destination>`?"',"","If you feel passionate enough to fetch commits *directly* onto a local branch, then yes you can specify that with a colon refspec. You can't fetch commits onto a branch that is checked out, but otherwise git will allow this.","","Here is the only catch though -- `<source>` is now a place on the *remote* and `<destination>` is a *local* place to put those commits. It's the exact opposite of git push, and that makes sense since we are transferring data in the opposite direction!","","That being said, developers rarely do this in practice. I'm introducing it mainly as a way to conceptualize how `fetch` and `push` are quite similar, just in opposite directions"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's see this craziness in action:"],afterMarkdowns:["Wow! See, git resolved `foo~1` as a place on the origin and then downloaded those commits to `bar` (which was a local branch). Notice how `foo` and `o/foo` were not updated since we specified a destination"],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git branch bar; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["What if the destination doesnt exist before I run the command? Lets see the last slide but without `bar` existing beforehand"],afterMarkdowns:["See, it's JUST like git push. Git made the destination locally before fetching, just like git will make the destination on remote before pushing (if it doesn't exist)"],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["No args?","","If `git fetch` receives no arguments, it just downloads all the commits from the remote onto all the remote branches..."],afterMarkdowns:["Pretty simple, but worth going over just once"],command:"git fetch",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo; git fakeTeamwork master"}},{type:"ModalAlert",options:{markdowns:["Ok, enough talking! To finish this level, fetch just the specified commits in the goal visualization. Get fancy with those commands!","","You will have to specify the source and destination for both fetch commands. Pay attention to the goal visualization since the IDs may be switched around!"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Fetch Optionen","","Nun haben wir also alles über `git push` Optionen gelernt, diesen coolen `<Ort>`-Parameter, and sogar über mit Doppelpunkt getrennte Ref-Spezifikationen (`<Quelle>:<Ziel>`). Können wir all dieses neu erworbene Wissen auch auf `git fetch` anwenden?","","Jede Wette! Die Optionen für `git fetch` sind wirklicht *sehr, sehr* ähnlich denen von `git push`. Es sind dieselben Verfahren, nur in die andere Richtung angewendet (da man bei `fetch` herunterlädt anstatt hochzuladen).","","Gehen wir die verschiedenen Verfahrensweise mal eine nach der anderen durch ..."]}},{type:"ModalAlert",options:{markdowns:["### Der Parameter `<Ort>`","",'Wenn du, wie folgt, einen "Ort" bei `git fetch` angibst:',"","`git fetch origin foo`","","wird Git zum Branch `foo` auf dem Remote gehen, dort alle Änderungen holen, die es lokal noch nicht gibt, und sie an den lokalen Branch `o/foo` anhängen.","","Schauen wir uns das mal live an (nur zur Wiederholung)"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Durch Angabe eines Ortes ..."],afterMarkdowns:["... laden wir die fehlenden Commits von `foo` und packen sie auf `o/foo` drauf."],command:"git fetch origin foo",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"ModalAlert",options:{markdowns:["Du wunderst dich vielleicht warum Git diese Commits auf den `o/foo` Branch gepacht hat, anstatt einfach direkt auf den lokalen Branch `foo`? Zeigt der Parameter `<Ort>` nicht einen Ort an, der sowohl lokal als auch entfernt existiert?","","Nun ja, Git geht diesen Schritt weil du auf `foo` ja noch Commits haben könntest, die nicht auf dem Server sind, und da will es nichts durcheinander bringen. Ähnlich wie beim früheren Level zu `git fetch` -- es aktualisiert nicht deine lokalen Arbeits-Branches, es lädt die Commits nur in die `o` (bzw. `origin`) Branches, damit du sie dir in Ruhe anschauen und integrieren kannst.",""]}},{type:"ModalAlert",options:{markdowns:["Wenn das so ist, was passiert dann wenn ich explizit Quelle und Ziel im Ort angebe?","","Wenn du Commits wirklich per `fetch` *direkt* auf einen lokalen Branch holen willst, dann, ja, kannst du das mit einer Ref-Spezifikation erreichen. Das funktioniert nicht mit deinem gerade ausgecheckten Branch, aber davon abgesehen lässt Git es zu.","","Nur ein Haken -- `<Quelle>` bezeichnet jetzt einen Ort auf dem *entfernten* Server und `<Ziel>` ist ein *lokaler* Ort, wo die Commits hin sollen. Es ist genau umgekehrt wie bei `git push` und das ist logisch, denn wir übertragen die Daten ja auch in die umgekehrte Richtung!","","Davon abgesehen benutzt man das in der Praxis kaum. Ich zeige das vor allem um zu verdeutlichen, wie `fetch` und `push` sehr ähnlich sind, nur in entgegengesetzten Richtungen."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Schauen wir uns den Quatsch mal in Aktion an:"],afterMarkdowns:["Wow! Siehst du, git löst `foo~1` als Ort auf dem Server `origin` auf und lädt dessen Commits herunter in `bar` hinein. Beachte wie `foo` und `o/foo` *nicht* aktualisiert wurden, da wir ein Ziel angegeben haben."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git branch bar; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Was ist denn wenn das Ziel nicht existiert, für das ich den Befehl ausführe? Schauen wir uns das letzte Beispiel noch mal an, nur dass `bar` jetzt noch nicht existiert."],afterMarkdowns:["Siehst du, es ist *genau* wie `git push`. Git erstellt das Ziel lokal bevor es den `fetch` ausführt, genauso wie Git erst das Ziel auf dem Remote erstellt, befor es pusht (falls das Ziel nicht existiert)."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Keine Optionen?","","Wenn bei `git fetch` keine Optionen angegeben werden, lädt es einfach alle Commits vom Remote auf die lokalen Abbildungen aller Remote Branches ..."],afterMarkdowns:["Ziemlich einfach, aber man sollte es mal gesehen haben."],command:"git fetch",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo; git fakeTeamwork master"}},{type:"ModalAlert",options:{markdowns:["Ok, genug gelabert! Um den Level zu schaffen musst du nur die im Zielbild angegebenen Commits per `fetch` holen. Sei kreativ mit den Befehlen!","","Du wirst Quelle und Ziel bei beiden `fetch` Befehlen angeben müssen. Schau dir das Zielbild gut an, da die IDs vertauscht sein könnten!"]}}]}}}
},{}],85:[function(a,b,c){c.level={goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C3%27%22%2C%22id%22%3A%22master%22%2C%22remoteTrackingBranchID%22%3A%22o/master%22%2C%22localBranchesThatTrackThis%22%3Anull%7D%2C%22o/master%22%3A%7B%22target%22%3A%22C3%27%22%2C%22id%22%3A%22o/master%22%2C%22remoteTrackingBranchID%22%3Anull%2C%22localBranchesThatTrackThis%22%3A%5B%22master%22%5D%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%2C%22originTree%22%3A%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C3%27%22%2C%22id%22%3A%22master%22%2C%22remoteTrackingBranchID%22%3Anull%2C%22localBranchesThatTrackThis%22%3Anull%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D%7D",solutionCommand:"git clone;git fakeTeamwork;git commit;git pull --rebase;git push",startTree:'{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{en_US:"Diverged History",de_DE:"Abweichende History"},hint:{en_US:"check out the ordering from the goal visualization",de_DE:"Beachte die Reihenfolge in der Zieldarstellung"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Diverged Work","","So far we've seen how to `pull` down commits from others and how to `push` up our own changes. It seems pretty simple, so how can people get so confused?","","The difficulty comes in when the history of the repository *diverges*. Before discussing the details of this, let's see an example...",""]}},{type:"ModalAlert",options:{markdowns:["Imagine you clone a repository on Monday and start dabbling on a side feature. By Friday you are ready to publish your feature -- but oh no! Your coworkers have written a bunch of code during the week that's made your feature out of date (and obsolete). They've also published these commits to the shared remote repository, so now *your* work is based on an *old* version of the project that's no longer relevant.","","In this case, the command `git push` is ambiguous. If you run `git push`, should git change the remote repository back to what it was on Monday? Should it try to add your code in while not removing the new code? Or should it totally ignore your changes since they are totally out of date?","","Because there is so much ambiguity in this situation (where history has diverged), git doesn't allow you to `push` your changes. It actually forces you to incorporate the latest state of the remote before being able to share your work."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["So much talking! Let's see this situation in action"],afterMarkdowns:["See? Nothing happened because the command fails. `git push` fails because your most recent commit `C3` is based off of the remote at `C1`. The remote has since been updated to `C2` though, so git rejects your push"],command:"git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["How do you resolve this situation? It's easy, all you need to do is base your work off of the most recent version of the remote branch.","","There are a few ways to do this, but the most straightforward is to move your work via rebasing. Let's go ahead and see what that looks like"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Now if we rebase before pushing instead..."],afterMarkdowns:["Boom! We updated our local representation of the remote with `git fetch`, rebased our work to reflect the new changes in the remote, and then pushed them with `git push`"],command:"git fetch; git rebase o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Are there other ways to update my work when the remote repository has been updated? Of course! Let's check out the same thing but with `merge` instead.","","Although `git merge` doesn't move your work (and instead just creates a merge commit), it's a way to tell git that you have incorporated all the changes from the remote. This is because the remote branch is now an *ancestor* of your own branch, meaning your commit reflects all commits in the remote branch.","","Lets see this demonstrated..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Now if we merge instead of rebasing..."],afterMarkdowns:["Boom! We updated our local representation of the remote with `git fetch`, *merged* the new work into our work (to reflect the new changes in the remote), and then pushed them with `git push`"],command:"git fetch; git merge o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Awesome! Is there any way I can do this without typing so many commands?","","Of course -- you already know `git pull` is just shorthand for a fetch and a merge. Conveniently enough, `git pull --rebase` is shorthand for a fetch and a rebase!","","Let's see these shorthand commands at work"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["First with `--rebase`..."],afterMarkdowns:["Same as before! Just a lot shorter"],command:"git pull --rebase; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["And now with regular `pull`"],afterMarkdowns:["Again, exact same as before!"],command:"git pull; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["This workflow of fetching, rebase/merging, and pushing is quite common. In future lessons we will examine more complicated versions of these workflows, but for now let's try this out.","","In order to solve this level, take the following steps:","","* Clone your repo","* Fake some teamwork (1 commit)","* Commit some work yourself (1 commit)","* Publish your work via *rebasing*"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Abweichende Inhalte","","Bisher haben wir gesehen wie man per `pull` Commits von Anderen ins lokale Repository holt und die eigenen Änderungen in ein entferntes `push`t. Ist doch ziemlich einfach, wie kann man da durcheinander kommen?","","Die Schwierigkeiten entstehen, wenn die Historys der beiden Repositorys *divergieren*, also voneinander abweichen. Bevor wir die Einzelheiten besprechen, schauen wir uns ein Beispiel an ...",""]}},{type:"ModalAlert",options:{markdowns:["Stell dir vor du holst dir Montags ein Repository per `clone` und fängst an, an einem Feature zu arbeiten. Bis Freitag soll es fertig und veröffentlicht sein -- doch, oh je! Deine Kollegen haben eine Menge Code während der Woche geschrieben, der dein Feature hat veralten lassen (und überflüssig gemacht hat). Sie haben diesen Code außerdem zum entfernten Repository gepusht, und dadurch basiert *deine* harte Arbeit jetzt auf einer *alten* Version des Projektes, die nicht länger relevant ist.","","In diesem Fall ist ein `git push` problematisch. Wenn du es ausführst, soll Git das entfernte Repository in den Zustand von Montag zurückversetzen? Soll es versuchen deinen Code auf die aktuelle Version zu packen? Oder soll es deine Änderungen einfach ignorieren, weil sie total veraltet sind?","","Da es in dieser Situation so viele Mehrdeutigkeiten gibt (da die Historys divergent sind) erlaubt Git dir nicht, deine Änderungen einfach zu `push`en. Es zwingt dich, zuerst die neuesten Änderungen vom Server zu holen und in deine zu integrieren bevor du deine Arbeit mit anderen teilen kannst."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Bla bla bla. Schauen wir uns das lieber in Aktion an:"],afterMarkdowns:["Siehst du? Nichts passiert, weil der Befehl fehlschlägt. `git push` schlägt fehl, weil der neueste Commit `C3` auf dem Commit `C1` des Remotes basiert. Der entfernte Server hat mittlerweile jedoch `C2` gepusht bekommen, also lässt Git deinen Push jetzt nicht mehr zu."],command:"git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Wie sollen wir das auflösen? Es ist ganz einfach, du musst deinen Commit nur von der aktuellsten Version des Remotes ableiten.","","Es gibt verschiedene Möglichkeiten wie man das erreichen kann, aber die offensichtlichste ist es, deine Commits per Rebase zu verschieben. Schauen wir mal wie das abläuft:"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Also wenn wir vor dem Push erst mal einen Rebase mache ..."],afterMarkdowns:["Bämm! Wir haben unsere lokale Abbildung des entfernten Repositorys mit `git fetch` auf den neuesten Stand gebracht, unsere Arbeit auf die neueste Version des Remotes drauf gepackt und dann mit `git push` auf den Server geschoben."],command:"git fetch; git rebase o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Gibt es noch weitere Möglichkeiten deine Arbeit zu aktualisieren wenn das entfernte Repository neue Commits bekommen hat? Klar! Schauen wir uns dasselbe an, aber diesmal arbeiten wir mit `merge`.","","Obwohl `git merge` deine Arbeit nicht verschiebt (und stattdessen einen Merge Commit erzeugt) ist es eine Möglichkeit Git dazu zu bringen, alle Änderungen vom Remote in deine Sachen zu integrieren. Denn durch den Merge wird der Remote Branch zu einem *Vorgänger* deines Branches, was bedeutet dass dein Commit alle Commits des entfernten Branches beinhaltet.","","Zur Demonstration ..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Wenn wir nun also mergen anstatt einen Rebase zu machen ..."],afterMarkdowns:["Ok. Wir haben die lokale Abbildung des entfernen Repositorys mit `git fetch` aktualisiert, die neuen Änderungen per *Merge* in deine integriert, und letztere dann mit `git push` auf den Server gebracht."],command:"git fetch; git merge o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Wahnsinn! Kann ich das auch irgendwie machen ohne soviel zu tippen?","","Na klar -- du kennst ja schon `git pull` als Zusammenfassung von `fetch` und `merge`. Praktischerweise bringt man es mit der Option `--rebase` dazu, anstatt des Merge einen Rebase zu machen.","","Gucken wir uns das mal an."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Zunächst `git pull --rebase` ..."],afterMarkdowns:["Genau wie vorher! Nur viel kürzer."],command:"git pull --rebase; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Und nun das normale `git pull` ..."],afterMarkdowns:["Und wieder, genau wie zuvor!"],command:"git pull; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Dieser Ablauf von `fetch`, `rebase` / `merge` und `push` ist sehr verbreitet. In zukünftigen Leveln werden wir uns kompliziertere Varianten dieses Workflows ansehen, aber jetzt probieren wir erst mal diesen aus.","","Um diesen Level zu lösen, gehe folgende Schritte durch:","","* Clone dein Repository","* Simuliere einen entfernten Commit mit `git fakeTeamwork`","* Erzeuge einen lokalen Commit","* Benutze *Rebase*, um deine Arbeit schließlich pushen zu können"]}}]}}}},{}],86:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C11","id":"master","remoteTrackingBranchID":"o/master","localBranchesThatTrackThis":null},"o/master":{"target":"C11","id":"o/master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":["master"]},"side1":{"target":"C2","id":"side1","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null},"side2":{"target":"C4","id":"side2","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null},"side3":{"target":"C7","id":"side3","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C1"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"},"C7":{"parents":["C6"],"id":"C7"},"C8":{"parents":["C1"],"id":"C8"},"C9":{"parents":["C2","C8"],"id":"C9"},"C10":{"parents":["C4","C9"],"id":"C10"},"C11":{"parents":["C10","C7"],"id":"C11"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C11","id":"master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C8":{"parents":["C1"],"id":"C8"},"C5":{"parents":["C1"],"id":"C5"},"C3":{"parents":["C1"],"id":"C3"},"C2":{"parents":["C1"],"id":"C2"},"C6":{"parents":["C5"],"id":"C6"},"C4":{"parents":["C3"],"id":"C4"},"C9":{"parents":["C2","C8"],"id":"C9"},"C7":{"parents":["C6"],"id":"C7"},"C10":{"parents":["C4","C9"],"id":"C10"},"C11":{"parents":["C10","C7"],"id":"C11"}},"HEAD":{"target":"master","id":"HEAD"}}}',solutionCommand:"git checkout master;git pull;git merge side1;git merge side2;git merge side3;git push",startTree:'{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":"o/master","localBranchesThatTrackThis":null},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":["master"]},"side1":{"target":"C2","id":"side1","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null},"side2":{"target":"C4","id":"side2","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null},"side3":{"target":"C7","id":"side3","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C1"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"},"C7":{"parents":["C6"],"id":"C7"}},"HEAD":{"target":"side3","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C8","id":"master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C8":{"parents":["C1"],"id":"C8"}},"HEAD":{"target":"master","id":"HEAD"}}}',name:{en_US:"Merging with remotes",de_DE:"Änderungen vom Remote zusammenführen"},hint:{en_US:"Pay attention to the goal tree!",de_DE:"Beachte den Ziel-Baum!"},compareOnlyMaster:!0,startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Why not merge?","","In order to push new updates to the remote, all you need to do is *incorporate* the latest changes from the remote. That means you can either rebase *or* merge in the remote branch (e.g. `o/master`).","","So if you can do either method, why have the lessons focused on rebasing so far? Why is there no love for `merge` when working with remotes?",""]}},{type:"ModalAlert",options:{markdowns:["Theres a lot of debate about the tradeoffs between merging and rebasing in the development community. Here are the general pros / cons of rebasing:","","Pros:","","* Rebasing makes your commit tree look very clean since everything is in a straight line","","Cons:","","* Rebasing modifies the (apparent) history of the commit tree.","","For example, commit `C1` can be rebased *past* `C3`. It then appears that the work for `C1'` came after `C3` when in reality it was completed beforehand.","","Some developers love to preserve history and thus prefer merging. Others (like myself) prefer having a clean commit tree and prefer rebasing. It all comes down to preferences :D"]}},{type:"ModalAlert",options:{markdowns:["For this level, let's try to solve the previous level but with *merging* instead. It may get a bit hairy but it illustrates the point well"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Warum nicht Merge?","","Um neue Dinge auf das Remote zu schieben musst du erst alle Änderungen vom Remote holen und bei dir integrieren. Das bedeutet du kannst den entfernten Branch (z.B. `o/master`) entweder Rebasen *oder* Mergen.","","Wenn du also beide Methoden benutzen kannst, warum haben sich die Level bisher auf Rebase konzentriert? Warum mag keiner `merge` wenn es um Remotes geht?",""]}},{type:"ModalAlert",options:{markdowns:["Es gibt eine Menge Diskussionen unter Entwicklern über die Vor- und Nachteile beim Mergen und Rebasen. Hier ein paar Vor- und Nachteile zum Rebasen:","","Vorteile:","","* Rebasen macht den Commit-Baum sehr übersichtlich, weil alles linear aufeinander aufbaut","","Nachteile:","","* Rebasen verändert die History eines Branches.","","Zum Beispiel kann durch Rebasen Commit `C1` an Commit `C3` *vorbei* bewegt werden, bzw. eine Kopie von `C1`. Es sieht dann so aus als wären die Änderungen in `C1` nach denen in `C3` gemacht worden, obwohl das nicht stimmt.","","Manche Entwickler möchten lieber die History lassen wie sie ist und ziehen daher das Mergen vor. Andere (wie ich) haben lieber einen sauberen Commit-Baum und ziehen Rebase vor. Am Ende ist es eine Geschmacksfrage. :D"]}},{type:"ModalAlert",options:{markdowns:["In diesem Level wollen wir versuchen die Aufgabe vom letzten Level erneut zu lösen, aber diesmal mit einem *Merge*. Das wird vielleicht etwas haariger, stellt aber gut die Implikationen dar."]}}]}}}},{}],87:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C4","id":"master","remoteTrackingBranchID":"o/master","localBranchesThatTrackThis":null},"o/master":{"target":"C3","id":"o/master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":["master"]}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2","C3"],"id":"C4"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C3","id":"master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C3":{"parents":["C1"],"id":"C3"}},"HEAD":{"target":"master","id":"HEAD"}}}',solutionCommand:"git pull",startTree:'{"branches":{"master":{"target":"C2","id":"master","remoteTrackingBranchID":"o/master","localBranchesThatTrackThis":null},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":["master"]}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C3","id":"master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C3":{"parents":["C1"],"id":"C3"}},"HEAD":{"target":"master","id":"HEAD"}}}',name:{en_US:"Git Pullin'",de_DE:"Git Pull"},hint:{en_US:"Just run git pull!",de_DE:"Führe einfach git pull aus."},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Pull","","Now that we've seen how to fetch data from a remote repository with `git fetch`, lets update our work to reflect those changes!","","There are actually many ways to do this -- once you have new commits available locally, you can incorporate them as if they were just normal commits on other branches. This means you could execute commands like:","","* `git cherry-pick o/master`","* `git rebase o/master`","* `git merge o/master`","* etc, etc","","In fact, the workflow of *fetching* remote changes and then *merging* them is so common that git actually make a command that does both at once! That command is `git pull`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's first see a `fetch` and a `merge` executed sequentially"],afterMarkdowns:["Boom -- we downloaded `C3` with a `fetch` and then merged in that work with `git merge o/master`. Now our `master` branch reflects the new work from the remote (in this case, named `origin`)"],command:"git fetch; git merge o/master",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["What would happen if we used `git pull` instead?"],afterMarkdowns:["The same thing! That should make it very clear that `git pull` is essentially shorthand for a `git fetch` followed by a merge of whatever branch was just fetched."],command:"git pull",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["We will explore the details of `git pull` later (including options and arguments), but for now let's try it out in the level.","","Remember -- you can actually solve this level with just `fetch` and `merge`, but it will cost you an extra command :P"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Pull","","Jetzt, wo wir wissen wie wir mit `git fetch` Daten von einem entfernten Repository holen können, wollen wir unsere lokalen Daten aktualisieren, damit sie die Änderungen vom Server beinhalten.","","Tatsächlich gibt es eine Menge Wege dies zu erreichen -- sobald du die neuen Commits lokal verfügbar hast, kannst du sie integrieren so als wären es Commits von ganz normalen anderen Branches. Du kannst also:","","* `git cherry-pick o/master`","* `git rebase o/master`","* `git merge o/master`","* usw. usf. ausfúhren.","","Der Ablauf, die Änderungen vom Server zu holen und dann in die eigene Arbeit zu mergen wird so häufig benötigt, dass Git einen Befehl kennt der beides auf einmal erledigt! Das ist `git pull`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Schauen wir uns erst mal ein `fetch` gefolgt von `merge` an:"],afterMarkdowns:["Bämm -- wir haben `C3` mit `fetch` heruntergeladen und dann in unseren Branch mit `git merge o/master` integriert. Nun bildet unser `master` dieselben Inhalte ab, wie sie auf dem entfernten Server (`origin`) liegen."],command:"git fetch; git merge o/master",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Was passiert wohl, wenn wir stattdessen `git pull` benutzen?"],afterMarkdowns:["Dasselbe in Pink. Das sollte recht deutlich machen, dass `git pull` nur eine Abkürzung für `git fetch` gefolgt von einem Merge des gerade aktualisierten Branches ist."],command:"git pull",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["Die Feinheiten von `git pull` werden wir uns später ansehen, für's Erste lass es uns in diesem Level ausprobieren.","","Vergiss nicht -- du kannst diesen Level auch mit `fetch` und `merge` lösen, aber das kostet dich einen Befehl extra. :P"]}}]}}}},{}],88:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C6","id":"master","remoteTrackingBranchID":"o/master"},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null},"o/bar":{"target":"C1","id":"o/bar","remoteTrackingBranchID":null},"foo":{"target":"C3","id":"foo","remoteTrackingBranchID":null},"side":{"target":"C2","id":"side","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C4":{"parents":["C1"],"id":"C4"},"C3":{"parents":["C1"],"id":"C3"},"C5":{"parents":["C3","C4"],"id":"C5"},"C2":{"parents":["C1"],"id":"C2"},"C6":{"parents":["C2","C5"],"id":"C6"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C2","id":"master","remoteTrackingBranchID":null},"bar":{"target":"C3","id":"bar","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"}},"HEAD":{"target":"bar","id":"HEAD"}}}',solutionCommand:"git pull origin bar:foo;git pull origin master:side",startTree:'{"branches":{"master":{"target":"C4","id":"master","remoteTrackingBranchID":"o/master"},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null},"o/bar":{"target":"C1","id":"o/bar","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C4":{"parents":["C1"],"id":"C4"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C2","id":"master","remoteTrackingBranchID":null},"bar":{"target":"C3","id":"bar","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"}},"HEAD":{"target":"bar","id":"HEAD"}}}',name:{en_US:"Pull arguments",de_DE:"Optionen für Pull"},hint:{en_US:"Remember that you can create new local branches with fetch/pull arguments",de_DE:"Du kannst neue lokale Branches mittels fetch / pull erstellen"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git pull arguments","","Now that you know pretty much *everything* there is to know about arguments for `git fetch` and `git push`, there's almost really nothing left to cover for git pull :)","","That's because git pull at the end of the day is *really* just shorthand for a fetch followed by merging in whatever was just fetched. You can think of it as running git fetch with SAME arguments specified and then merging in *where* those commits ended up.","","This applies even when you use crazy-complicated arguments as well. Let's see some examples:"]}},{type:"ModalAlert",options:{markdowns:["Here are some equivalent commands in git:","","`git pull  origin foo` is equal to:","","`git fetch origin foo; git merge o/foo`","","And...","","`git pull  origin bar~1:bugFix` is equal to:","","`git fetch origin bar~1:bugFix; git merge bugFix`","","See? git pull is really just shorthand for fetch + merge, and all git pull cares about is where the commits ended up (the `destination` argument that it figures out during fetch)","","Lets see a demo:"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["If we specify the place to fetch, everything happens as before with fetch but we merge in whatever was just fetched"],afterMarkdowns:["See! by specifying `master` we downloaded commits onto `o/master` just as normal. Then we merged `o/master` to where we are, *regardless* of what was currently checked out."],command:"git pull origin master",beforeCommand:"git clone; go -b bar; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Does it work with source and destination too? You bet! Let's see that:"],afterMarkdowns:["Wow, that's a TON in one command. We created a new branch locally named `foo`, downloaded commits from remote's master onto that branch `foo`, and then merged that branch into our currently checked out branch `bar`. It's over 9000!!!"],command:"git pull origin master:foo",beforeCommand:"git clone; git fakeTeamwork; go -b bar; git commit"}},{type:"ModalAlert",options:{markdowns:["Ok to finish up, attain the state of the goal visualization. You'll need to download some commits, make some new branches, and merge those branches into other branches, but it shouldn't take many commands :P"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Optionen für Git Pull","","Da du jetzt so ziemlich *alles* kennst, was es an Optionen für `git fetch` und `git push` gibt, ist kaum noch etwas zu Optionen für `git pull` zu sagen. :)","","Das liegt daran, dass `git pull` letztendlich *wirklich* nur eine Abkürzuung für `fetch` gefolgt von einem `merge` von was auch immer gerade heruntergeladen wurde, ist. Denk es dir als ein `git fetch` mit denselben Optionen und einem anschließenden Merge.","","Das trifft sogar zu, wenn du völlig abgedrehte Optionen verwendest. Ein paar Beispiele:"]}},{type:"ModalAlert",options:{markdowns:["Hier sind einige gleichwertige Befehle in Git:","","`git pull origin foo` ist dasselbe wie:","","`git fetch origin foo; git merge o/foo`","","Und ...","","`git pull origin bar~1:bugFix` ist dasselbe wie:","","`git fetch origin bar~1:bugFix; git merge bugFix`","",'Siehst du? `git pull` ist wirklich nur eine Abkürzung von `fetch` + `merge` und es interessiert sich nur dafür wo die Commits hin sollen (die "Ziel"-Option, die es beim `fetch` auswertet).',"","Schauen wir uns eine Demonstration an:"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Wenn wir den Ort, auf den das `fetch` ausgeführt werden soll, angeben, passiert alles so wie beim `git fetch` aber es wird direkt danach auch ein Merge ausgeführt."],afterMarkdowns:["Siehst du? Da wir `master` angegeben haben sind die Commits in `o/master` heruntergeladen worden. Danach wurde `o/master` gemerged, egal was gerade ausgecheckt war."],command:"git pull origin master",beforeCommand:"git clone; go -b bar; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Funktioniert das auch wenn man Quelle und Ziel angibt? Aber sicher! Das sehen wir hier:"],afterMarkdowns:["Wow, das ist eine Menge in einem einzelnen Befehl. Wir haben lokal einen neuen Branch namens `foo` erstellt, die Commits vom `master` des Servers dorthin heruntergeladen und ihn danach in unseren aktuell ausgecheckten Commit `bar` gemerged."],command:"git pull origin master:foo",beforeCommand:"git clone; git fakeTeamwork; go -b bar; git commit"}},{type:"ModalAlert",options:{markdowns:["Ok, um's zu Ende zu bringen versuch das Ziel aus der Zielgrafik zu erreichen. Du wirst einige Commits herunterladen, einige neue Branches anlegen und diese in andere mergen müssen, aber das sollte nicht allzuviele Befehle benötigen. :P"]}}]}}}},{}],89:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C3","id":"master","remoteTrackingBranchID":"o/master","localBranchesThatTrackThis":null},"o/master":{"target":"C3","id":"o/master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":["master"]}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C3","id":"master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"}},"HEAD":{"target":"master","id":"HEAD"}}}',solutionCommand:"git clone;git commit;git commit;git push",startTree:'{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{en_US:"Git Pushin'",de_DE:"Git Push"},hint:{en_US:"Remember you have to clone before you can push!",de_DE:"Denk dran, dass du einen Clone brauchst bevor du Pushen kannst!"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Push","","Ok, so I've fetched changes from remote and incorporated them into my work locally. That's great and all... but how do I share _my_ awesome work with everyone else?","","Well, the way to upload shared work is the opposite of downloading shared work. And what's the opposite of `git pull`? `git push`!","","`git push` is responsible for uploading _your_ changes to a specified remote and updating that remote to incorporate your new commits. Once `git push` completes, all your friends can then download  your work from the remote.","",'You can think of `git push` as a command to "publish" your work. It has a bunch of subtleties that we will get into shortly, but let\'s start with baby steps']}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Here we have some changes that the remote does not have. Let's upload them!"],afterMarkdowns:["There we go -- the remote received commit `C2`, the branch `master` on the remote was updated to point at `C2`, and our *own* reflection of the remote (`o/master`) was updated as well. Everything is in sync!"],command:"git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["To finish this level, simply share two new commits with the remote. Strap in though, because these lessons are about to get a lot harder!"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Push","","Nun hab ich also Änderungen vom entfernten Server geholt und in meine lokale Arbeit integriert. Das ist schön und gut ... aber wie teile ich _meine_ Wahnsinns-Entwicklungen mit allen anderen?","","Naja, das Hochladen von Zeug ist das Gegenteil zum Herunterladen von Zeug. Und was ist das Gegenteil von `git pull`? Genau, `git push`!","","`git push` ist dafür verantwortlich _deine_ Änderungen zu einem bestimmten entfernten Server hochzuladen und dort zu integrieren. Sobald das `git push` durch ist, können alle deine Freunde diese Änderungen zu sich herunterladen.","",'Du kannst dir `git push` als einen Befehl zum "Veröffentlichen" deiner Arbeit vorstellen. Es gibt da noch ein paar Feinheiten, aber lass uns mal mit kleinen Schritten anfangen.']}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Hier haben wir ein paar Änderungen, die auf dem Remote noch fehlen. Und hoch damit!"],afterMarkdowns:["Na bitte -- das Remote hat den Commit `C2` bekommen, der `master` auf dem Remote ist entsprechend aktualisiert worden und unsere *eigene* Abbildung des `master` auf dem Remote namens `o/master` wurde auch aktualisiert. Alles im Lot!"],command:"git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Um diesen Level zu schaffen musst du einfach nur zwei neue Commits auf das Remote bringen. Aber stell dich schon mal darauf ein, dass die nächsten Level anspruchsvoller werden!"]}}]}}}
},{}],90:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C2","id":"master","remoteTrackingBranchID":"o/master"},"foo":{"target":"C3","id":"foo","remoteTrackingBranchID":"o/foo"},"o/master":{"target":"C2","id":"o/master","remoteTrackingBranchID":null},"o/foo":{"target":"C3","id":"o/foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"}},"HEAD":{"target":"C0","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C2","id":"master","remoteTrackingBranchID":null},"foo":{"target":"C3","id":"foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"}},"HEAD":{"target":"master","id":"HEAD"}}}',solutionCommand:"git push origin master;git push origin foo",startTree:'{"branches":{"master":{"target":"C2","id":"master","remoteTrackingBranchID":"o/master"},"foo":{"target":"C3","id":"foo","remoteTrackingBranchID":"o/foo"},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null},"o/foo":{"target":"C1","id":"o/foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"}},"HEAD":{"target":"C0","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":null},"foo":{"target":"C1","id":"foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"}}}',disabledMap:{"git checkout":!0},name:{en_US:"Git push arguments",de_DE:"Optionen für Git Push"},hint:{en_US:'You can always look at the last slide of the dialog with "objective"',de_DE:'Du kannst dir die Zielsetzung des Levels immer wieder mit "objective" anzeigen lassen'},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Push arguments","","Great! Now that you know about remote tracking branches we can start to uncover some of mystery behind how git push, fetch, and pull work. We're going to tackle one command at a time but the concepts between them are very similar.","",'First we\'ll look at `git push`. You learned in the remote tracking lesson that git figured out the remote *and* the branch to push to by looking at the properties of the currently checked out branch (the remote that it "tracks"). This is the behavior with no arguments specified, but git push can optionally take arguments in the form of:',"","`git push <remote> <place>`","",""]}},{type:"ModalAlert",options:{markdowns:["What is a `<place>` parameter you say? We'll dive into the specifics soon, but first an example. Issuing the command:","","`git push origin master`","","translates to this in English:","",'*Go to the branch named "master" in my repository, grab all the commits, and then go to the branch "master" on the remote named "origin." Place whatever commits are missing on that branch and then tell me when you\'re done*',"",'By specifying `master` as the "place" argument, we told git where the commits will *come from* and where the commits *will go*. It\'s essentially the "place" or "location" to synchronize between the two repositories.',"","Keep in mind that since we told git everything it needs to know (by specifying both arguments), it totally ignores where we are checked out!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's see an example of specifying the arguments. Note the location where we are checked out in this example"],afterMarkdowns:["There we go! `master` got updated on the remote since we specified those arguments"],command:"git checkout C0; git push origin master",beforeCommand:"git clone; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["What if we hadn't specified the arguments? What would happen?"],afterMarkdowns:["The command fails (as you can see), since `HEAD` is not checked out on a remote-tracking branch"],command:"git checkout C0; git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Ok, for this level let's update both `foo` and `master` on the remote. The twist is that `git checkout` is disabled for this level!"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Push-Optionen","","Großartig! Da du dich jetzt mit Remote Tracking Branches auskennst können wir anfangen, die Geheimnisse hinter `git push`, `fetch` und `pull` zu ergründen. Wir werden uns einen Befehl nach dem anderen vornehmen, aber die Funktionsweisen sind sich sehr ähnlich.","",'Zunächst schauen wir uns `git push` an. Du hast im Level über Remote Tracking schon mitbekommen, dass Git den Remote Server *und* den Branch herausbekommt, indem es sich die Eigenschaften des aktuell ausgecheckten Branches ansieht (in denen das Remote steht, das der Branch "trackt"). Das ist das Verhalten bei keiner Angabe weiterer Optionen -- du kannst bei `git push` aber auch folgende setzen:',"","`git push <Remote> <Ort>`","",""]}},{type:"ModalAlert",options:{markdowns:['Was "Ort" sein soll fragst du? Das klären wir später genau, schauen wir uns zunächst ein Beispiel an:',"","`git push origin master`","","Das bedeutet im Klartext:","",'"Geh zum Branch namens `master` in meinem Repository, nimm all seine Commits, dann geh zum Branch `master` auf dem Remote namens `origin`. Leg da alles Commits ab die fehlen und sag mir wenn du fertig bist."',"",'Dadurch, dass wir `master` als "Ort" angegeben haben, weiß Git *woher* die Commits kommen und *wohin* sie sollen. Es ist im Grunde der Name der Orte, die zwischen zwei Repositorys synchronisiert werden soll.',"","Dadurch, dass wir Git alles explizit gesagt haben, was es für die Operation wissen muss (durch Angabe von Remote und Ort) ist es vollkommen egal, was gerade ausgecheckt ist."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Schauen wir uns noch ein Beispiel an. Beachte was in diesem Fall gerade ausgecheckt ist."],afterMarkdowns:["Da haben wir's! `master` wurde auf dem Remote aktualisiert, weil wir beide Optionen angegeben haben."],command:"git checkout C0; git push origin master",beforeCommand:"git clone; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Was wäre passiert, wenn wir keine Optionen benutzt hätten?"],afterMarkdowns:["Der Befehl schlägt fehlt, da `HEAD` nicht auf einem Branch steht, der ein Remote trackt."],command:"git checkout C0; git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Ok, in diesem Level lass und sowohl `foo` als auch `master` auf dem Remote aktualisieren. Um's spannender zu machen, ist `git checkout` in diesem Level deaktiviert."]}}]}}}},{}],91:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C6","id":"master","remoteTrackingBranchID":"o/master"},"foo":{"target":"C4","id":"foo","remoteTrackingBranchID":"o/foo"},"o/master":{"target":"C4","id":"o/master","remoteTrackingBranchID":null},"o/foo":{"target":"C5","id":"o/foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2","C3"],"id":"C4"},"C5":{"parents":["C2"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C4","id":"master","remoteTrackingBranchID":null},"foo":{"target":"C5","id":"foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C5":{"parents":["C2"],"id":"C5"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2","C3"],"id":"C4"}},"HEAD":{"target":"master","id":"HEAD"}}}',solutionCommand:"git push origin master^:foo;git push origin foo:master",startTree:'{"branches":{"master":{"target":"C6","id":"master","remoteTrackingBranchID":"o/master"},"foo":{"target":"C4","id":"foo","remoteTrackingBranchID":"o/foo"},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null},"o/foo":{"target":"C1","id":"o/foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2","C3"],"id":"C4"},"C5":{"parents":["C2"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":null},"foo":{"target":"C1","id":"foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"}}}',name:{en_US:"Git push arguments -- Expanded!",de_DE:"Optionen fü Git Push -- noch mehr!"},hint:{en_US:'Remember you can admit defeat and type in "show solution" :P',de_DE:'Vergiss nicht dass du aufgeben kannst, indem du "show solution" eingibst :P'},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## `<place>` argument details","","Remember from the previous lesson that when we specified `master` as the place argument for git push, we specified both the *source* of where the commits would come from and the *destination* of where the commits would go.","","You might then be wondering -- what if we wanted the source and destination to be different? What if you wanted to push commits from the `foo` branch locally onto the `bar` branch on remote?","","Well unfortunately that's impossible in git... just kidding! Of course it's possible :)... git has tons and tons of flexibility (almost too much).","","Let's see how in the next slide..."]}},{type:"ModalAlert",options:{markdowns:["In order to specify both the source and the destination of `<place>`, simply join the two together with a colon:","","`git push origin <source>:<destination>`","","This is commonly referred to as a colon refspec. Refspec is just a fancy name for a location that git can figure out (like the branch `foo` or even just `HEAD~1`)","","Once you are specifying both the source and destination independently, you can get quite fancy and precise with remote commands. Let's see a demo!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Remember, `source` is any location that git will understand:"],afterMarkdowns:["Woah! That's a pretty trippy command but it makes sense -- git resolved `foo^` into a location, uploaded whatever commits that weren't present yet on the remote, and then updated destination."],command:"git push origin foo^:master",beforeCommand:"git clone; go -b foo; git commit; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["What if the destination you want to push doesn't exist? No problem! Just give a branch name and git will create the branch on the remote for you"],afterMarkdowns:["Sweet, that's pretty slick :D"],command:"git push origin master:newBranch",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["For this level, try to get to the end goal state shown in the visualization, and remember the format of:","","`<source>:<destination>`"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Details zum `<Ort>`-Parameter","",'Du erinnerst dich von dem vorherigen Level, dass, als wir `master` als "Ort" beim `git push` angegeben haben, daraus sowohl die *Quelle* als auch das *Ziel* für die Operation abgeleitet wurden.',"","Daher fragst du dich vielleicht -- was wenn wir möchten, dass Quelle und Ziel anders sind? Was wenn du Commits von einem lokalen Branch `foo` in den Branch `bar` auf einem Server schieben möchtest?","","Tja, leider ist das in Git unmöglich .... ein Scherz! Natürlich ist das möglich. Git besitzt tonnenweise Flexibilität (eher zuviel, als zuwenig).","","Und gleich sehen wir, wie das geht ..."]}},{type:"ModalAlert",options:{markdowns:["Um sowohl Quelle als auch Ziel im `<Ort>`-Parameter anzugeben, gib sie einfach verbunden mit einem Doppelpunkt ein:","","`git push origin <Quelle>:<Ziel>`","","Das wird üblicherweise Refspec (Referenz-Spezifikation) genannt. Refspec ist nur ein anderer Name für einen Ort, mit dem Git etwas anfangen kann (wie mit Branch `foo` oder mit `HEAD~2`)","","Sobald du Quelle und Ziel separat angibt, kannst du flexibel und präzise entfernte Branches ansteuern. Hier eine Demo:"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vergiss nicht, `Quelle` ist jeder mögliche Ort, mit dem Git etwas anfangen kann:"],afterMarkdowns:["Boah! Das ist ein ziemlich abgefahrener Befehl gewesen, aber er ist sinnvoll -- Git hat `foo^` zu einem Commit aufgelöst, alle Commits die bis zu diesem einschließich noch nicht auf dem Server waren hochgeladen und dann dort das Ziel aktualisiert."],command:"git push origin foo^:master",beforeCommand:"git clone; go -b foo; git commit; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Was wäre wenn das Ziel des `push` gar nicht existiert? Kein Problem! Wenn das Ziel ein Branch-Name ist, wird Git den Branch auf dem Server einfach anlegen."],afterMarkdowns:["Schick, das ist ziemlich praktisch. :D"],command:"git push origin master:newBranch",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Um dieses Level zu schaffen versuch den dargestellten Zielzustand zu erreichen und vergiss nicht das Format:","","`<Quelle>:<Ziel>`"]}}]}}}},{}],92:[function(a,b,c){c.level={goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C7%27%22%2C%22id%22%3A%22master%22%2C%22remoteTrackingBranchID%22%3A%22o/master%22%2C%22localBranchesThatTrackThis%22%3Anull%7D%2C%22o/master%22%3A%7B%22target%22%3A%22C7%27%22%2C%22id%22%3A%22o/master%22%2C%22remoteTrackingBranchID%22%3Anull%2C%22localBranchesThatTrackThis%22%3A%5B%22master%22%5D%7D%2C%22side1%22%3A%7B%22target%22%3A%22C2%27%22%2C%22id%22%3A%22side1%22%2C%22remoteTrackingBranchID%22%3Anull%2C%22localBranchesThatTrackThis%22%3Anull%7D%2C%22side2%22%3A%7B%22target%22%3A%22C4%27%22%2C%22id%22%3A%22side2%22%2C%22remoteTrackingBranchID%22%3Anull%2C%22localBranchesThatTrackThis%22%3Anull%7D%2C%22side3%22%3A%7B%22target%22%3A%22C7%27%22%2C%22id%22%3A%22side3%22%2C%22remoteTrackingBranchID%22%3Anull%2C%22localBranchesThatTrackThis%22%3Anull%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C4%22%3A%7B%22parents%22%3A%5B%22C3%22%5D%2C%22id%22%3A%22C4%22%7D%2C%22C5%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C5%22%7D%2C%22C6%22%3A%7B%22parents%22%3A%5B%22C5%22%5D%2C%22id%22%3A%22C6%22%7D%2C%22C7%22%3A%7B%22parents%22%3A%5B%22C6%22%5D%2C%22id%22%3A%22C7%22%7D%2C%22C8%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C8%22%7D%2C%22C2%27%22%3A%7B%22parents%22%3A%5B%22C8%22%5D%2C%22id%22%3A%22C2%27%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C2%27%22%5D%2C%22id%22%3A%22C3%27%22%7D%2C%22C4%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C4%27%22%7D%2C%22C5%27%22%3A%7B%22parents%22%3A%5B%22C4%27%22%5D%2C%22id%22%3A%22C5%27%22%7D%2C%22C6%27%22%3A%7B%22parents%22%3A%5B%22C5%27%22%5D%2C%22id%22%3A%22C6%27%22%7D%2C%22C7%27%22%3A%7B%22parents%22%3A%5B%22C6%27%22%5D%2C%22id%22%3A%22C7%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%2C%22originTree%22%3A%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C7%27%22%2C%22id%22%3A%22master%22%2C%22remoteTrackingBranchID%22%3Anull%2C%22localBranchesThatTrackThis%22%3Anull%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C8%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C8%22%7D%2C%22C2%27%22%3A%7B%22parents%22%3A%5B%22C8%22%5D%2C%22id%22%3A%22C2%27%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C2%27%22%5D%2C%22id%22%3A%22C3%27%22%7D%2C%22C4%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C4%27%22%7D%2C%22C5%27%22%3A%7B%22parents%22%3A%5B%22C4%27%22%5D%2C%22id%22%3A%22C5%27%22%7D%2C%22C6%27%22%3A%7B%22parents%22%3A%5B%22C5%27%22%5D%2C%22id%22%3A%22C6%27%22%7D%2C%22C7%27%22%3A%7B%22parents%22%3A%5B%22C6%27%22%5D%2C%22id%22%3A%22C7%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D%7D",solutionCommand:"git fetch;git rebase o/master side1;git rebase side1 side2;git rebase side2 side3;git rebase side3 master;git push",startTree:'{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":"o/master","localBranchesThatTrackThis":null},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":["master"]},"side1":{"target":"C2","id":"side1","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null},"side2":{"target":"C4","id":"side2","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null},"side3":{"target":"C7","id":"side3","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C1"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"},"C7":{"parents":["C6"],"id":"C7"}},"HEAD":{"target":"side3","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C8","id":"master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C8":{"parents":["C1"],"id":"C8"}},"HEAD":{"target":"master","id":"HEAD"}}}',hint:{en_US:"Remember you can always use the undo or reset commands",de_DE:"Denk dran, du kannst immer undo oder reset benutzen, um deine Befehle zurück zu nehmen."},name:{en_US:"Push Master!",de_DE:"Push Master!"},compareOnlyMasterHashAgnostic:!0,startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Merging feature branches","","Now that you're comfortable with fetching, pulling, and pushing, lets put these skills to the test with a new workflow.","","It's common for developers on big projects to do all their work on feature branches (off of `master`) and then integrate that work only once it's ready. This is similar to the previous lesson (where side branches get pushed to the remote), but here we introduce one more step.","","Some developers only push and pull when on the `master` branch -- that way `master` always stays updated to what is on the remote (`o/master`).","","So for this workflow we combine two things:","","* integrating feature branch work onto `master`, and","* pushing and pulling from the remote"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's see a refresher real quick of how to update `master` and push work"],afterMarkdowns:["We executed two commands here that:","","* rebased our work onto new commits from remote, and","* published our work to the remote"],command:"git pull --rebase; git push",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["This level is pretty hefty -- here is the general outline to solve:","","* There are three feature branches -- `side1` `side2` and `side3`","* We want to push each one of these features, in order, to the remote","* The remote has since been updated, so we will need to incorporate that work as well","",":O intense! good luck, completing this level is a big step"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Einen Feature Branch reintegrieren","","Nun da du mit `fetch`, `pull`, und `push` vertraut bist sollten wir diese Fähigkeiten mit einem neuen Arbeitsablauf auf die Probe stellen.","","Für Entwickler in großen Projekten ist es nicht ungewöhnlich ihre Arbeit in Feature Branches (von `master` abgeleitet) zu erledigen und dann diese Inhalte zu reintegrieren, wenn sie fertig sind. Das ist ähnlich dem vorherigen Level (in dem ein Feature Branch auf den Server geschoben wird), nur mit einem zusätzlichen Schritt.","","Einige Entwickler pushen und pullen nur auf dem `master` -- dadurch ist `master` immer aktuell zu seinem Gegenstück auf dem Server (`o/master`).","","Für diesen Ablauf werden wir also zwei Dinge kombinieren:","","* einen Feature Bran in `master` reintegrieren und","* vom entfernten Server pushen und pullen."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Schauen wir uns zur Erinnerung schnell noch mal an wie man den `master` aktualisiert und seine Commits pusht."],afterMarkdowns:["Wir haben hier zwei Befehle ausgeführt, die:","","* unsere Commits auf die neuen Commits vom Server gepackt und","* unsere Commits zum Server gepusht haben."],command:"git pull --rebase; git push",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["Dieser Level ist ziemlich heftig -- hier ist im Groben der Weg:","","* Es gibt drei Feature Branches -- `side1`, `side2` und `side3`.","* Wir möchten jedes dieser Features, in dieser Reihenfolge, auf den Server bringen.","* Der Server hat Commits, die wir noch nicht haben, diese müssen also bei uns integriert werden.","",":O Krass! Viel Erfolg, diesen Level zu schaffen ist ein großer Schritt."]}}]}}}},{}],93:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C3","id":"master"},"o/master":{"target":"C1","id":"o/master"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C1"],"id":"C4"}},"HEAD":{"target":"C4","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C2","id":"master"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"}},"HEAD":{"target":"master","id":"HEAD"}}}',solutionCommand:"git commit;git checkout o/master;git commit",startTree:'{"branches":{"master":{"target":"C1","id":"master"},"o/master":{"target":"C1","id":"o/master"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C2","id":"master"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"}},"HEAD":{"target":"master","id":"HEAD"}}}',name:{en_US:"Remote Branches",de_DE:"Branches auf entfernten Servern"},hint:{en_US:"Pay attention to the ordering -- commit on master first!",de_DE:"Beachte die Sortierung -- committe zuerst auf dem master!"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Remote Branches","","Now that you've seen `git clone` in action, let's dive into what actually changed.","","The first thing you may have noticed is that a new branch appeared in our local repository called `o/master`. This type of branch is called a _remote_ branch; remote branches have special properties because they serve a unique purpose.","","Remote branches reflect the _state_ of remote repositories (since you last talked to those remote repositories). They help you understand the difference between your local work and what work is public -- a critical step to take before sharing your work with others.","","Remote branches have the special property that when you check them out, you are put into detached `HEAD` mode. Git does this on purpose because you can't work on these branches directly; you have to work elsewhere and then share your work with the remote (after which your remote branches will be updated)."]}},{type:"ModalAlert",options:{markdowns:["### What is `o/`?","","You maybe wondering what the leading `o/` is for on these remote branches. Well, remote branches also have a (required) naming convention -- they are displayed in the format of:","","* `<remote name>/<branch name>`","","Hence, if you look at a branch named `o/master`, the branch name is `master` and the name of the remote is `o`.","","Most developers actually name their main remote `origin`, not `o`. This is so common that git actually sets up your remote to be named `origin` when you `git clone` a repository.","","Unfortunately the full name of `origin` does not fit in our UI, so we use `o` as shorthand :( Just remember when you're using real git, your remote is probably going to be named `origin`!","","That's a lot to take in, so let's see this all in action."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Lets check out a remote branch and see what happens"],afterMarkdowns:["As you can see, git put us into detached `HEAD` mode and then did not update `o/master` when we added a new commit. This is because `o/master` will only update when the remote updates."],command:"git checkout o/master; git commit",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["To finish this level, commit once off of `master` and once after checking out `o/master`. This will help drive home how remote branches behave differently, and they only update to reflect the state of the remote"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branches auf entfernten Servern","","Nun da du `git clone` in Aktion gesehen hast, lass uns tiefer in die Materie eintauchen.","","Das erste, was dir wahrscheinlich aufgefallen ist, ist dass ein neuer Branch in unserem lokalen Repository aufgetaucht ist, namens `o/master`. Diese Art von Branch nennt sich _Remote_ Branch; er hat besondere Eigenschaften, weil er einem bestimmten Zweck dient.","","Ein Remote Branch bildet den Zustand des entsprechenden Branch in einem entfernten Repository ab (dem Zustand in dem der Branch war, als du das letzte mal das entfernte Repository angesprochen hast). Er hilft dir, den Unterschied zwischen deinem lokalen Branch und dem Gegenstück auf dem Server zu sehen -- eine nötige Information, bevor du deine Arbeit mit anderen teilen kannst.","",'Remote Branches besitzen die besondere Eigenschaft dein Repository in den "Detached `HEAD`" Zustand zu versetzen, wenn du sie auscheckst. Git macht das absichtlich so, denn du kannst nicht direkt auf Remote Branches arbeiten; du musst auf Kopien von ihnen arbeiten und deine Änderungen von dort auf den entfernten Server schieben (wonach der Remote Branch dann auch bei dir aktualisiert wird).']}},{type:"ModalAlert",options:{markdowns:["### Was heißt `o/`?","","Du fragst dich vielleicht was das `o/` am Anfang des Namens des Remote Branch bedeuten soll. Nun, Namen von Remote Branches folgen einer (zwingenden) Konvention -- sie werden mit diesem Format gebildet:","","* `<Name des Remote>/<Name des Branches>`","","Wenn du also einen Remote Branch namens `o/master` hast, ist es eine Abbildung des Branches `master` auf dem Server, der in deinem Repository als `origin` bekannt ist.","","Die meisten Entwickler nennen das Haupt-Remote tatsächlich `origin` und nicht `o`. Das ist so verbreitet, dass Git den entfernten Server von dem man ein `git clone` macht tatsächlich als `origin` im Clone speichert.","","Leider passt der ganze Name, `origin`, nicht in unsere Darstellung, deshalb benutzen wir hier kurz `o`. :( Merk dir einfach: wenn du echtes Git benutzt werden die Remotes meistens `origin` heißen!","","So, das war eine Menge zu verdauen, schauen wir uns das in Aktion an."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Checken wir mal einen Remote Branch aus und schauen was passiert"],afterMarkdowns:['Wie du siehst setzt uns Git in den "Detached `HEAD`" Modus und aktualisiert dann nach dem Commit nicht den Branch `o/master`. Das liegt daran, dass der Remote Branch nur aktualisiert wird, wenn sich der entsprechende Branch auf dem Remote verändert.'],command:"git checkout o/master; git commit",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["Um diesen Level zu bewältigen musst du einen Commit in `master` machen und einen nachdem du `o/master` ausgecheckt hast. Das illustriert noch einmal wie sich Branches und Remote Branches unterschiedlich verhalten und dass letztere sich nur verändern, wenn sich ihr Zustand auf dem entfernten Server ändert."]}}]}}}},{}],94:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":"o/master"},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null},"bar":{"target":"C1","id":"bar","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"}}}',solutionCommand:"git push origin :foo;git fetch origin :bar",startTree:'{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":"o/master"},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null},"o/foo":{"target":"C1","id":"o/foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":null},"foo":{"target":"C1","id":"foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"}}}',name:{en_US:"Source of nothing",de_DE:"Die Quelle des Nichts"},hint:{en_US:"The branch command is disabled for this level so you'll have to use fetch!",de_DE:"Der branch Befehl ist für diesen Level inaktiv, du musst also fetch benutzen"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["### Oddities of `<source>`","",'Git abuses the `<source>` parameter in two weird ways. These two abuses come from the fact that you can technically specify "nothing" as a valid `source` for both git push and git fetch. The way you specify nothing is via an empty argument:',"","* `git push origin :side`","* `git fetch origin :bugFix`","","Let's see what these do..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['What does pushing "nothing" to a remote branch do? It deletes it!'],afterMarkdowns:['There, we successfully deleted the `foo` branch on remote by pushing the concept of "nothing" to it. That kinda makes sense...'],command:"git push origin :foo",beforeCommand:"git clone; git push origin master:foo"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['Finally, fetching "nothing" to a place locally actually makes a new branch'],afterMarkdowns:["Very odd / bizarre, but whatever. That's git for you!"],command:"git fetch origin :bar",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["This is a quick level -- just delete one remote branch and create a new branch with `git fetch` to finish!"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["### Die Eigentümlichkeiten von `<Quelle>`","",'Git "missbraucht" den `<Quelle>`-Parameter in zwei Fällen. Diese rühren daher, dass man technisch gesehen "nichts" als gültige `<Quelle>` sowohl für `git push` als auch für `git fetch` angeben kann. Das macht man so:',"","* `git push origin :side`","* `git fetch origin :bugFix`","","Schauen wir, was das bewirkt ..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['Was passiert, wenn man "nichts" auf einen entfernten Branch pusht? Er wird gelöscht!'],afterMarkdowns:['Und schon haben wir `foo` erfolgreich auf dem Remote gelöscht, weil wir "Leere" darauf geschoben haben. Ist auf seine Weise irgendwie logisch ...'],command:"git push origin :foo",beforeCommand:"git clone; git push origin master:foo"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['Und weiter: indem man "nichts" von einem Remote in sein lokales Repository zieht, erstellt man tatsächlich einen neuen Branch.'],afterMarkdowns:["Ziemlich abgefahren / bizarr, aber was soll's. Das ist halt Git."],command:"git fetch origin :bar",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["Das ist ein kurzer Level -- lösch einfach den Remote Branch und erstelle einen neuen Branch mit `git fetch`, um ihn zu lösen."]}}]}}}
},{}],95:[function(a,b,c){c.level={goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C1%22%2C%22id%22%3A%22master%22%2C%22remoteTrackingBranchID%22%3A%22o/master%22%7D%2C%22o/master%22%3A%7B%22target%22%3A%22C3%27%22%2C%22id%22%3A%22o/master%22%2C%22remoteTrackingBranchID%22%3Anull%7D%2C%22side%22%3A%7B%22target%22%3A%22C3%27%22%2C%22id%22%3A%22side%22%2C%22remoteTrackingBranchID%22%3A%22o/master%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22side%22%2C%22id%22%3A%22HEAD%22%7D%2C%22originTree%22%3A%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C3%27%22%2C%22id%22%3A%22master%22%2C%22remoteTrackingBranchID%22%3Anull%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D%7D",solutionCommand:"git checkout -b side o/master;git commit;git pull --rebase;git push",startTree:'{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":"o/master"},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C2","id":"master","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"}},"HEAD":{"target":"master","id":"HEAD"}}}',name:{en_US:"Remote Tracking",de_DE:"Remote Tracking"},hint:{en_US:"Remember there are two ways to set remote tracking!",de_DE:"Nicht vergessen, es gibt zwei Arten Remote Tracking einzurichten!"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["### Remote-Tracking branches","",'One thing that might have seemed "magical" about the last few lessons is that git knew the `master` branch was related to `o/master`. Sure these branches have similar names and it might make logical sense to connect the `master` branch on the remote to the local `master` branch, but this connection is demonstrated clearly in two scenarios:',"","* During a pull operation, commits are downloaded onto `o/master` and then *merged* into the `master` branch. The implied target of the merge is determined from this connection.","* During a push operation, work from the `master` branch was pushed onto the remote's `master` branch (which was then represented by `o/master` locally). The *destination* of the push is determined from the connection between `master` and `o/master`.",""]}},{type:"ModalAlert",options:{markdowns:["## Remote tracking","",'Long story short, this connection between `master` and `o/master` is explained simply by the "remote tracking" property of branches. The `master` branch is set to track `o/master` -- this means there is an implied merge target and implied push destination for the `master` branch.',"","You may be wondering how this property got set on the `master` branch when you didn't run any commands to specify it. Well, when you clone a repository with git, this property is actually set for you automatically. ","","During a clone, git creates a remote branch for every branch on the remote (aka branches like `o/master`) and then, for each remote branch, creates a local branch to *track* that remote branch (aka `master`). Thats why you may have seen the following command output:","",'    local branch "master" set to track remote branch "o/master"',"","When running `git clone`."]}},{type:"ModalAlert",options:{markdowns:["### Can I specify this myself?","","Yes you can! You can make any arbitrary branch track `o/master`, and if you do so, that branch will have the same implied push destination and merge target as `master`. This means you can run `git push` on a branch named `totallyNotMaster` and have your work pushed to the `master` branch on the remote!","","There are two ways to set this property. The first is to checkout a new branch by using a remote branch as the specified ref. Running","","`git checkout -b totallyNotMaster o/master`","","Creates a new branch named `totallyNotMaster` and sets it to track `o/master`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Enough talking, let's see a demonstration! We will checkout a new branch named `foo` and set it to track `master` on the remote."],afterMarkdowns:["As you can see, we used the implied merge target of `o/master` to update the `foo` branch. Note how master doesn't get updated!!"],command:"git checkout -b foo o/master; git pull",beforeCommand:"git clone; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["This also applies for git push"],afterMarkdowns:["Boom. We pushed our work to the `master` on the remote even though our branch was named something totally different"],command:"git checkout -b foo o/master; git commit; git push",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["### Way #2","","Another way to set remote tracking on a branch is to simply use the `git branch -u` option. Running","","`git branch -u o/master foo`","","will set the `foo` branch to track `o/master`. If `foo` is currently checked out you can even leave it off:","","`git branch -u o/master`",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's see this other way of specifying remote tracking real quick..."],afterMarkdowns:["Same as before, just a more explicit command. Sweet!"],command:"git branch -u o/master foo; git commit; git push",beforeCommand:"git clone; git checkout -b foo"}},{type:"ModalAlert",options:{markdowns:["Ok! For this level let's push work onto the `master` branch on remote while *not* checked out on `master` locally. I'll let you figure out the rest since this is the advanced course :P"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["### Remote Tracking Branches","",'In den letzten paar Leveln wirkte es womöglich etwas "magisch", dass Git automatisch wusste, dass der Branch `master` irgendwie mit `o/master` verwandt ist. Klar, sie haben ähnliche Namen und daher mag es logisch erscheinen sie in Verbindung zu bringen, aber offensichtlich wird es in zwei Szenarien:',"","* Beim `pull` werden Commits in `o/master` heruntergeladen und dann per *Merge* in den Branch `master` gebracht. Aus der Verbindung zwischen den beiden Branches leitet sich das Ziel des Merges ab.","* Beim `push` werden Commits vom `master` auf den `master` auf dem Remote Server geschoben (und die Änderung _danach_ in `o/master` abgebildet). Das *Ziel* des Push wird aus der Verbindung zwischen `master` und `o/master` abgeleitet.",""]}},{type:"ModalAlert",options:{markdowns:['Langer Rede kurzer Sinn, die Verbindung zwischen `master` und `o/master` ist einfach die Eigenschaft des "Remote Tracking" dieser Branches. `master` ist so eingestellt, dass er `o/master` trackt -- das heißt es gibt ein implizites Ziel für `pull` und `push` Operationen auf dem `master` Branch.',"","Du fragst dich vielleicht wieso diese Eigenschaft auf dem `master` definiert ist, wenn du das doch gar nicht explizit gemacht hast. Naja, beim Clonen eines Repository macht Git das für den `master` automatisch.","","Während des Clonens erstellt Git einen Remote Branch für jeden Branch, den es auf dem Remote Server findet (also Branches wie `o/master`); dann erstellt es für den Branch, auf den auf dem entfernten Server `HEAD` zeigt (meistens `master`) automatisch einen lokalen Branch und stellt ihn so ein, dass er sein Gegenstück auf dem Server trackt. Deswegen hast du beim clonen vielleicht schon mal dies gesehen:","",'    local branch "master" set to track remote branch "o/master"']}},{type:"ModalAlert",options:{markdowns:["### Kann ich das auch selbst machen?","","Na klar! Du kannst jeden beliebigen Branch so einstellen, dass er `o/master` trackt, und wenn du das tust wird der Branch dieselben impliziten Zielangaben für `push` und `pull` haben wie `master`. Du kannst also `git push` auf dem Branch `absolut_nicht_master` ausführen und deine Commits auf `master` auf dem entfernten Server schieben lassen.","","Es gibt zwei Möglichkeiten diese Eigenschaft zu definieren. Die erste ist, einen neuen lokalen Branch von einem Remote Branch auszuchecken. Wenn man","","    git checkout -b absolut_nicht_master o/master","","eingibt, wir ein neuer lokaler Branch namens `absolut_nicht_master` angelegt, der `o/master` trackt."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Genug gequatscht, schauen wir uns eine Demonstration an! Wir checken einen neuen Branch `foo` aus, so dass er `master` auf dem Server trackt."],afterMarkdowns:["Wie du siehst benutzen wir der implizite Ziel beim `pull` um `foo` zu aktualisieren. Beachte, dass `master` nicht aktualisiert wird."],command:"git checkout -b foo o/master; git pull",beforeCommand:"git clone; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Das gilt auch für `git push`."],afterMarkdowns:["Bämm. Wir haben unsere Commits auf den `master` auf dem Server geschoben, obwohl unser lokaler Branch völlig anders heißt."],command:"git checkout -b foo o/master; git commit; git push",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["### Methode 2","","Noch eine Möglichkeit um Remote Tracking auf einem Branch einzustellen, ist einfach `git branch -u` zu benutzen. Wenn man","","    git branch -u o/master foo","","eingibt, wir damit der lokale Branch `foo` so eingestellt, dass er `o/master` trackt. Den Namen des lokalen Branch kannst du auch weglassen, falls du ihn eh aktuell ausgecheckt hast:","","    git branch -u o/master",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Schauen wir uns auch diese Methode noch an ..."],afterMarkdowns:["Genau wie vorher, nur ein bisschen ausführlicherer Befehl. Schick!"],command:"git branch -u o/master foo; git commit; git push",beforeCommand:"git clone; git checkout -b foo"}},{type:"ModalAlert",options:{markdowns:["Ok. In diesem Level muss du Commits auf den `master` auf dem Server schieben, *ohne* den lokalen `master` ausgecheckt zu haben. Den Rest kannst du selbst herausfinden, schließlich ist das hier für Fortgeschrittene. :P"]}}]}}}},{}]},{},[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95]);