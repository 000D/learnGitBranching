Big things:
~~~~~~~~~~~~~~~~~~~~~~~~

Big Graphic things:
~~~~~~~~~~~~~~~~~~~~~~~~~
[ ] show goal
[ ] show solution
[ ] show which level you are in! with a little thing on the top
[ ] levels dropdown selection?

Medium things:
~~~~~~~~~~~~~~~~~~~~~~~~~~~
[ ] move command history into sandbox / visualization?

Commands
========

Small things to implement:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Minor Bugs to fix:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Big Bugs to fix:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[ ] window zoom alert thing
[ ] better stuff for modals stealing input
[ ] click handlers on goal visualization

/*************************************
 ** Publish Things **
 ************************************/
- cross browser support... ?
- fix terminal input field in general

Done things:
(I only started this on Dec 17th 2012 to get a better sense of what was done)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[x] reset for sandbox command
[x] do an after-paper-initialize type thing so we can insert git shim once
    git engine is done.
[x] promise-based levels
[x] fixed that to-do entry with the toggle Z thing. now its much more consistent
[x] sandbox a real view now
[x] awesome before and after shims with event baton stealing and passing back
[x] sip from buffer with post-command hooks. ideally the git engine
    knows nothing about the level being played
[x] fix tests
[x] transition to deferreds / promises for command callbacks
[x] awesome ability to have dialogs and such handle command processing and block
[x] figure out why multiview baton passing doesn't work...
[x] multiple things can process!!!
[x] move command creation outside of the command view so multiple things
    can be responsible for specifying the waterfall associated with a command!
[x] awesome zoom level polling and sweet event baton stealing :DDDDDDDDDDDDDD
[x] then refactor keyboard input and UI.listen() to that event system
[x] make some kind of "single listener" event system... will make keyboard stuff easy
    because then you just steal and release for modals and such
[x] text input from the commandPromptView must flow down into
    filters. no hacky stuff anymore where it's part of the option parser,
    wtf
[x] ok fuckit here is the deal. Command model has minimal logic -- it calls
    to a parse waterfall that expands any shortcuts needed, handles any instant
    commands, and then finally will handle the dispatching. I think this will be
    really nice :D
[x] disabled map for levels
[x] better click events on branches and commits
[x] change to returning a promise for multiview
[x] multiViews with multiple terminals...
[x] debounce the forward and back methods
[x] multiview makes all these arrow views which fire events
[x] markdown parsing yay!!
[x] check animation for command entry fading nicely wtf
[x] no more CSS ids in views
[x] promise-based confirm cnacel
[x] rebase buttons view & styling
[x] rebase entries styling
[x] view for anything above the fold (modal view)
[x] rebase styling (get it better. even cuter -- make it like a command window)
[x] fix multiple rebases
[x] z index reflow update
[x] level finish animation
[x] refactor visualization
[x] aliases replace when put into commands
[x] headless Git for testing (send it commands and expected trees)
[x] few tests
[x] Great git test coverage
[x] gitEngine loads from tree immediately, not the weird thing we have now!
[x] nice opacity fade in
[x] clean up require
[x] promise based callback for interactive rebase WITH FAIL awesome

